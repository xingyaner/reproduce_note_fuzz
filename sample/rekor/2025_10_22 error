starting build "9c5f8b1c-5b41-4f72-a8d0-0c02846d26bf"

FETCHSOURCE
BUILD
Starting Step #0
Step #0: Already have image (with digest): gcr.io/cloud-builders/git
Step #0: Cloning into 'oss-fuzz'...
Finished Step #0
Starting Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a"
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Already have image (with digest): gcr.io/cloud-builders/docker
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Sending build context to Docker daemon   5.12kB
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 1/6 : FROM gcr.io/oss-fuzz-base/base-builder-go
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": latest: Pulling from oss-fuzz-base/base-builder-go
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b549f31133a9: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4cab2e9940c4: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b2d6cb003f96: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c5ec622c42d5: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 76a8da3bd377: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 14f53b14f02e: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7f1353e6e254: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 52ca464d533f: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 75bdb4b0a6ee: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8ec5c0f7ce63: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd5488d9d92f: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c14c4e4bf959: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 56d811f45d53: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 47129490b488: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a22b9cc82a87: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f37aabbf5378: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 60885dd8685c: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 2a4eda99b39d: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 503dd44e6582: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c5ec622c42d5: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ffd7a4a02cd7: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": cecb76a0eeeb: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8a98b72756b0: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7eb7765bb32e: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 52ca464d533f: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 310b72b462ed: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 76a8da3bd377: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ebb8e741a3d1: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7f1353e6e254: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd7cddead71d: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 43ee29b25f02: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f1bc67d99a5e: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6c12abd78e9f: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4f37e418f520: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 75bdb4b0a6ee: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 14f53b14f02e: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": d3c3787c69b1: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 786ba5cb8e87: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6e870e8e2bc1: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 756c38c339b4: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f642f0edb40e: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8a98b72756b0: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8615c4186726: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8ec5c0f7ce63: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 98e3d3db37fc: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 3806054f9efe: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 970e587b6493: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 9f1c7112f1fb: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a5e15bfea41a: Pulling fs layer
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 756c38c339b4: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f642f0edb40e: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f37aabbf5378: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 60885dd8685c: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 47129490b488: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd7cddead71d: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6c12abd78e9f: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4f37e418f520: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 43ee29b25f02: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c14c4e4bf959: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": d3c3787c69b1: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a22b9cc82a87: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6e870e8e2bc1: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 98e3d3db37fc: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ffd7a4a02cd7: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 786ba5cb8e87: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 503dd44e6582: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 2a4eda99b39d: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 310b72b462ed: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 970e587b6493: Waiting
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b2d6cb003f96: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b549f31133a9: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b549f31133a9: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 76a8da3bd377: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 76a8da3bd377: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c5ec622c42d5: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c5ec622c42d5: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7f1353e6e254: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7f1353e6e254: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4cab2e9940c4: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4cab2e9940c4: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 52ca464d533f: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 52ca464d533f: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b549f31133a9: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8ec5c0f7ce63: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8ec5c0f7ce63: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd5488d9d92f: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd5488d9d92f: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c14c4e4bf959: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c14c4e4bf959: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 56d811f45d53: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 56d811f45d53: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 47129490b488: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 47129490b488: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 75bdb4b0a6ee: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 75bdb4b0a6ee: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a22b9cc82a87: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a22b9cc82a87: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f37aabbf5378: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f37aabbf5378: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 2a4eda99b39d: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 2a4eda99b39d: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 60885dd8685c: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 60885dd8685c: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 503dd44e6582: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ffd7a4a02cd7: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ffd7a4a02cd7: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": cecb76a0eeeb: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": cecb76a0eeeb: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8a98b72756b0: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8a98b72756b0: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 310b72b462ed: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 310b72b462ed: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7eb7765bb32e: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7eb7765bb32e: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ebb8e741a3d1: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ebb8e741a3d1: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd7cddead71d: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 43ee29b25f02: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f1bc67d99a5e: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f1bc67d99a5e: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6c12abd78e9f: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6c12abd78e9f: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": d3c3787c69b1: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4f37e418f520: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4f37e418f520: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 14f53b14f02e: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 14f53b14f02e: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 786ba5cb8e87: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 786ba5cb8e87: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6e870e8e2bc1: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 756c38c339b4: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 756c38c339b4: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4cab2e9940c4: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f642f0edb40e: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8615c4186726: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8615c4186726: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": b2d6cb003f96: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 970e587b6493: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 970e587b6493: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 98e3d3db37fc: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 98e3d3db37fc: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 3806054f9efe: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 3806054f9efe: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a5e15bfea41a: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a5e15bfea41a: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c5ec622c42d5: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 76a8da3bd377: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 9f1c7112f1fb: Verifying Checksum
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 9f1c7112f1fb: Download complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 14f53b14f02e: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7f1353e6e254: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 52ca464d533f: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 75bdb4b0a6ee: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8ec5c0f7ce63: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd5488d9d92f: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": c14c4e4bf959: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 56d811f45d53: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 47129490b488: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a22b9cc82a87: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f37aabbf5378: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 60885dd8685c: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 2a4eda99b39d: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 503dd44e6582: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ffd7a4a02cd7: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": cecb76a0eeeb: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8a98b72756b0: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 7eb7765bb32e: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 310b72b462ed: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": ebb8e741a3d1: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": dd7cddead71d: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 43ee29b25f02: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f1bc67d99a5e: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6c12abd78e9f: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 4f37e418f520: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": d3c3787c69b1: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 786ba5cb8e87: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 6e870e8e2bc1: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 756c38c339b4: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": f642f0edb40e: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 8615c4186726: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 98e3d3db37fc: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 3806054f9efe: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 970e587b6493: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": 9f1c7112f1fb: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": a5e15bfea41a: Pull complete
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Digest: sha256:66c8870a11eaec121582703baa0733d3930e6af9fdfc1444d4c7eb4a6b64bb81
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Status: Downloaded newer image for gcr.io/oss-fuzz-base/base-builder-go:latest
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 9aeea59c902a
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 2/6 : RUN git clone --depth 1 https://github.com/sigstore/rekor
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> Running in 516f5fb3deb1
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [91mCloning into 'rekor'...
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [0mRemoving intermediate container 516f5fb3deb1
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 6aa3e564b4de
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 3/6 : RUN git clone --depth=1 https://github.com/AdamKorcz/instrumentation
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> Running in 72a0cc1dce65
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [91mCloning into 'instrumentation'...
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [0mRemoving intermediate container 72a0cc1dce65
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 6a34fdb13319
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 4/6 : RUN git clone --depth=1 https://github.com/sassoftware/relic
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> Running in 89cbd33ec38c
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [91mCloning into 'relic'...
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": [0mRemoving intermediate container 89cbd33ec38c
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 56153df701db
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 5/6 : COPY build.sh $SRC
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 872ec5ebdee6
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Step 6/6 : WORKDIR $SRC/rekor/pkg
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> Running in 2d95a83cad70
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Removing intermediate container 2d95a83cad70
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a":  ---> 8ee9707947fc
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Successfully built 8ee9707947fc
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Successfully tagged gcr.io/oss-fuzz/rekor:latest
Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a": Successfully tagged us-central1-docker.pkg.dev/oss-fuzz/unsafe/rekor:latest
Finished Step #1 - "build-6e541463-6ed2-4495-b790-8a111223e51a"
Starting Step #2 - "srcmap"
Step #2 - "srcmap": Already have image: gcr.io/oss-fuzz/rekor
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + SRCMAP=/tmp/filex4JYKO
Step #2 - "srcmap": + echo '{}'
Step #2 - "srcmap": + PATHS_TO_SCAN=/src
Step #2 - "srcmap": + [[ go == \g\o ]]
Step #2 - "srcmap": + PATHS_TO_SCAN='/src /root/go'
Step #2 - "srcmap": ++ find /src /root/go -name .git -type d
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/relic/.git
Step #2 - "srcmap": + GIT_DIR=/src/relic
Step #2 - "srcmap": + cd /src/relic
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/sassoftware/relic
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=bdc9acbfe6a439c79e51d931bccf4d0e9e49f233
Step #2 - "srcmap": + jq_inplace /tmp/filex4JYKO '."/src/relic" = { type: "git", url: "https://github.com/sassoftware/relic", rev: "bdc9acbfe6a439c79e51d931bccf4d0e9e49f233" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/fileQAA7oc
Step #2 - "srcmap": + cat /tmp/filex4JYKO
Step #2 - "srcmap": + jq '."/src/relic" = { type: "git", url: "https://github.com/sassoftware/relic", rev: "bdc9acbfe6a439c79e51d931bccf4d0e9e49f233" }'
Step #2 - "srcmap": + mv /tmp/fileQAA7oc /tmp/filex4JYKO
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/instrumentation/.git
Step #2 - "srcmap": + GIT_DIR=/src/instrumentation
Step #2 - "srcmap": + cd /src/instrumentation
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/AdamKorcz/instrumentation
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=d665541f9baa20fe5a9830608ccdec48dbd2e990
Step #2 - "srcmap": + jq_inplace /tmp/filex4JYKO '."/src/instrumentation" = { type: "git", url: "https://github.com/AdamKorcz/instrumentation", rev: "d665541f9baa20fe5a9830608ccdec48dbd2e990" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/fileWr6bRJ
Step #2 - "srcmap": + cat /tmp/filex4JYKO
Step #2 - "srcmap": + jq '."/src/instrumentation" = { type: "git", url: "https://github.com/AdamKorcz/instrumentation", rev: "d665541f9baa20fe5a9830608ccdec48dbd2e990" }'
Step #2 - "srcmap": + mv /tmp/fileWr6bRJ /tmp/filex4JYKO
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/rekor/.git
Step #2 - "srcmap": + GIT_DIR=/src/rekor
Step #2 - "srcmap": + cd /src/rekor
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/sigstore/rekor
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=5de8b859ba7a736d0e0a17eb8fe9f339870ce8b5
Step #2 - "srcmap": + jq_inplace /tmp/filex4JYKO '."/src/rekor" = { type: "git", url: "https://github.com/sigstore/rekor", rev: "5de8b859ba7a736d0e0a17eb8fe9f339870ce8b5" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/fileHH32vg
Step #2 - "srcmap": + cat /tmp/filex4JYKO
Step #2 - "srcmap": + jq '."/src/rekor" = { type: "git", url: "https://github.com/sigstore/rekor", rev: "5de8b859ba7a736d0e0a17eb8fe9f339870ce8b5" }'
Step #2 - "srcmap": + mv /tmp/fileHH32vg /tmp/filex4JYKO
Step #2 - "srcmap": ++ find /src /root/go -name .svn -type d
Step #2 - "srcmap": ++ find /src /root/go -name .hg -type d
Step #2 - "srcmap": + '[' '' '!=' '' ']'
Step #2 - "srcmap": + cat /tmp/filex4JYKO
Step #2 - "srcmap": + rm /tmp/filex4JYKO
Step #2 - "srcmap": {
Step #2 - "srcmap":   "/src/relic": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/sassoftware/relic",
Step #2 - "srcmap":     "rev": "bdc9acbfe6a439c79e51d931bccf4d0e9e49f233"
Step #2 - "srcmap":   },
Step #2 - "srcmap":   "/src/instrumentation": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/AdamKorcz/instrumentation",
Step #2 - "srcmap":     "rev": "d665541f9baa20fe5a9830608ccdec48dbd2e990"
Step #2 - "srcmap":   },
Step #2 - "srcmap":   "/src/rekor": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/sigstore/rekor",
Step #2 - "srcmap":     "rev": "5de8b859ba7a736d0e0a17eb8fe9f339870ce8b5"
Step #2 - "srcmap":   }
Step #2 - "srcmap": }
Finished Step #2 - "srcmap"
Starting Step #3 - "compile-libfuzzer-address-x86_64"
Step #3 - "compile-libfuzzer-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #3 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #3 - "compile-libfuzzer-address-x86_64": Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
Step #3 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-libfuzzer-address-x86_64": CC=clang
Step #3 - "compile-libfuzzer-address-x86_64": CXX=clang++ -lresolv
Step #3 - "compile-libfuzzer-address-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link
Step #3 - "compile-libfuzzer-address-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
Step #3 - "compile-libfuzzer-address-x86_64": RUSTFLAGS=--cfg fuzzing -Zsanitizer=address -Cdebuginfo=1 -Cforce-frame-pointers
Step #3 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-libfuzzer-address-x86_64": + export 'CXX=clang++ -lresolv -lresolv'
Step #3 - "compile-libfuzzer-address-x86_64": + CXX='clang++ -lresolv -lresolv'
Step #3 - "compile-libfuzzer-address-x86_64": + /src/rekor/tests/oss_fuzz.sh
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/exp v0.0.0-20250620022241-b7579e27df2b
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/profiler v0.4.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/protobuf-specs v0.5.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/go-cmp v0.7.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/protobuf v1.36.10
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-retryablehttp v0.7.8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/runtime v0.28.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/errors v0.22.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-cleanhttp v0.5.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/strfmt v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-chi/chi/v5 v5.2.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/loads v0.23.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-sql-driver/mysql v1.9.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/mitchellh/go-homedir v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag v0.24.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jmoiron/sqlx v1.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/prometheus/client_golang v1.23.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/validate v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.uber.org/goleak v1.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/redis/go-redis/v9 v9.14.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spf13/cobra v1.10.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/spec v0.22.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go v0.121.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spf13/viper v1.21.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/mitchellh/mapstructure v1.5.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/rs/cors v1.11.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading sigs.k8s.io/release-utils v0.12.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/AdamKorcz/go-fuzz-headers-1 v0.0.0-20230919221257-8b5d3ce2d11d
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cyberphone/json-canonicalization v0.0.0-20220623050100-57a0ce2678a7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spf13/pflag v1.0.10
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/conv v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sassoftware/relic v7.2.1+incompatible
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.uber.org/zap v1.27.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/trillian v1.7.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sassoftware/relic/v7 v7.6.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/DATA-DOG/go-sqlmock v1.5.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/net v0.44.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-redis/redismock/v9 v9.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/sigstore v1.9.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/transparency-dev/merkle v0.0.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/sync v0.17.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20251002232023-7c0ddcbb5797
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/grpc v1.75.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/crypto v0.42.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/genproto v0.0.0-20250603155806-513f23925822
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/mod v0.28.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jedisct1/go-minisign v0.0.0-20211028175153-1c139d1cc84b
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/ini.v1 v1.67.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/cmdutils v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/blang/semver v3.5.1+incompatible
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/fileutils v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/jsonname v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/jsonutils v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/loading v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/mangling v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/netutils v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/stringutils v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/typeutils v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/yamlutils v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/stretchr/testify v1.11.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading sigs.k8s.io/yaml v1.6.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/golang/mock v1.7.0-rc.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/yaml.v2 v2.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/in-toto/in-toto-golang v0.9.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/veraison/go-cose v1.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading filippo.io/edwards25519 v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/mattn/go-sqlite3 v1.14.24
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/theupdateframework/go-tuf v0.7.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/secure-systems-lab/go-securesystemslib v0.9.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-viper/mapstructure/v2 v2.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/uuid v1.6.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/oklog/ulid v1.3.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.mongodb.org/mongo-driver v1.17.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/inconshreveable/mousetrap v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/fsnotify/fsnotify v1.9.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sagikazarmark/locafero v0.11.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spf13/afero v1.15.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spf13/cast v1.10.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/analysis v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/iam v1.5.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/pubsub/v2 v2.0.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/api v0.252.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/common-nighthawk/go-figure v0.0.0-20210622060536-734e95fb86be
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/grpc-ecosystem/go-grpc-middleware v1.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/sigstore/pkg/signature/kms/aws v1.9.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/sigstore/pkg/signature/kms/azure v1.9.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/sigstore/pkg/signature/kms/gcp v1.9.6-0.20250729224751-181c5d3339b3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sigstore/sigstore/pkg/signature/kms/hashivault v1.9.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/tink-crypto/tink-go-awskms/v2 v2.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/tink-crypto/tink-go-gcpkms/v2 v2.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/tink-crypto/tink-go/v2 v2.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.step.sm/crypto v0.70.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/compute/metadata v0.9.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/pprof v0.0.0-20250602020802-c6617b811d0e
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/googleapis/gax-go/v2 v2.15.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/pubsub v1.50.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/oauth2 v0.31.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gocloud.dev v0.40.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cavaliercoder/go-rpm v0.0.0-20200122174316-8cb9fd9c31a8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/rpmpack v0.7.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/opentracing/opentracing-go v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/lib/pq v1.10.9
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-hclog v1.6.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading k8s.io/api v0.32.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/onsi/gomega v1.25.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/onsi/ginkgo v1.16.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel/trace v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel/sdk v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/docker/go-units v0.5.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.uber.org/multierr v1.11.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/yaml.v3 v3.0.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cespare/xxhash/v2 v2.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/bsm/ginkgo/v2 v2.12.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/bsm/gomega v1.27.10
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/prometheus/client_model v0.6.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/prometheus/common v0.66.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/klauspost/compress v1.18.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/beorn7/perks v1.0.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/prometheus/procfs v0.16.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/sys v0.36.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/jsonpointer v0.22.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/jsonreference v0.21.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.yaml.in/yaml/v3 v3.0.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading google.golang.org/genproto/googleapis/api v0.0.0-20250818200422-3122310a409c
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/go-containerregistry v0.20.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-test/deep v1.1.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/letsencrypt/boulder v0.0.0-20240620165639-de9c06129bec
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/term v0.35.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.yaml.in/yaml/v2 v2.4.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-openapi/swag/jsonutils/fixtures_test v0.25.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/pkg/errors v0.9.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading software.sslmate.com/src/go-pkcs12 v0.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/shibumi/go-pathspec v1.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading k8s.io/klog/v2 v2.130.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/fxamacker/cbor/v2 v2.7.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/subosito/gotenv v1.6.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/pelletier/go-toml/v2 v2.2.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/text v0.29.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sourcegraph/conc v0.3.1-0.20240121214520-5f936abd7ae8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/frankban/quicktest v1.14.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2 v1.38.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/config v1.31.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/kms v1.44.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jellydator/ttlcache/v3 v3.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go v1.55.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/azcore v1.18.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.11.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-jose/go-jose/v4 v4.1.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/kms v1.22.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/vault/api v1.16.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/storage v1.56.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/gofuzz v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opencensus.io v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cavaliergopher/cpio v1.0.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/klauspost/pgzip v1.2.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/ulikunitz/xz v0.5.14
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/fatih/color v1.16.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/mattn/go-colorable v0.1.13
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/mattn/go-isatty v0.0.20
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cavaliercoder/badio v0.0.0-20160213150051-ce5280129e9e
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/kylelemons/godebug v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-logr/logr v1.4.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel/metric v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/go-logr/stdr v1.2.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/howeyc/gopass v0.0.0-20210920133722-c8aef6fb66ef
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/zalando/go-keyring v0.2.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/kr/pretty v0.3.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/x448/float16 v0.8.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/smithy-go v1.22.5
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/credentials v1.18.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.18.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/internal/ini v1.8.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/sso v1.28.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/ssooidc v1.33.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/sts v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/internal/configsources v1.4.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/internal v1.11.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/longrunning v0.6.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/AzureAD/microsoft-authentication-library-for-go v1.4.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache v0.3.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/golang-jwt/jwt/v5 v5.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/Azure/azure-sdk-for-go v68.0.0+incompatible
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/golang/protobuf v1.5.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/opencontainers/go-digest v1.0.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/errwrap v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-rootcerts v1.0.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-multierror v1.1.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cenkalti/backoff/v4 v4.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-secure-stdlib/parseutil v0.1.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-secure-stdlib/strutil v0.1.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/hcl v1.0.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/time v0.13.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/wire v0.6.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/feature/s3/manager v1.17.10
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/s3 v1.58.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.einride.tech/aip v0.73.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/nxadm/tail v1.4.11
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/auto/sdk v1.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/auth v0.17.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.53.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/contrib/detectors/gcp v1.36.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel/sdk/metric v1.37.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.36.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/alessio/shellescape v1.4.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/danieljoos/wincred v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/godbus/dbus/v5 v5.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/kr/text v0.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/rogpeppe/go-internal v1.13.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.7.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/gogo/protobuf v1.3.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading k8s.io/apimachinery v0.32.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.13.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.13.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/ryanuber/go-glob v1.0.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading golang.org/x/xerrors v0.0.0-20240716161551-93cc26a95ae9
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/hashicorp/go-sockaddr v1.0.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/go-replayers/grpcreplay v1.3.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/go-replayers/httpreplay v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/internal/v4a v1.3.15
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/checksum v1.3.17
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.17.15
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jmhodges/clock v1.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.29.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/monitoring v1.24.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.53.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/cloudmock v0.53.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/envoyproxy/go-control-plane/envoy v1.32.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gopkg.in/inf.v0 v0.9.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading k8s.io/utils v0.0.0-20250820121507-0af2bda4dd1d
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading sigs.k8s.io/structured-merge-diff/v4 v4.4.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading gonum.org/v1/gonum v0.16.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/logging v1.13.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/trace v1.11.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cncf/xds/go v0.0.0-20250501225837-2ac532fd4443
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/envoyproxy/protoc-gen-validate v1.2.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/envoyproxy/go-control-plane v0.13.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/martian/v3 v3.3.3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/stretchr/objx v0.5.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.61.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/spiffe/go-spiffe/v2 v2.5.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/json-iterator/go v1.1.12
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/envoyproxy/go-control-plane/ratelimit v0.1.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/s2a-go v0.1.9
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/googleapis/enterprise-certificate-proxy v0.3.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cel.dev/expr v0.24.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/felixge/httpsnoop v1.0.4
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/modern-go/reflect2 v1.0.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/zeebo/errs v1.4.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.61.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading cloud.google.com/go/auth/oauth2adapt v0.2.8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jmespath/go-jmespath v0.4.1-0.20220621161143-b0104c826a24
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/jmespath/go-jmespath/internal/testify v1.5.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/AzureAD/microsoft-authentication-extensions-for-go/cache v0.1.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/keybase/go-keychain v0.0.1
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/pki/factory_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/pki/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild418621130/ossFuzzOverlayFile.json3193659521 -o FuzzKeys.a ./main.1521777999.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2506504887/ossFuzzOverlayFile.json3778635880 -o FuzzCreateEntryIDFromParts.a ./main.2151115801.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild615803282/ossFuzzOverlayFile.json3764524338 -o FuzzGetUUIDFromIDString.a ./main.3791209064.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1747633107/ossFuzzOverlayFile.json1873275827 -o FuzzGetTreeIDFromIDString.a ./main.2987498223.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3608469660/ossFuzzOverlayFile.json226060566 -o FuzzPadToTreeIDLen.a ./main.3341621768.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3083022176/ossFuzzOverlayFile.json498221523 -o FuzzReturnEntryIDString.a ./main.1858825803.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2060930777/ossFuzzOverlayFile.json3201879866 -o FuzzTreeID.a ./main.3149165887.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild4229310059/ossFuzzOverlayFile.json1316398953 -o FuzzValidateUUID.a ./main.799116946.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3035992821/ossFuzzOverlayFile.json868504246 -o FuzzValidateTreeID.a ./main.4204327422.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/log_index_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/ranges_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/shard_fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/sharding/sharding_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3788380667/ossFuzzOverlayFile.json405652166 -o FuzzValidateEntryID.a ./main.4083627638.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/signer/file_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/signer/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/signer/memory_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/signer/signer_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/signer/tink_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1251941599/ossFuzzOverlayFile.json4161147970 -o FuzzNewFile.a ./main.827935639.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3869139036/ossFuzzOverlayFile.json2730358558 -o FuzzCoseCreateProposedEntry.a ./main.2949251752.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3952795023/ossFuzzOverlayFile.json1593221460 -o FuzzCoseUnmarshalAndCanonicalize.a ./main.109886405.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/cose/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3439423167/ossFuzzOverlayFile.json1452277444 -o FuzzCoseDecodeEntryDirectMapAndRaw.a ./main.2830533149.go]
Step #3 - "compile-libfuzzer-address-x86_64": Could not find the function: func FuzzHashedRekord(f *testing.F)
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1850704762/ossFuzzOverlayFile.json22481254 -o FuzzHashedRekordCreateProposedEntry.a ./main.2202889568.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2586353233/ossFuzzOverlayFile.json3583339829 -o FuzzHashedRekordUnmarshalAndCanonicalize.a ./main.933660638.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/hashedrekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2815767757/ossFuzzOverlayFile.json3523317526 -o FuzzHashedRekordDecodeEntryDirectMapAndRaw.a ./main.224114541.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/alpine_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/apk_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild984521315/ossFuzzOverlayFile.json4237829041 -o FuzzPackageUnmarshal.a ./main.666716260.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2649937598/ossFuzzOverlayFile.json2731909168 -o FuzzAlpineCreateProposedEntry.a ./main.3466581216.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3324651804/ossFuzzOverlayFile.json2839704608 -o FuzzAlpineUnmarshalAndCanonicalize.a ./main.3672125835.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/alpine/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild158841143/ossFuzzOverlayFile.json1739061662 -o FuzzAlpineDecodeEntryDirectMapAndRaw.a ./main.2813970142.go]
Step #3 - "compile-libfuzzer-address-x86_64": Could not find the function: func FuzzJarUnmarshal(f *testing.F)
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild222049132/ossFuzzOverlayFile.json2252535526 -o FuzzJarCreateProposedEntry.a ./main.3585564658.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2891466974/ossFuzzOverlayFile.json1328103810 -o FuzzJarUnmarshalAndCanonicalize.a ./main.1486126257.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2154662463/ossFuzzOverlayFile.json3644241341 -o FuzzJarDecodeEntryDirectMapAndRaw.a ./main.2644053635.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3464350925/ossFuzzOverlayFile.json3745847971 -o FuzzIntotoCreateProposedEntry_v001.a ./main.2399462814.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2283414671/ossFuzzOverlayFile.json3852845199 -o FuzzIntotoUnmarshalAndCanonicalize_v001.a ./main.235354658.go]
Step #3 - "compile-libfuzzer-address-x86_64": panic: Could not find the fuzz func
Step #3 - "compile-libfuzzer-address-x86_64": 
Step #3 - "compile-libfuzzer-address-x86_64": goroutine 1 [running]:
Step #3 - "compile-libfuzzer-address-x86_64": main.main()
Step #3 - "compile-libfuzzer-address-x86_64": 	/tmp/go-118-fuzz-build/main.go:142 +0x1425
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild570476550/ossFuzzOverlayFile.json1418263395 -o FuzzIntotoCreateProposedEntry_v002.a ./main.4023726567.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2502478057/ossFuzzOverlayFile.json906740308 -o FuzzIntotoUnmarshalAndCanonicalize_v002.a ./main.2761619362.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/intoto/v0.0.2/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild615679032/ossFuzzOverlayFile.json260938320 -o FuzzIntotoDecodeEntryDirectMapAndRaw.a ./main.2408846097.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild259184004/ossFuzzOverlayFile.json2075592215 -o FuzzTufCreateProposedEntry.a ./main.269968753.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild456699680/ossFuzzOverlayFile.json3411512966 -o FuzzTufUnmarshalAndCanonicalize.a ./main.3368498649.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/tuf/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1765760293/ossFuzzOverlayFile.json1461846563 -o FuzzTufDecodeEntryDirectMapAndRaw.a ./main.2022772376.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3329373138/ossFuzzOverlayFile.json3874151922 -o FuzzRfc3161CreateProposedEntry.a ./main.3667089517.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1140315693/ossFuzzOverlayFile.json425436411 -o FuzzRfc3161UnmarshalAndCanonicalize.a ./main.3033470373.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rfc3161/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild4118584383/ossFuzzOverlayFile.json3376163096 -o FuzzRfc3161DecodeEntryDirectMapAndRaw.a ./main.1032530719.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1818155709/ossFuzzOverlayFile.json2534527680 -o FuzzRpmCreateProposedEntry.a ./main.1569296930.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3325001570/ossFuzzOverlayFile.json2900127266 -o FuzzRpmUnmarshalAndCanonicalize.a ./main.2551725429.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rpm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2863979640/ossFuzzOverlayFile.json230501635 -o FuzzRpmDecodeEntryDirectMapAndRaw.a ./main.2342133783.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild409431010/ossFuzzOverlayFile.json2627257730 -o FuzzHelmCreateProposedEntry.a ./main.2709118844.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild949069557/ossFuzzOverlayFile.json2412485527 -o FuzzHelmUnmarshalAndCanonicalize.a ./main.3242983726.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild3166637079/ossFuzzOverlayFile.json3722452836 -o FuzzHelmProvenanceUnmarshal.a ./main.187408240.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/helm/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild729849826/ossFuzzOverlayFile.json1192878508 -o FuzzHelmDecodeEntryDirectMapAndRaw.a ./main.3994424587.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1248214895/ossFuzzOverlayFile.json2127474396 -o FuzzRekordCreateProposedEntry.a ./main.2145219305.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild605755083/ossFuzzOverlayFile.json464219774 -o FuzzRekordUnmarshalAndCanonicalize.a ./main.1615699774.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/rekord/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild906349863/ossFuzzOverlayFile.json4175132752 -o FuzzRekordDecodeEntryDirectMapAndRaw.a ./main.3108575947.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild1706261556/ossFuzzOverlayFile.json199855668 -o FuzzDSSECreateProposedEntry.a ./main.1890738420.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild413611225/ossFuzzOverlayFile.json2301930341 -o FuzzDSSEUnmarshalAndCanonicalize.a ./main.804718503.go]
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/e2e_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/dsse/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2636046999/ossFuzzOverlayFile.json164204688 -o FuzzDSSEDecodeEntryDirectMapAndRaw.a ./main.3147059675.go]
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/ProtonMail/go-crypto v1.0.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/cloudflare/circl v1.3.8
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading software.sslmate.com/src/go-pkcs12 v0.5.0
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/s3 v1.71.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/zalando/go-keyring v0.2.6
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading al.essio.dev/pkg/shellescape v1.5.1
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/danieljoos/wincred v1.2.2
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.7
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/aws/aws-sdk-go-v2/internal/v4a v1.3.26
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/zipslicer
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/pkcs7
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/certloader
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/config
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/x509tools
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/signers/sigerrors
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/pkcs9
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/passprompt
Step #3 - "compile-libfuzzer-address-x86_64": go: finding module for package github.com/sassoftware/relic/v8/lib/binpatch
Step #3 - "compile-libfuzzer-address-x86_64": go: downloading github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/binpatch in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/x509tools in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/signers/sigerrors in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/passprompt in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/pkcs7 in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/pkcs9 in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/config in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/certloader in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": go: found github.com/sassoftware/relic/v8/lib/zipslicer in github.com/sassoftware/relic/v8 v8.2.0
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/benchmark_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/entry_test.go
Step #3 - "compile-libfuzzer-address-x86_64": renaming _test.go file in fuzzer dir:  /src/rekor/pkg/types/jar/v0.0.1/fuzz_test.go
Step #3 - "compile-libfuzzer-address-x86_64": Running go  [build -buildmode c-archive -tags gofuzz_libfuzzer,libfuzzer,gofuzz -trimpath -gcflags all=-d=libfuzzer -gcflags syscall=-d=libfuzzer=0 -gcflags runtime/cgo=-d=libfuzzer=0 -gcflags runtime/pprof=-d=libfuzzer=0 -overlay /tmp/gofuzzbuild2867043448/ossFuzzOverlayFile.json1073129693 -o FuzzJarutilsVerify.a ./main.3027428132.go]
Step #3 - "compile-libfuzzer-address-x86_64":   adding: src/rekor/tests/fuzz-testdata/seeds/alpine/FuzzPackageUnmarshal/FuzzPackageUnmarshal_seed1 (deflated 98%)
Finished Step #3 - "compile-libfuzzer-address-x86_64"
Starting Step #4 - "build-check-libfuzzer-address-x86_64"
Step #4 - "build-check-libfuzzer-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #4 - "build-check-libfuzzer-address-x86_64": Unable to find image 'gcr.io/oss-fuzz-base/base-runner:latest' locally
Step #4 - "build-check-libfuzzer-address-x86_64": latest: Pulling from oss-fuzz-base/base-runner
Step #4 - "build-check-libfuzzer-address-x86_64": b549f31133a9: Already exists
Step #4 - "build-check-libfuzzer-address-x86_64": 4cab2e9940c4: Already exists
Step #4 - "build-check-libfuzzer-address-x86_64": b2d6cb003f96: Already exists
Step #4 - "build-check-libfuzzer-address-x86_64": 4257557ce7a0: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": be3245a4a281: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 34b65fbcc5a0: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 5939142620ab: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 1f5d751699f9: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 6ec6ce971317: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": bc0b8a49c20a: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 76deb7a5dea3: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": eb58a5c57b61: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 25467b80b5de: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 08d50d7c8105: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": d339a9d8e776: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 941a302308b7: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 5468c806efe7: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 1f5d751699f9: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": d8c06c98aa11: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": f77d6138a834: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 6ec6ce971317: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": f3800746dbdc: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": ed84ee51dcf3: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": bc0b8a49c20a: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 458cf9be26a0: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 8eb37fd8cc5b: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": d796cbbf759e: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": a2b4aac872f7: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 2a16bf25e3f8: Pulling fs layer
Step #4 - "build-check-libfuzzer-address-x86_64": 76deb7a5dea3: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": f77d6138a834: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": eb58a5c57b61: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": d796cbbf759e: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": f3800746dbdc: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": a2b4aac872f7: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 25467b80b5de: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 08d50d7c8105: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 5939142620ab: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": ed84ee51dcf3: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": d339a9d8e776: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 941a302308b7: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 2a16bf25e3f8: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": d8c06c98aa11: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 458cf9be26a0: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 8eb37fd8cc5b: Waiting
Step #4 - "build-check-libfuzzer-address-x86_64": 34b65fbcc5a0: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 4257557ce7a0: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 4257557ce7a0: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": be3245a4a281: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": be3245a4a281: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 1f5d751699f9: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 1f5d751699f9: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 4257557ce7a0: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 5939142620ab: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 5939142620ab: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": bc0b8a49c20a: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": bc0b8a49c20a: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 76deb7a5dea3: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 76deb7a5dea3: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": eb58a5c57b61: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": eb58a5c57b61: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": be3245a4a281: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 34b65fbcc5a0: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 08d50d7c8105: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 6ec6ce971317: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 6ec6ce971317: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": d339a9d8e776: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": d339a9d8e776: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 941a302308b7: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 941a302308b7: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 5939142620ab: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": d8c06c98aa11: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": d8c06c98aa11: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 1f5d751699f9: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 25467b80b5de: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": f3800746dbdc: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": f3800746dbdc: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": ed84ee51dcf3: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": ed84ee51dcf3: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 5468c806efe7: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 5468c806efe7: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 458cf9be26a0: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 458cf9be26a0: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": d796cbbf759e: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": d796cbbf759e: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": f77d6138a834: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": f77d6138a834: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": a2b4aac872f7: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 2a16bf25e3f8: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 2a16bf25e3f8: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 8eb37fd8cc5b: Verifying Checksum
Step #4 - "build-check-libfuzzer-address-x86_64": 8eb37fd8cc5b: Download complete
Step #4 - "build-check-libfuzzer-address-x86_64": 6ec6ce971317: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": bc0b8a49c20a: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 76deb7a5dea3: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": eb58a5c57b61: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 25467b80b5de: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 08d50d7c8105: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": d339a9d8e776: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 941a302308b7: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 5468c806efe7: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": d8c06c98aa11: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": f77d6138a834: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": f3800746dbdc: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": ed84ee51dcf3: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 458cf9be26a0: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 8eb37fd8cc5b: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": d796cbbf759e: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": a2b4aac872f7: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": 2a16bf25e3f8: Pull complete
Step #4 - "build-check-libfuzzer-address-x86_64": Digest: sha256:008112e5c601944fb09ae78f0f6f2e273a40072e7ea314aaf50233822994df0d
Step #4 - "build-check-libfuzzer-address-x86_64": Status: Downloaded newer image for gcr.io/oss-fuzz-base/base-runner:latest
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzTreeID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRpmDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzTufCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHashedRekordUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRekordCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzJarUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHashedRekordDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzCoseUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzTufUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHelmProvenanceUnmarshal
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateUUID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHelmCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzKeys
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzCoseCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzIntotoUnmarshalAndCanonicalize_v001
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzCoseDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRpmUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateTreeID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRpmCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRekordUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzPadToTreeIDLen
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRfc3161CreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzDSSEDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRfc3161UnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRekordDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzJarDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzJarCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHelmUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzNewFile
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzRfc3161DecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzJarutilsVerify
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzAlpineUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzIntotoDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzAlpineDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzAlpineCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateEntryID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzTufDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzDSSECreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHashedRekordCreateProposedEntry
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzIntotoCreateProposedEntry_v001
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzIntotoUnmarshalAndCanonicalize_v002
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzDSSEUnmarshalAndCanonicalize
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzIntotoCreateProposedEntry_v002
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzPackageUnmarshal
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzHelmDecodeEntryDirectMapAndRaw
Step #4 - "build-check-libfuzzer-address-x86_64": Retrying failed fuzz targets sequentially 8
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzTreeID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateUUID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateTreeID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzValidateEntryID
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString
Step #4 - "build-check-libfuzzer-address-x86_64": Broken fuzz targets 8
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzTreeID', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzTreeID'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzTreeID seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzTreeID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183872 inline 8-bit counters): 183872 [0x55dddf5344e0, 0x55dddf561320), \nINFO: Loaded 1 PC tables (183872 PCs): 183872 [0x10c000100000,0x10c0003ce400), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55dddc850853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.3149165887.go:48 +0x1d8\npanic({0x55ddddfa1b00?, 0x55dddeab2fd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0009a4010, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0009a4010, {0x10c000867da0, 0x2d})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0009a4010, {0x55ddddb351dd?, 0x55dddc798b12?}, {0x10c0009ab3f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzTreeID.FuzzTreeID.func1(0x10c0009a4000, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:61 +0xfd\nreflect.Value.call({0x55ddddf3d200?, 0x55ddde1831e0?, 0x2?}, {0x55ddddb143e0, 0x4}, {0x10c00092dc50, 0x2, 0x55dddc7a4def?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x55ddddf3d200?, 0x55ddde1831e0?, 0x55ddddf20580?}, {0x10c00092dc50, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x55ddddf3d200, 0x55ddde1831e0}, {0x55ddde16b020?, 0x10c0009a4000?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x55ddddf3d200, 0x55ddde1831e0})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzTreeID(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:59\nmain.LibFuzzerFuzzTreeID({0x7b72fa3e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.3149165887.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x55dddc6a4c01?)\n\t./main.3149165887.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2266==ERROR: AddressSanitizer: ABRT on unknown address 0x0000000008da (pc 0x55dddc6a88a1 bp 0x10c0009aaf08 sp 0x10c0009aaef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x55dddc6a88a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2266==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055dddc6a88a1  rdx = 0x0000000000000006  \nrdi = 0x00000000000008da  rsi = 0x00000000000008da  rbp = 0x000010c0009aaf08  rsp = 0x000010c0009aaef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x00000000000008da  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2266==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzTreeID seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzTreeID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183872 inline 8-bit counters): 183872 [0x5572afdde4e0, 0x5572afe0b320), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183872 PCs): 183872 [0x10c000100000,0x10c0003ce400), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x5572ad0fa853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3149165887.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x5572ae84bb00?, 0x5572af35cfd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c0008eeb50, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c0008eeb50, {0x10c00083dce0, 0x2d})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c0008eeb50, {0x5572ae3df1dd?, 0x5572ad042b12?}, {0x10c0009213f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzTreeID.FuzzTreeID.func1(0x10c0008eeb40, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:61 +0xfd
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x5572ae7e7200?, 0x5572aea2d1e0?, 0x2?}, {0x5572ae3be3e0, 0x4}, {0x10c0008a7f20, 0x2, 0x5572ad04edef?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x5572ae7e7200?, 0x5572aea2d1e0?, 0x5572ae7ca580?}, {0x10c0008a7f20, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x5572ae7e7200, 0x5572aea2d1e0}, {0x5572aea15020?, 0x10c0008eeb40?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x5572ae7e7200, 0x5572aea2d1e0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzTreeID(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:59
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzTreeID({0x7b6c9bae1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3149165887.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x5572acf4ec01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3149165887.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==2850==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000b22 (pc 0x5572acf528a1 bp 0x10c000920f08 sp 0x10c000920ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x5572acf528a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2850==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005572acf528a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000b22  rsi = 0x0000000000000b22  rbp = 0x000010c000920f08  rsp = 0x000010c000920ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000b22  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2850==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzValidateUUID', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzValidateUUID'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateUUID seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzValidateUUID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183846 inline 8-bit counters): 183846 [0x55bd0f9c34e0, 0x55bd0f9f0306), \nINFO: Loaded 1 PC tables (183846 PCs): 183846 [0x10c000100000,0x10c0003ce260), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55bd0cce0853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.799116946.go:48 +0x1d8\npanic({0x55bd0e430ee0?, 0x55bd0ef41fd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c000902f10, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c000902f10, {0x10c00091e420, 0x2d})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c000902f10, {0x55bd0dfc51c6?, 0x55bd0cc28b12?}, {0x10c0009353f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzValidateUUID.FuzzValidateUUID.func1(0x10c000902f00, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:69 +0xfd\nreflect.Value.call({0x55bd0e3cc5e0?, 0x55bd0e6125c0?, 0x2?}, {0x55bd0dfa43e0, 0x4}, {0x10c00090ae70, 0x2, 0x55bd0cc34def?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x55bd0e3cc5e0?, 0x55bd0e6125c0?, 0x55bd0e3af960?}, {0x10c00090ae70, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x55bd0e3cc5e0, 0x55bd0e6125c0}, {0x55bd0e5fa400?, 0x10c000902f00?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x55bd0e3cc5e0, 0x55bd0e6125c0})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzValidateUUID(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:67\nmain.LibFuzzerFuzzValidateUUID({0x7baab12e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.799116946.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x55bd0cb34c01?)\n\t./main.799116946.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2313==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000909 (pc 0x55bd0cb388a1 bp 0x10c000934f08 sp 0x10c000934ef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x55bd0cb388a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2313==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055bd0cb388a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000909  rsi = 0x0000000000000909  rbp = 0x000010c000934f08  rsp = 0x000010c000934ef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000909  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2313==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateUUID seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzValidateUUID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183846 inline 8-bit counters): 183846 [0x55b02a5b14e0, 0x55b02a5de306), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183846 PCs): 183846 [0x10c000100000,0x10c0003ce260), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55b0278ce853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.799116946.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x55b02901eee0?, 0x55b029b2ffd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c000986010, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c000986010, {0x10c000996090, 0x2d})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c000986010, {0x55b028bb31c6?, 0x55b027816b12?}, {0x10c0009913f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateUUID.FuzzValidateUUID.func1(0x10c000986000, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:69 +0xfd
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x55b028fba5e0?, 0x55b0292005c0?, 0x2?}, {0x55b028b923e0, 0x4}, {0x10c000988000, 0x2, 0x55b027822def?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x55b028fba5e0?, 0x55b0292005c0?, 0x55b028f9d960?}, {0x10c000988000, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x55b028fba5e0, 0x55b0292005c0}, {0x55b0291e8400?, 0x10c000986000?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x55b028fba5e0, 0x55b0292005c0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzValidateUUID(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:67
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateUUID({0x7b36de5e1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.799116946.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x55b027722c01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.799116946.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==2905==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000b59 (pc 0x55b0277268a1 bp 0x10c000990f08 sp 0x10c000990ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x55b0277268a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2905==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055b0277268a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000b59  rsi = 0x0000000000000b59  rbp = 0x000010c000990f08  rsp = 0x000010c000990ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000b59  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2905==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183874 inline 8-bit counters): 183874 [0x55d19cacf4e0, 0x55d19cafc322), \nINFO: Loaded 1 PC tables (183874 PCs): 183874 [0x10c000100000,0x10c0003ce420), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55d199deb853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.2151115801.go:48 +0x1d8\npanic({0x55d19b53ca80?, 0x55d19c04dfd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0009a6010, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0009a6010, {0x10c00091b780, 0x36})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0009a6010, {0x55d19b0edd57?, 0x0?}, {0x10c0009ad3c0?, 0x0?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzCreateEntryIDFromParts.FuzzCreateEntryIDFromParts.func1(0x10c0009a6000, {0x0, 0x0}, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:21 +0x15c\nreflect.Value.call({0x55d19b505880?, 0x55d19b71e160?, 0x3?}, {0x55d19b0af3e0, 0x4}, {0x10c00050afa0, 0x3, 0x55d199d3fdef?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x55d19b505880?, 0x55d19b71e160?, 0x55d19b4bb500?}, {0x10c00050afa0, 0x3, 0x3})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x55d19b505880, 0x55d19b71e160}, {0x55d19b705fa0?, 0x10c0009a6000?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x55d19b505880, 0x55d19b71e160})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzCreateEntryIDFromParts(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:19\nmain.LibFuzzerFuzzCreateEntryIDFromParts({0x7b88d54e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.2151115801.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x55d199c3fc01?)\n\t./main.2151115801.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2413==ERROR: AddressSanitizer: ABRT on unknown address 0x00000000096d (pc 0x55d199c438a1 bp 0x10c0009aced8 sp 0x10c0009acec0 T0)\nSCARINESS: 10 (signal)\n    #0 0x55d199c438a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2413==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055d199c438a1  rdx = 0x0000000000000006  \nrdi = 0x000000000000096d  rsi = 0x000000000000096d  rbp = 0x000010c0009aced8  rsp = 0x000010c0009acec0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x000000000000096d  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2413==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzCreateEntryIDFromParts -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183874 inline 8-bit counters): 183874 [0x55d694e364e0, 0x55d694e63322), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183874 PCs): 183874 [0x10c000100000,0x10c0003ce420), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55d692152853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2151115801.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x55d6938a3a80?, 0x55d6943b4fd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c0008ae010, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c0008ae010, {0x10c0007fdc40, 0x36})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c0008ae010, {0x55d693454d57?, 0x0?}, {0x10c0008b53c0?, 0x0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzCreateEntryIDFromParts.FuzzCreateEntryIDFromParts.func1(0x10c0008ae000, {0x0, 0x0}, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:21 +0x15c
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x55d69386c880?, 0x55d693a85160?, 0x3?}, {0x55d6934163e0, 0x4}, {0x10c00098b360, 0x3, 0x55d6920a6def?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x55d69386c880?, 0x55d693a85160?, 0x55d693822500?}, {0x10c00098b360, 0x3, 0x3})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x55d69386c880, 0x55d693a85160}, {0x55d693a6cfa0?, 0x10c0008ae000?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x55d69386c880, 0x55d693a85160})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzCreateEntryIDFromParts(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:19
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzCreateEntryIDFromParts({0x7bca72fe1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2151115801.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x55d691fa6c01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2151115801.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==2960==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000b90 (pc 0x55d691faa8a1 bp 0x10c0008b4ed8 sp 0x10c0008b4ec0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x55d691faa8a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2960==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055d691faa8a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000b90  rsi = 0x0000000000000b90  rbp = 0x000010c0008b4ed8  rsp = 0x000010c0008b4ec0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000b90  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0x00000000000001f8  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==2960==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzValidateTreeID', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzValidateTreeID'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateTreeID seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzValidateTreeID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183848 inline 8-bit counters): 183848 [0x564446f604e0, 0x564446f8d308), \nINFO: Loaded 1 PC tables (183848 PCs): 183848 [0x10c000100000,0x10c0003ce280), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x56444427d853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.4204327422.go:48 +0x1d8\npanic({0x5644459cdea0?, 0x5644464defd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0008fe010, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0008fe010, {0x10c000875c40, 0x40})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0008fe010, {0x56444556620c?, 0x5644441c5b12?}, {0x10c00080d3f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzValidateTreeID.FuzzValidateTreeID.func1(0x10c0008fe000, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:77 +0xfd\nreflect.Value.call({0x5644459695a0?, 0x564445baf580?, 0x2?}, {0x5644455413e0, 0x4}, {0x10c00088fec0, 0x2, 0x5644441d1def?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x5644459695a0?, 0x564445baf580?, 0x56444594c920?}, {0x10c00088fec0, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x5644459695a0, 0x564445baf580}, {0x564445b973c0?, 0x10c0008fe000?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x5644459695a0, 0x564445baf580})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzValidateTreeID(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:75\nmain.LibFuzzerFuzzValidateTreeID({0x7b24262e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.4204327422.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x5644440d1c01?)\n\t./main.4204327422.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2368==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000940 (pc 0x5644440d58a1 bp 0x10c00080cf08 sp 0x10c00080cef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x5644440d58a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2368==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005644440d58a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000940  rsi = 0x0000000000000940  rbp = 0x000010c00080cf08  rsp = 0x000010c00080cef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000940  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2368==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateTreeID seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzValidateTreeID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183848 inline 8-bit counters): 183848 [0x561323b4c4e0, 0x561323b79308), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183848 PCs): 183848 [0x10c000100000,0x10c0003ce280), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x561320e69853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4204327422.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x5613225b9ea0?, 0x5613230cafd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c000942f10, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c000942f10, {0x10c0008f10c0, 0x40})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c000942f10, {0x56132215220c?, 0x561320db1b12?}, {0x10c0009713f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateTreeID.FuzzValidateTreeID.func1(0x10c000942f00, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:77 +0xfd
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x5613225555a0?, 0x56132279b580?, 0x2?}, {0x56132212d3e0, 0x4}, {0x10c0009332f0, 0x2, 0x561320dbddef?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x5613225555a0?, 0x56132279b580?, 0x561322538920?}, {0x10c0009332f0, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x5613225555a0, 0x56132279b580}, {0x5613227833c0?, 0x10c000942f00?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x5613225555a0, 0x56132279b580})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzValidateTreeID(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:75
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateTreeID({0x7c0f048e1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4204327422.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x561320cbdc01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4204327422.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==3017==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000bc9 (pc 0x561320cc18a1 bp 0x10c000970f08 sp 0x10c000970ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x561320cc18a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3017==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x0000561320cc18a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000bc9  rsi = 0x0000000000000bc9  rbp = 0x000010c000970f08  rsp = 0x000010c000970ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000bc9  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3017==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183867 inline 8-bit counters): 183867 [0x56137649b4e0, 0x5613764c831b), \nINFO: Loaded 1 PC tables (183867 PCs): 183867 [0x10c000100000,0x10c0003ce3b0), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x5613737b8853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.2987498223.go:48 +0x1d8\npanic({0x561374f08b80?, 0x561375a19fd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0008b2f10, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0008b2f10, {0x10c000849180, 0x31})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0008b2f10, {0x561374aa5314?, 0x561373700b12?}, {0x10c0008d93f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzGetTreeIDFromIDString.FuzzGetTreeIDFromIDString.func1(0x10c0008b2f00, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:37 +0xf6\nreflect.Value.call({0x561374ea4280?, 0x5613750ea260?, 0x2?}, {0x561374a7c3e0, 0x4}, {0x10c0008ba540, 0x2, 0x56137370cdef?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x561374ea4280?, 0x5613750ea260?, 0x561374e87600?}, {0x10c0008ba540, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x561374ea4280, 0x5613750ea260}, {0x5613750d20a0?, 0x10c0008b2f00?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x561374ea4280, 0x5613750ea260})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzGetTreeIDFromIDString(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:35\nmain.LibFuzzerFuzzGetTreeIDFromIDString({0x7be4279e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.2987498223.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x56137360cc01?)\n\t./main.2987498223.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2722==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000aa2 (pc 0x5613736108a1 bp 0x10c0008d8f08 sp 0x10c0008d8ef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x5613736108a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2722==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005613736108a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000aa2  rsi = 0x0000000000000aa2  rbp = 0x000010c0008d8f08  rsp = 0x000010c0008d8ef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000aa2  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2722==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzGetTreeIDFromIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183867 inline 8-bit counters): 183867 [0x5569594dc4e0, 0x55695950931b), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183867 PCs): 183867 [0x10c000100000,0x10c0003ce3b0), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x5569567f9853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2987498223.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x556957f49b80?, 0x556958a5afd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c00095f0f0, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c00095f0f0, {0x10c00090d240, 0x31})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c00095f0f0, {0x556957ae6314?, 0x556956741b12?}, {0x10c0009933f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzGetTreeIDFromIDString.FuzzGetTreeIDFromIDString.func1(0x10c00095f0e0, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:37 +0xf6
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x556957ee5280?, 0x55695812b260?, 0x2?}, {0x556957abd3e0, 0x4}, {0x10c0009314a0, 0x2, 0x55695674ddef?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x556957ee5280?, 0x55695812b260?, 0x556957ec8600?}, {0x10c0009314a0, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x556957ee5280, 0x55695812b260}, {0x5569581130a0?, 0x10c00095f0e0?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x556957ee5280, 0x55695812b260})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzGetTreeIDFromIDString(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:35
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzGetTreeIDFromIDString({0x7bd258ce1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2987498223.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x55695664dc01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.2987498223.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==3073==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000c01 (pc 0x5569566518a1 bp 0x10c000992f08 sp 0x10c000992ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x5569566518a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3073==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005569566518a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000c01  rsi = 0x0000000000000c01  rbp = 0x000010c000992f08  rsp = 0x000010c000992ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000c01  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3073==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzValidateEntryID', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzValidateEntryID'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateEntryID seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzValidateEntryID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183861 inline 8-bit counters): 183861 [0x5642b4c554e0, 0x5642b4c82315), \nINFO: Loaded 1 PC tables (183861 PCs): 183861 [0x10c000100000,0x10c0003ce350), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x5642b1f71853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.4083627638.go:48 +0x1d8\npanic({0x5642b36c2ca0?, 0x5642b41d3fd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0009b2970, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0009b2970, {0x10c000045d70, 0x30})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0009b2970, {0x5642b325be44?, 0x5642b1eb9b12?}, {0x10c0009e13f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzValidateEntryID.FuzzValidateEntryID.func1(0x10c0009b2960, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:85 +0xfd\nreflect.Value.call({0x5642b365e3a0?, 0x5642b38a4380?, 0x2?}, {0x5642b32353e0, 0x4}, {0x10c00095dc80, 0x2, 0x5642b1ec5def?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x5642b365e3a0?, 0x5642b38a4380?, 0x5642b3641720?}, {0x10c00095dc80, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x5642b365e3a0, 0x5642b38a4380}, {0x5642b388c1c0?, 0x10c0009b2960?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x5642b365e3a0, 0x5642b38a4380})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzValidateEntryID(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:83\nmain.LibFuzzerFuzzValidateEntryID({0x7c11a64e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.4083627638.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x5642b1dc5c01?)\n\t./main.4083627638.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2743==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000ab7 (pc 0x5642b1dc98a1 bp 0x10c0009e0f08 sp 0x10c0009e0ef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x5642b1dc98a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2743==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005642b1dc98a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000ab7  rsi = 0x0000000000000ab7  rbp = 0x000010c0009e0f08  rsp = 0x000010c0009e0ef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000ab7  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2743==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzValidateEntryID seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzValidateEntryID -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183861 inline 8-bit counters): 183861 [0x5607d3d704e0, 0x5607d3d9d315), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183861 PCs): 183861 [0x10c000100000,0x10c0003ce350), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x5607d108c853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4083627638.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x5607d27ddca0?, 0x5607d32eefd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c0009f0010, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c0009f0010, {0x10c000937800, 0x30})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c0009f0010, {0x5607d2376e44?, 0x5607d0fd4b12?}, {0x10c0009f73f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateEntryID.FuzzValidateEntryID.func1(0x10c0009f0000, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:85 +0xfd
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x5607d27793a0?, 0x5607d29bf380?, 0x2?}, {0x5607d23503e0, 0x4}, {0x10c000957a10, 0x2, 0x5607d0fe0def?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x5607d27793a0?, 0x5607d29bf380?, 0x5607d275c720?}, {0x10c000957a10, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x5607d27793a0, 0x5607d29bf380}, {0x5607d29a71c0?, 0x10c0009f0000?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x5607d27793a0, 0x5607d29bf380})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzValidateEntryID(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:83
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzValidateEntryID({0x7b68d56e1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4083627638.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x5607d0ee0c01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.4083627638.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==3131==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000c3b (pc 0x5607d0ee48a1 bp 0x10c0009f6f08 sp 0x10c0009f6ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x5607d0ee48a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3131==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x00005607d0ee48a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000c3b  rsi = 0x0000000000000c3b  rbp = 0x000010c0009f6f08  rsp = 0x000010c0009f6ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000c3b  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3131==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183871 inline 8-bit counters): 183871 [0x55f5af8b04e0, 0x55f5af8dd31f), \nINFO: Loaded 1 PC tables (183871 PCs): 183871 [0x10c000100000,0x10c0003ce3f0), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55f5acbcd853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.3791209064.go:48 +0x1d8\npanic({0x55f5ae31db80?, 0x55f5aee2efd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c000890970, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c000890970, {0x10c000045ec0, 0x2f})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c000890970, {0x55f5adeb6224?, 0x55f5acb15b12?}, {0x10c0008bd3f0?, 0x2?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzGetUUIDFromIDString.FuzzGetUUIDFromIDString.func1(0x10c000890960, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:29 +0xf6\nreflect.Value.call({0x55f5ae2b9280?, 0x55f5ae4ff260?, 0x2?}, {0x55f5ade913e0, 0x4}, {0x10c00083d9e0, 0x2, 0x55f5acb21def?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x55f5ae2b9280?, 0x55f5ae4ff260?, 0x55f5ae29c600?}, {0x10c00083d9e0, 0x2, 0x2})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x55f5ae2b9280, 0x55f5ae4ff260}, {0x55f5ae4e70a0?, 0x10c000890960?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x55f5ae2b9280, 0x55f5ae4ff260})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzGetUUIDFromIDString(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:27\nmain.LibFuzzerFuzzGetUUIDFromIDString({0x7bb07c2e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.3791209064.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x55f5aca21c01?)\n\t./main.3791209064.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2764==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000acc (pc 0x55f5aca258a1 bp 0x10c0008bcf08 sp 0x10c0008bcef0 T0)\nSCARINESS: 10 (signal)\n    #0 0x55f5aca258a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2764==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055f5aca258a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000acc  rsi = 0x0000000000000acc  rbp = 0x000010c0008bcf08  rsp = 0x000010c0008bcef0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000acc  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2764==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzGetUUIDFromIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183871 inline 8-bit counters): 183871 [0x559ed4ed24e0, 0x559ed4eff31f), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183871 PCs): 183871 [0x10c000100000,0x10c0003ce3f0), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x559ed21ef853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3791209064.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x559ed393fb80?, 0x559ed4450fd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c000800010, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c000800010, {0x10c0008f26c0, 0x2f})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c000800010, {0x559ed34d8224?, 0x559ed2137b12?}, {0x10c0008073f0?, 0x2?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzGetUUIDFromIDString.FuzzGetUUIDFromIDString.func1(0x10c000800000, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:29 +0xf6
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x559ed38db280?, 0x559ed3b21260?, 0x2?}, {0x559ed34b33e0, 0x4}, {0x10c0008a7980, 0x2, 0x559ed2143def?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x559ed38db280?, 0x559ed3b21260?, 0x559ed38be600?}, {0x10c0008a7980, 0x2, 0x2})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x559ed38db280, 0x559ed3b21260}, {0x559ed3b090a0?, 0x10c000800000?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x559ed38db280, 0x559ed3b21260})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzGetUUIDFromIDString(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:27
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzGetUUIDFromIDString({0x7b660bde1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3791209064.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x559ed2043c01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.3791209064.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==3187==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000c73 (pc 0x559ed20478a1 bp 0x10c000806f08 sp 0x10c000806ef0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x559ed20478a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3187==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x0000559ed20478a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000c73  rsi = 0x0000000000000c73  rbp = 0x000010c000806f08  rsp = 0x000010c000806ef0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000c73  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3187==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ('/tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString', CompletedProcess(args=['bad_build_check', '/tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString'], returncode=1, stdout=b"BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString seems to have either startup crash or exit:\nvm.mmap_rnd_bits = 28\n/tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null\nINFO: libFuzzer ignores flags that start with '--'\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1337\nINFO: Loaded 1 modules   (183874 inline 8-bit counters): 183874 [0x55f77ccad4e0, 0x55f77ccda322), \nINFO: Loaded 1 PC tables (183874 PCs): 183874 [0x10c000100000,0x10c0003ce420), \nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n\tpanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55f779fc9853]\n\ngoroutine 17 [running, locked to thread]:\nmain.catchPanics()\n\t./main.1858825803.go:48 +0x1d8\npanic({0x55f77b71aaa0?, 0x55f77c22bfd0?})\n\truntime/panic.go:783 +0x132\ntesting.(*common).callSite(0x10c0008e10f0, 0x3)\n\ttesting/testing.go:1076 +0x153\ntesting.(*common).log(0x10c0008e10f0, {0x10c0008672c0, 0x36})\n\ttesting/testing.go:1040 +0x1e5\ntesting.(*common).Skipf(0x10c0008e10f0, {0x55f77b2cbd57?, 0x0?}, {0x10c0008053c0?, 0x0?, 0x0?})\n\ttesting/testing.go:1251 +0x88\nmain.LibFuzzerFuzzReturnEntryIDString.FuzzReturnEntryIDString.func1(0x10c0008e10e0, {0x0, 0x0}, {0x0, 0x0})\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:53 +0x15c\nreflect.Value.call({0x55f77b6e38a0?, 0x55f77b8fc180?, 0x3?}, {0x55f77b28d3e0, 0x4}, {0x10c00091afa0, 0x3, 0x55f779f1ddef?})\n\treflect/value.go:581 +0x1ed1\nreflect.Value.Call({0x55f77b6e38a0?, 0x55f77b8fc180?, 0x55f77b699520?}, {0x10c00091afa0, 0x3, 0x3})\n\treflect/value.go:365 +0x18e\ntesting.(*Source).FillAndCall(0x10c0000cedd8, {0x55f77b6e38a0, 0x55f77b8fc180}, {0x55f77b8e3fc0?, 0x10c0008e10e0?, 0x58?})\n\ttesting/fuzz.go:212 +0xeaf\ntesting.(*F).Fuzz(0x10c0000cedb8, {0x55f77b6e38a0, 0x55f77b8fc180})\n\ttesting/fuzz.go:47 +0x1f5\ngithub.com/sigstore/rekor/pkg/sharding.FuzzReturnEntryIDString(...)\n\tgithub.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:51\nmain.LibFuzzerFuzzReturnEntryIDString({0x7bfb9e3e1090?, 0x10c0000028c0?, 0x0?})\n\t./main.1858825803.go:30 +0xdb\nmain.LLVMFuzzerTestOneInput(0x0?, 0x55f779e1dc01?)\n\t./main.1858825803.go:23 +0x6c\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==2792==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000ae8 (pc 0x55f779e218a1 bp 0x10c000804ed8 sp 0x10c000804ec0 T0)\nSCARINESS: 10 (signal)\n    #0 0x55f779e218a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154\n\nDEDUP_TOKEN: runtime.raise.abi0\n==2792==Register values:\nrax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055f779e218a1  rdx = 0x0000000000000006  \nrdi = 0x0000000000000ae8  rsi = 0x0000000000000ae8  rbp = 0x000010c000804ed8  rsp = 0x000010c000804ec0  \n r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  \nr12 = 0x0000000000000ae8  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0\n==2792==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n\n\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\nBase64: \n", stderr=b''))
Step #4 - "build-check-libfuzzer-address-x86_64": BAD BUILD: /tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString seems to have either startup crash or exit:
Step #4 - "build-check-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #4 - "build-check-libfuzzer-address-x86_64": /tmp/not-out/tmpwaixcutu/FuzzReturnEntryIDString -- -rss_limit_mb=2560 -timeout=25 -seed=1337 -runs=4 < /dev/null
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: libFuzzer ignores flags that start with '--'
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Running with entropic power schedule (0xFF, 100).
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Seed: 1337
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 modules   (183874 inline 8-bit counters): 183874 [0x55eb9a1684e0, 0x55eb9a195322), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: Loaded 1 PC tables (183874 PCs): 183874 [0x10c000100000,0x10c0003ce420), 
Step #4 - "build-check-libfuzzer-address-x86_64": INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
Step #4 - "build-check-libfuzzer-address-x86_64": panic: runtime error: invalid memory address or nil pointer dereference [recovered]
Step #4 - "build-check-libfuzzer-address-x86_64": 	panic: runtime error: invalid memory address or nil pointer dereference
Step #4 - "build-check-libfuzzer-address-x86_64": [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x55eb97484853]
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": goroutine 17 [running, locked to thread]:
Step #4 - "build-check-libfuzzer-address-x86_64": main.catchPanics()
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.1858825803.go:48 +0x1d8
Step #4 - "build-check-libfuzzer-address-x86_64": panic({0x55eb98bd5aa0?, 0x55eb996e6fd0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	runtime/panic.go:783 +0x132
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).callSite(0x10c000932010, 0x3)
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1076 +0x153
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).log(0x10c000932010, {0x10c000893a40, 0x36})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1040 +0x1e5
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*common).Skipf(0x10c000932010, {0x55eb98786d57?, 0x0?}, {0x10c0009393c0?, 0x0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/testing.go:1251 +0x88
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzReturnEntryIDString.FuzzReturnEntryIDString.func1(0x10c000932000, {0x0, 0x0}, {0x0, 0x0})
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:53 +0x15c
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.call({0x55eb98b9e8a0?, 0x55eb98db7180?, 0x3?}, {0x55eb987483e0, 0x4}, {0x10c000609220, 0x3, 0x55eb973d8def?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:581 +0x1ed1
Step #4 - "build-check-libfuzzer-address-x86_64": reflect.Value.Call({0x55eb98b9e8a0?, 0x55eb98db7180?, 0x55eb98b54520?}, {0x10c000609220, 0x3, 0x3})
Step #4 - "build-check-libfuzzer-address-x86_64": 	reflect/value.go:365 +0x18e
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*Source).FillAndCall(0x10c0000cedd8, {0x55eb98b9e8a0, 0x55eb98db7180}, {0x55eb98d9efc0?, 0x10c000932000?, 0x58?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:212 +0xeaf
Step #4 - "build-check-libfuzzer-address-x86_64": testing.(*F).Fuzz(0x10c0000cedb8, {0x55eb98b9e8a0, 0x55eb98db7180})
Step #4 - "build-check-libfuzzer-address-x86_64": 	testing/fuzz.go:47 +0x1f5
Step #4 - "build-check-libfuzzer-address-x86_64": github.com/sigstore/rekor/pkg/sharding.FuzzReturnEntryIDString(...)
Step #4 - "build-check-libfuzzer-address-x86_64": 	github.com/sigstore/rekor/pkg/sharding/shard_fuzz_libFuzzer.go:51
Step #4 - "build-check-libfuzzer-address-x86_64": main.LibFuzzerFuzzReturnEntryIDString({0x7bd6b54e1090?, 0x10c0000028c0?, 0x0?})
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.1858825803.go:30 +0xdb
Step #4 - "build-check-libfuzzer-address-x86_64": main.LLVMFuzzerTestOneInput(0x0?, 0x55eb972d8c01?)
Step #4 - "build-check-libfuzzer-address-x86_64": 	./main.1858825803.go:23 +0x6c
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer:DEADLYSIGNAL
Step #4 - "build-check-libfuzzer-address-x86_64": =================================================================
Step #4 - "build-check-libfuzzer-address-x86_64": ==3245==ERROR: AddressSanitizer: ABRT on unknown address 0x000000000cad (pc 0x55eb972dc8a1 bp 0x10c000938ed8 sp 0x10c000938ec0 T0)
Step #4 - "build-check-libfuzzer-address-x86_64": SCARINESS: 10 (signal)
Step #4 - "build-check-libfuzzer-address-x86_64":     #0 0x55eb972dc8a1 in runtime.raise.abi0 runtime/sys_linux_amd64.s:154
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": DEDUP_TOKEN: runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3245==Register values:
Step #4 - "build-check-libfuzzer-address-x86_64": rax = 0x0000000000000000  rbx = 0x0000000000000000  rcx = 0x000055eb972dc8a1  rdx = 0x0000000000000006  
Step #4 - "build-check-libfuzzer-address-x86_64": rdi = 0x0000000000000cad  rsi = 0x0000000000000cad  rbp = 0x000010c000938ed8  rsp = 0x000010c000938ec0  
Step #4 - "build-check-libfuzzer-address-x86_64":  r8 = 0x0000000000000001   r9 = 0x0000000000000000  r10 = 0x0000000000000008  r11 = 0x0000000000000246  
Step #4 - "build-check-libfuzzer-address-x86_64": r12 = 0x0000000000000cad  r13 = 0x000000000000069c  r14 = 0x000010c0000028c0  r15 = 0xffffffffffffffff  
Step #4 - "build-check-libfuzzer-address-x86_64": AddressSanitizer can not provide additional info.
Step #4 - "build-check-libfuzzer-address-x86_64": SUMMARY: AddressSanitizer: ABRT runtime/sys_linux_amd64.s:154 in runtime.raise.abi0
Step #4 - "build-check-libfuzzer-address-x86_64": ==3245==ABORTING
Step #4 - "build-check-libfuzzer-address-x86_64": MS: 0 ; base unit: 0000000000000000000000000000000000000000
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": artifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709
Step #4 - "build-check-libfuzzer-address-x86_64": Base64: 
Step #4 - "build-check-libfuzzer-address-x86_64": 
Step #4 - "build-check-libfuzzer-address-x86_64": ERROR: 16.3265306122449% of fuzz targets seem to be broken. See the list above for a detailed information.
Step #4 - "build-check-libfuzzer-address-x86_64": ********************************************************************************\nBuild checks failed.\nTo reproduce, run:\npython infra/helper.py build_image rekor\npython infra/helper.py build_fuzzers --sanitizer address --engine libfuzzer --architecture x86_64 rekor\npython infra/helper.py check_build --sanitizer address --engine libfuzzer --architecture x86_64 rekor\n********************************************************************************
Finished Step #4 - "build-check-libfuzzer-address-x86_64"
ERROR
ERROR: build step 4 "gcr.io/cloud-builders/docker" failed: step exited with non-zero status: 1
