starting build "870bcdf1-3b40-479d-925c-08e478e0d98c"

FETCHSOURCE
BUILD
Starting Step #0
Step #0: Already have image (with digest): gcr.io/cloud-builders/git
Step #0: Cloning into 'oss-fuzz'...
Finished Step #0
Starting Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792"
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Already have image (with digest): gcr.io/cloud-builders/docker
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Sending build context to Docker daemon  6.656kB
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 1/7 : FROM gcr.io/oss-fuzz-base/base-builder
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": latest: Pulling from oss-fuzz-base/base-builder
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b549f31133a9: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69cdc9bbccd0: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a32b6e48f4c7: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": c3e2bc750ea1: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 28372dbc8f06: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": e563fd9c2d37: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69388cb741ef: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 13d2048e4df1: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 364ebfcb144e: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": cdcc7bf430db: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6746a265225f: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 45e776238293: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 3067ce944a9b: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f601e4605a09: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 93e019ba9ba7: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fcdd7d4a759a: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": ac239bcaa595: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 290ecd4ea936: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 128c68b28b35: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 849a101ae94e: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a0ba6d671d9e: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 861a2128096c: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 82bbe39d2b44: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 911aa71648ac: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": c3e2bc750ea1: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 556991dd5aaf: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 50d0dccc3ba3: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 8748c57b9943: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 28372dbc8f06: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fecb04bfdcc7: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": dd0d5b577fc3: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 283be2a0c854: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 7003e8096c4b: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 84c7d5a8127f: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 364ebfcb144e: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": d539ad606648: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6a6b268c85b6: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": cdcc7bf430db: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f6daef841488: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6f6ad0e37664: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 0d1d185a562b: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a0ba6d671d9e: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": e563fd9c2d37: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b49c3468f5d9: Pulling fs layer
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69388cb741ef: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 911aa71648ac: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 13d2048e4df1: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 556991dd5aaf: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 290ecd4ea936: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 50d0dccc3ba3: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 93e019ba9ba7: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fcdd7d4a759a: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 8748c57b9943: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 861a2128096c: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": ac239bcaa595: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 128c68b28b35: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 82bbe39d2b44: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 849a101ae94e: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fecb04bfdcc7: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6746a265225f: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": dd0d5b577fc3: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 283be2a0c854: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6a6b268c85b6: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 0d1d185a562b: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f6daef841488: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 45e776238293: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b49c3468f5d9: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6f6ad0e37664: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 3067ce944a9b: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f601e4605a09: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 7003e8096c4b: Waiting
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a32b6e48f4c7: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a32b6e48f4c7: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b549f31133a9: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b549f31133a9: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 28372dbc8f06: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 28372dbc8f06: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": c3e2bc750ea1: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": c3e2bc750ea1: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69cdc9bbccd0: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69cdc9bbccd0: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69388cb741ef: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 13d2048e4df1: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 13d2048e4df1: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b549f31133a9: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": cdcc7bf430db: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": cdcc7bf430db: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6746a265225f: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6746a265225f: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 45e776238293: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 45e776238293: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 3067ce944a9b: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 3067ce944a9b: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 364ebfcb144e: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 364ebfcb144e: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f601e4605a09: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f601e4605a09: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 93e019ba9ba7: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 93e019ba9ba7: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fcdd7d4a759a: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fcdd7d4a759a: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": ac239bcaa595: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": ac239bcaa595: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 290ecd4ea936: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 290ecd4ea936: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 849a101ae94e: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 849a101ae94e: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 128c68b28b35: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a0ba6d671d9e: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a0ba6d671d9e: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 861a2128096c: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 861a2128096c: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 82bbe39d2b44: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 82bbe39d2b44: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 911aa71648ac: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 556991dd5aaf: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 556991dd5aaf: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 50d0dccc3ba3: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 8748c57b9943: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69cdc9bbccd0: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fecb04bfdcc7: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fecb04bfdcc7: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a32b6e48f4c7: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": e563fd9c2d37: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": e563fd9c2d37: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": dd0d5b577fc3: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": dd0d5b577fc3: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 283be2a0c854: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 283be2a0c854: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 7003e8096c4b: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 7003e8096c4b: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 84c7d5a8127f: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 84c7d5a8127f: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": d539ad606648: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f6daef841488: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f6daef841488: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6a6b268c85b6: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6a6b268c85b6: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6f6ad0e37664: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b49c3468f5d9: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b49c3468f5d9: Download complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 0d1d185a562b: Verifying Checksum
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": c3e2bc750ea1: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 28372dbc8f06: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": e563fd9c2d37: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 69388cb741ef: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 13d2048e4df1: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 364ebfcb144e: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": cdcc7bf430db: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6746a265225f: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 45e776238293: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 3067ce944a9b: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f601e4605a09: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 93e019ba9ba7: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fcdd7d4a759a: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": ac239bcaa595: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 290ecd4ea936: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 128c68b28b35: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 849a101ae94e: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": a0ba6d671d9e: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 861a2128096c: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 82bbe39d2b44: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 911aa71648ac: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 556991dd5aaf: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 50d0dccc3ba3: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 8748c57b9943: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": fecb04bfdcc7: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": dd0d5b577fc3: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 283be2a0c854: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 7003e8096c4b: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 84c7d5a8127f: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": d539ad606648: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6a6b268c85b6: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": f6daef841488: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 6f6ad0e37664: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 0d1d185a562b: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": b49c3468f5d9: Pull complete
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Digest: sha256:3f5877c3af4e971e79b6b0530aebaaabc262c3a7a2f858cf0ca33a2f34d5711b
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Status: Downloaded newer image for gcr.io/oss-fuzz-base/base-builder:latest
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> e739e934324c
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 2/7 : RUN apt-get update && apt-get install -y make autoconf automake libtool bsdmainutils pkg-config libwebsockets-dev
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> Running in 8cd34a62ab4d
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Hit:1 http://security.ubuntu.com/ubuntu focal-security InRelease
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:3 http://archive.ubuntu.com/ubuntu focal-updates InRelease [128 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Hit:4 http://archive.ubuntu.com/ubuntu focal-backports InRelease
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Fetched 128 kB in 1s (126 kB/s)
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Reading package lists...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Reading package lists...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Building dependency tree...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Reading state information...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": make is already the newest version (4.2.1-1.2).
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": make set to manually installed.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": The following additional packages will be installed:
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   file libcap-dev libcap2 libev-dev libev4 libglib2.0-0 libglib2.0-data
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   libicu66 libltdl-dev libltdl7 libmagic-mgc libmagic1 libuv1 libuv1-dev
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   libwebsockets15 libxml2 shared-mime-info xdg-user-dirs zlib1g-dev
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Suggested packages:
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   autoconf-archive gnu-standards autoconf-doc gettext wamerican | wordlist
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   whois vacation libtool-doc gfortran | fortran95-compiler gcj-jdk
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": The following NEW packages will be installed:
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   autoconf automake bsdmainutils file libcap-dev libcap2 libev-dev libev4
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   libglib2.0-0 libglib2.0-data libicu66 libltdl-dev libltdl7 libmagic-mgc
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   libmagic1 libtool libuv1 libuv1-dev libwebsockets-dev libwebsockets15
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":   libxml2 pkg-config shared-mime-info xdg-user-dirs zlib1g-dev
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": 0 upgraded, 25 newly installed, 0 to remove and 0 not upgraded.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Need to get 13.7 MB of archives.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": After this operation, 59.9 MB of additional disk space will be used.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libmagic-mgc amd64 1:5.38-4 [218 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 libmagic1 amd64 1:5.38-4 [75.9 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:3 http://archive.ubuntu.com/ubuntu focal/main amd64 file amd64 1:5.38-4 [23.3 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:4 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libcap2 amd64 1:2.32-1ubuntu0.2 [15.7 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:5 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libglib2.0-0 amd64 2.64.6-1~ubuntu20.04.9 [1290 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:6 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libglib2.0-data all 2.64.6-1~ubuntu20.04.9 [5836 B]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:7 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libicu66 amd64 66.1-2ubuntu2.1 [8515 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:8 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libxml2 amd64 2.9.10+dfsg-5ubuntu0.20.04.10 [640 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:9 http://archive.ubuntu.com/ubuntu focal/main amd64 shared-mime-info amd64 1.15-1 [430 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:10 http://archive.ubuntu.com/ubuntu focal/main amd64 xdg-user-dirs amd64 0.17-2ubuntu1 [48.3 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:11 http://archive.ubuntu.com/ubuntu focal/main amd64 bsdmainutils amd64 11.1.2ubuntu3 [181 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:12 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libuv1 amd64 1.34.2-1ubuntu1.5 [80.9 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:13 http://archive.ubuntu.com/ubuntu focal/main amd64 autoconf all 2.69-11.1 [321 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:14 http://archive.ubuntu.com/ubuntu focal/main amd64 automake all 1:1.16.1-4ubuntu6 [522 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:15 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libcap-dev amd64 1:2.32-1ubuntu0.2 [33.2 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:16 http://archive.ubuntu.com/ubuntu focal/main amd64 libltdl7 amd64 2.4.6-14 [38.5 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:17 http://archive.ubuntu.com/ubuntu focal/main amd64 libltdl-dev amd64 2.4.6-14 [162 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:18 http://archive.ubuntu.com/ubuntu focal/main amd64 libtool all 2.4.6-14 [161 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:19 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libuv1-dev amd64 1.34.2-1ubuntu1.5 [103 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:20 http://archive.ubuntu.com/ubuntu focal/universe amd64 libev4 amd64 1:4.31-1 [31.2 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:21 http://archive.ubuntu.com/ubuntu focal/universe amd64 libwebsockets15 amd64 3.2.1-3 [152 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:22 http://archive.ubuntu.com/ubuntu focal/universe amd64 libev-dev amd64 1:4.31-1 [124 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:23 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2ubuntu1.5 [155 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:24 http://archive.ubuntu.com/ubuntu focal/universe amd64 libwebsockets-dev amd64 3.2.1-3 [365 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Get:25 http://archive.ubuntu.com/ubuntu focal/main amd64 pkg-config amd64 0.29.1-0ubuntu4 [45.5 kB]
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [91mdebconf: delaying package configuration, since apt-utils is not installed
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [0mFetched 13.7 MB in 2s (7933 kB/s)
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libmagic-mgc.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": (Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 17483 files and directories currently installed.)
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../00-libmagic-mgc_1%3a5.38-4_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libmagic-mgc (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libmagic1:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../01-libmagic1_1%3a5.38-4_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libmagic1:amd64 (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package file.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../02-file_1%3a5.38-4_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking file (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libcap2:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../03-libcap2_1%3a2.32-1ubuntu0.2_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libcap2:amd64 (1:2.32-1ubuntu0.2) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libglib2.0-0:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../04-libglib2.0-0_2.64.6-1~ubuntu20.04.9_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libglib2.0-0:amd64 (2.64.6-1~ubuntu20.04.9) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libglib2.0-data.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../05-libglib2.0-data_2.64.6-1~ubuntu20.04.9_all.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libglib2.0-data (2.64.6-1~ubuntu20.04.9) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libicu66:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../06-libicu66_66.1-2ubuntu2.1_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libicu66:amd64 (66.1-2ubuntu2.1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libxml2:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../07-libxml2_2.9.10+dfsg-5ubuntu0.20.04.10_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libxml2:amd64 (2.9.10+dfsg-5ubuntu0.20.04.10) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package shared-mime-info.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../08-shared-mime-info_1.15-1_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking shared-mime-info (1.15-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package xdg-user-dirs.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../09-xdg-user-dirs_0.17-2ubuntu1_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking xdg-user-dirs (0.17-2ubuntu1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package bsdmainutils.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../10-bsdmainutils_11.1.2ubuntu3_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking bsdmainutils (11.1.2ubuntu3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libuv1:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../11-libuv1_1.34.2-1ubuntu1.5_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libuv1:amd64 (1.34.2-1ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package autoconf.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../12-autoconf_2.69-11.1_all.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking autoconf (2.69-11.1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package automake.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../13-automake_1%3a1.16.1-4ubuntu6_all.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking automake (1:1.16.1-4ubuntu6) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libcap-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../14-libcap-dev_1%3a2.32-1ubuntu0.2_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libcap-dev:amd64 (1:2.32-1ubuntu0.2) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libltdl7:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../15-libltdl7_2.4.6-14_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libltdl7:amd64 (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libltdl-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../16-libltdl-dev_2.4.6-14_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libltdl-dev:amd64 (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libtool.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../17-libtool_2.4.6-14_all.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libtool (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libuv1-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../18-libuv1-dev_1.34.2-1ubuntu1.5_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libuv1-dev:amd64 (1.34.2-1ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libev4:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../19-libev4_1%3a4.31-1_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libev4:amd64 (1:4.31-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libwebsockets15:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../20-libwebsockets15_3.2.1-3_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libwebsockets15:amd64 (3.2.1-3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libev-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../21-libev-dev_1%3a4.31-1_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libev-dev:amd64 (1:4.31-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package zlib1g-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../22-zlib1g-dev_1%3a1.2.11.dfsg-2ubuntu1.5_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package libwebsockets-dev:amd64.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../23-libwebsockets-dev_3.2.1-3_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking libwebsockets-dev:amd64 (3.2.1-3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Selecting previously unselected package pkg-config.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Preparing to unpack .../24-pkg-config_0.29.1-0ubuntu4_amd64.deb ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Unpacking pkg-config (0.29.1-0ubuntu4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up xdg-user-dirs (0.17-2ubuntu1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libmagic-mgc (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libglib2.0-0:amd64 (2.64.6-1~ubuntu20.04.9) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": No schema files found: doing nothing.
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libicu66:amd64 (66.1-2ubuntu2.1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libev4:amd64 (1:4.31-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libmagic1:amd64 (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up file (1:5.38-4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libcap2:amd64 (1:2.32-1ubuntu0.2) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libglib2.0-data (2.64.6-1~ubuntu20.04.9) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libuv1:amd64 (1.34.2-1ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up bsdmainutils (11.1.2ubuntu3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: warning: skip creation of /usr/share/man/man1/write.1.gz because associated file /usr/share/man/man1/bsd-write.1.gz (of link group write) doesn't exist
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: warning: skip creation of /usr/share/man/man1/from.1.gz because associated file /usr/share/man/man1/bsd-from.1.gz (of link group from) doesn't exist
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up pkg-config (0.29.1-0ubuntu4) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libltdl7:amd64 (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up autoconf (2.69-11.1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libev-dev:amd64 (1:4.31-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libcap-dev:amd64 (1:2.32-1ubuntu0.2) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libxml2:amd64 (2.9.10+dfsg-5ubuntu0.20.04.10) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up automake (1:1.16.1-4ubuntu6) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: warning: skip creation of /usr/share/man/man1/automake.1.gz because associated file /usr/share/man/man1/automake-1.16.1.gz (of link group automake) doesn't exist
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": update-alternatives: warning: skip creation of /usr/share/man/man1/aclocal.1.gz because associated file /usr/share/man/man1/aclocal-1.16.1.gz (of link group automake) doesn't exist
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libuv1-dev:amd64 (1.34.2-1ubuntu1.5) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libtool (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libwebsockets15:amd64 (3.2.1-3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libltdl-dev:amd64 (2.4.6-14) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up shared-mime-info (1.15-1) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Setting up libwebsockets-dev:amd64 (3.2.1-3) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Processing triggers for libc-bin (2.31-0ubuntu9.18) ...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Removing intermediate container 8cd34a62ab4d
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> c0949c0b979b
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 3/7 : RUN git clone --depth 1 https://github.com/wolfSSL/wolfssl.git
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> Running in 77142eb8b3d9
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [91mCloning into 'wolfssl'...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [0mRemoving intermediate container 77142eb8b3d9
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> aa4cf3f1e27f
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 4/7 : RUN git clone --depth 1 https://github.com/wolfSSL/wolfMQTT.git wolfmqtt
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> Running in e21b08d631f1
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [91mCloning into 'wolfmqtt'...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [0mRemoving intermediate container e21b08d631f1
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> 7b0aca74ce36
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 5/7 : RUN git clone --depth 1 https://github.com/guidovranken/wolfmqtt-fuzzers.git
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> Running in 4c76d8247f58
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [91mCloning into 'wolfmqtt-fuzzers'...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [0mRemoving intermediate container 4c76d8247f58
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> 93a6ace0860e
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 6/7 : RUN git clone --depth 1 https://github.com/guidovranken/fuzzing-headers.git
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> Running in d9daea9a1825
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [91mCloning into 'fuzzing-headers'...
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": [0mRemoving intermediate container d9daea9a1825
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> 5f30677b3725
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Step 7/7 : COPY build.sh $SRC/
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792":  ---> e8a7dbb584cf
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Successfully built e8a7dbb584cf
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Successfully tagged gcr.io/oss-fuzz/wolfmqtt:latest
Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792": Successfully tagged us-central1-docker.pkg.dev/oss-fuzz/unsafe/wolfmqtt:latest
Finished Step #1 - "build-3b43c35c-36ac-4706-9d1b-cd06baddc792"
Starting Step #2 - "srcmap"
Step #2 - "srcmap": Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + SRCMAP=/tmp/fileCnoFOP
Step #2 - "srcmap": + echo '{}'
Step #2 - "srcmap": + PATHS_TO_SCAN=/src
Step #2 - "srcmap": + [[ c == \g\o ]]
Step #2 - "srcmap": ++ find /src -name .git -type d
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/fuzzing-headers/.git
Step #2 - "srcmap": + GIT_DIR=/src/fuzzing-headers
Step #2 - "srcmap": + cd /src/fuzzing-headers
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/guidovranken/fuzzing-headers.git
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=bbd75f2806d18009aeca0f3b8fdcc6e7a3929686
Step #2 - "srcmap": + jq_inplace /tmp/fileCnoFOP '."/src/fuzzing-headers" = { type: "git", url: "https://github.com/guidovranken/fuzzing-headers.git", rev: "bbd75f2806d18009aeca0f3b8fdcc6e7a3929686" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/filezaUqlc
Step #2 - "srcmap": + cat /tmp/fileCnoFOP
Step #2 - "srcmap": + jq '."/src/fuzzing-headers" = { type: "git", url: "https://github.com/guidovranken/fuzzing-headers.git", rev: "bbd75f2806d18009aeca0f3b8fdcc6e7a3929686" }'
Step #2 - "srcmap": + mv /tmp/filezaUqlc /tmp/fileCnoFOP
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/wolfmqtt-fuzzers/.git
Step #2 - "srcmap": + GIT_DIR=/src/wolfmqtt-fuzzers
Step #2 - "srcmap": + cd /src/wolfmqtt-fuzzers
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/guidovranken/wolfmqtt-fuzzers.git
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=280349b540f9d3a386035894b09487ced6104e92
Step #2 - "srcmap": + jq_inplace /tmp/fileCnoFOP '."/src/wolfmqtt-fuzzers" = { type: "git", url: "https://github.com/guidovranken/wolfmqtt-fuzzers.git", rev: "280349b540f9d3a386035894b09487ced6104e92" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/filetAxH4G
Step #2 - "srcmap": + cat /tmp/fileCnoFOP
Step #2 - "srcmap": + jq '."/src/wolfmqtt-fuzzers" = { type: "git", url: "https://github.com/guidovranken/wolfmqtt-fuzzers.git", rev: "280349b540f9d3a386035894b09487ced6104e92" }'
Step #2 - "srcmap": + mv /tmp/filetAxH4G /tmp/fileCnoFOP
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/wolfmqtt/.git
Step #2 - "srcmap": + GIT_DIR=/src/wolfmqtt
Step #2 - "srcmap": + cd /src/wolfmqtt
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/wolfSSL/wolfMQTT.git
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=21b93032a30b73edf648c129f2ca691259d52df3
Step #2 - "srcmap": + jq_inplace /tmp/fileCnoFOP '."/src/wolfmqtt" = { type: "git", url: "https://github.com/wolfSSL/wolfMQTT.git", rev: "21b93032a30b73edf648c129f2ca691259d52df3" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/fileeUWvfe
Step #2 - "srcmap": + cat /tmp/fileCnoFOP
Step #2 - "srcmap": + jq '."/src/wolfmqtt" = { type: "git", url: "https://github.com/wolfSSL/wolfMQTT.git", rev: "21b93032a30b73edf648c129f2ca691259d52df3" }'
Step #2 - "srcmap": + mv /tmp/fileeUWvfe /tmp/fileCnoFOP
Step #2 - "srcmap": + for DOT_GIT_DIR in $(find $PATHS_TO_SCAN -name ".git" -type d)
Step #2 - "srcmap": ++ dirname /src/wolfssl/.git
Step #2 - "srcmap": + GIT_DIR=/src/wolfssl
Step #2 - "srcmap": + cd /src/wolfssl
Step #2 - "srcmap": ++ git config --get remote.origin.url
Step #2 - "srcmap": + GIT_URL=https://github.com/wolfSSL/wolfssl.git
Step #2 - "srcmap": ++ git rev-parse HEAD
Step #2 - "srcmap": + GIT_REV=99c983d44fbec8c1c7a95b57afb8314593f6c2cc
Step #2 - "srcmap": + jq_inplace /tmp/fileCnoFOP '."/src/wolfssl" = { type: "git", url: "https://github.com/wolfSSL/wolfssl.git", rev: "99c983d44fbec8c1c7a95b57afb8314593f6c2cc" }'
Step #2 - "srcmap": ++ tempfile
Step #2 - "srcmap": + F=/tmp/file4RptwN
Step #2 - "srcmap": + cat /tmp/fileCnoFOP
Step #2 - "srcmap": + jq '."/src/wolfssl" = { type: "git", url: "https://github.com/wolfSSL/wolfssl.git", rev: "99c983d44fbec8c1c7a95b57afb8314593f6c2cc" }'
Step #2 - "srcmap": + mv /tmp/file4RptwN /tmp/fileCnoFOP
Step #2 - "srcmap": ++ find /src -name .svn -type d
Step #2 - "srcmap": ++ find /src -name .hg -type d
Step #2 - "srcmap": + '[' '' '!=' '' ']'
Step #2 - "srcmap": + cat /tmp/fileCnoFOP
Step #2 - "srcmap": + rm /tmp/fileCnoFOP
Step #2 - "srcmap": {
Step #2 - "srcmap":   "/src/fuzzing-headers": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/guidovranken/fuzzing-headers.git",
Step #2 - "srcmap":     "rev": "bbd75f2806d18009aeca0f3b8fdcc6e7a3929686"
Step #2 - "srcmap":   },
Step #2 - "srcmap":   "/src/wolfmqtt-fuzzers": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/guidovranken/wolfmqtt-fuzzers.git",
Step #2 - "srcmap":     "rev": "280349b540f9d3a386035894b09487ced6104e92"
Step #2 - "srcmap":   },
Step #2 - "srcmap":   "/src/wolfmqtt": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/wolfSSL/wolfMQTT.git",
Step #2 - "srcmap":     "rev": "21b93032a30b73edf648c129f2ca691259d52df3"
Step #2 - "srcmap":   },
Step #2 - "srcmap":   "/src/wolfssl": {
Step #2 - "srcmap":     "type": "git",
Step #2 - "srcmap":     "url": "https://github.com/wolfSSL/wolfssl.git",
Step #2 - "srcmap":     "rev": "99c983d44fbec8c1c7a95b57afb8314593f6c2cc"
Step #2 - "srcmap":   }
Step #2 - "srcmap": }
Finished Step #2 - "srcmap"
Starting Step #3 - "compile-afl-address-x86_64"
Step #3 - "compile-afl-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #3 - "compile-afl-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-afl-address-x86_64": vm.mmap_rnd_bits = 28
Step #3 - "compile-afl-address-x86_64": Copying precompiled AFL++
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": AFL++ target compilation setup:
Step #3 - "compile-afl-address-x86_64": AFL_IGNORE_UNKNOWN_ENVS=1
Step #3 - "compile-afl-address-x86_64": AFL_QUIET=1
Step #3 - "compile-afl-address-x86_64": AFL_IGNORE_PROBLEMS=1
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64":  done.
Step #3 - "compile-afl-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-afl-address-x86_64": CC=/src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64": CXX=/src/aflplusplus/afl-clang-fast++
Step #3 - "compile-afl-address-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope 
Step #3 - "compile-afl-address-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  -stdlib=libc++
Step #3 - "compile-afl-address-x86_64": RUSTFLAGS=--cfg fuzzing -Zsanitizer=address -Cdebuginfo=1 -Cforce-frame-pointers
Step #3 - "compile-afl-address-x86_64": ---------------------------------------------------------------
Step #3 - "compile-afl-address-x86_64": + cd /src/wolfssl/
Step #3 - "compile-afl-address-x86_64": + autoreconf -ivf
Step #3 - "compile-afl-address-x86_64": autoreconf: Entering directory `.'
Step #3 - "compile-afl-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #3 - "compile-afl-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #3 - "compile-afl-address-x86_64": autoreconf: configure.ac: tracing
Step #3 - "compile-afl-address-x86_64": autoreconf: configure.ac: creating directory build-aux
Step #3 - "compile-afl-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #3 - "compile-afl-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #3 - "compile-afl-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #3 - "compile-afl-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #3 - "compile-afl-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #3 - "compile-afl-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #3 - "compile-afl-address-x86_64": configure.ac:25: installing 'build-aux/compile'
Step #3 - "compile-afl-address-x86_64": configure.ac:27: installing 'build-aux/config.guess'
Step #3 - "compile-afl-address-x86_64": configure.ac:27: installing 'build-aux/config.sub'
Step #3 - "compile-afl-address-x86_64": configure.ac:31: installing 'build-aux/install-sh'
Step #3 - "compile-afl-address-x86_64": configure.ac:31: installing 'build-aux/missing'
Step #3 - "compile-afl-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #3 - "compile-afl-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #3 - "compile-afl-address-x86_64": autoreconf: Leaving directory `.'
Step #3 - "compile-afl-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  = *sanitize=memory* ]]
Step #3 - "compile-afl-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  = *-m32* ]]
Step #3 - "compile-afl-address-x86_64": + ./configure --enable-static --disable-crypttests --disable-examples
Step #3 - "compile-afl-address-x86_64": checking whether to enable maintainer-specific portions of Makefiles... no
Step #3 - "compile-afl-address-x86_64": checking for gcc... /src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64": checking whether the C compiler works... yes
Step #3 - "compile-afl-address-x86_64": checking for C compiler default output file name... a.out
Step #3 - "compile-afl-address-x86_64": checking for suffix of executables... 
Step #3 - "compile-afl-address-x86_64": checking whether we are cross compiling... no
Step #3 - "compile-afl-address-x86_64": checking for suffix of object files... o
Step #3 - "compile-afl-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast accepts -g... yes
Step #3 - "compile-afl-address-x86_64": checking for /src/aflplusplus/afl-clang-fast option to accept ISO C89... none needed
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast understands -c and -o together... yes
Step #3 - "compile-afl-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #3 - "compile-afl-address-x86_64": checking whether build environment is sane... yes
Step #3 - "compile-afl-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #3 - "compile-afl-address-x86_64": checking for gawk... no
Step #3 - "compile-afl-address-x86_64": checking for mawk... mawk
Step #3 - "compile-afl-address-x86_64": checking whether make sets $(MAKE)... yes
Step #3 - "compile-afl-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #3 - "compile-afl-address-x86_64": checking whether make supports nested variables... yes
Step #3 - "compile-afl-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #3 - "compile-afl-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #3 - "compile-afl-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #3 - "compile-afl-address-x86_64": checking dependency style of /src/aflplusplus/afl-clang-fast... gcc3
Step #3 - "compile-afl-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking how to print strings... printf
Step #3 - "compile-afl-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #3 - "compile-afl-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #3 - "compile-afl-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #3 - "compile-afl-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #3 - "compile-afl-address-x86_64": checking for ld used by /src/aflplusplus/afl-clang-fast... /usr/bin/ld
Step #3 - "compile-afl-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #3 - "compile-afl-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #3 - "compile-afl-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #3 - "compile-afl-address-x86_64": checking whether ln -s works... yes
Step #3 - "compile-afl-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #3 - "compile-afl-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #3 - "compile-afl-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #3 - "compile-afl-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #3 - "compile-afl-address-x86_64": checking for objdump... objdump
Step #3 - "compile-afl-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #3 - "compile-afl-address-x86_64": checking for dlltool... no
Step #3 - "compile-afl-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #3 - "compile-afl-address-x86_64": checking for ar... ar
Step #3 - "compile-afl-address-x86_64": checking for archiver @FILE support... @
Step #3 - "compile-afl-address-x86_64": checking for strip... strip
Step #3 - "compile-afl-address-x86_64": checking for ranlib... ranlib
Step #3 - "compile-afl-address-x86_64": checking command to parse /usr/bin/nm -B output from /src/aflplusplus/afl-clang-fast object... ok
Step #3 - "compile-afl-address-x86_64": checking for sysroot... no
Step #3 - "compile-afl-address-x86_64": checking for a working dd... /usr/bin/dd
Step #3 - "compile-afl-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #3 - "compile-afl-address-x86_64": checking for mt... no
Step #3 - "compile-afl-address-x86_64": checking if : is a manifest tool... no
Step #3 - "compile-afl-address-x86_64": checking how to run the C preprocessor... /src/aflplusplus/afl-clang-fast -E
Step #3 - "compile-afl-address-x86_64": checking for ANSI C header files... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/types.h... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/stat.h... yes
Step #3 - "compile-afl-address-x86_64": checking for stdlib.h... yes
Step #3 - "compile-afl-address-x86_64": checking for string.h... yes
Step #3 - "compile-afl-address-x86_64": checking for memory.h... yes
Step #3 - "compile-afl-address-x86_64": checking for strings.h... yes
Step #3 - "compile-afl-address-x86_64": checking for inttypes.h... yes
Step #3 - "compile-afl-address-x86_64": checking for stdint.h... yes
Step #3 - "compile-afl-address-x86_64": checking for unistd.h... yes
Step #3 - "compile-afl-address-x86_64": checking for dlfcn.h... yes
Step #3 - "compile-afl-address-x86_64": checking for objdir... .libs
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -fno-rtti -fno-exceptions... yes
Step #3 - "compile-afl-address-x86_64": checking for /src/aflplusplus/afl-clang-fast option to produce PIC... -fPIC -DPIC
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast PIC flag -fPIC -DPIC works... yes
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast static flag -static works... no
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -c -o file.o... yes
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -c -o file.o... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking whether the /src/aflplusplus/afl-clang-fast linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #3 - "compile-afl-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #3 - "compile-afl-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #3 - "compile-afl-address-x86_64": checking whether stripping libraries is possible... yes
Step #3 - "compile-afl-address-x86_64": checking if libtool supports shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether to build shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether to build static libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether the -Werror option is usable... yes
Step #3 - "compile-afl-address-x86_64": checking for simple visibility declarations... yes
Step #3 - "compile-afl-address-x86_64": checking size of long long... 8
Step #3 - "compile-afl-address-x86_64": checking size of long... 8
Step #3 - "compile-afl-address-x86_64": checking size of time_t... 8
Step #3 - "compile-afl-address-x86_64": checking for __uint128_t... yes
Step #3 - "compile-afl-address-x86_64": checking arpa/inet.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking arpa/inet.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for arpa/inet.h... yes
Step #3 - "compile-afl-address-x86_64": checking fcntl.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking fcntl.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for fcntl.h... yes
Step #3 - "compile-afl-address-x86_64": checking limits.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking limits.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for limits.h... yes
Step #3 - "compile-afl-address-x86_64": checking netdb.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking netdb.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for netdb.h... yes
Step #3 - "compile-afl-address-x86_64": checking netinet/in.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking netinet/in.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for netinet/in.h... yes
Step #3 - "compile-afl-address-x86_64": checking stddef.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking stddef.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for stddef.h... yes
Step #3 - "compile-afl-address-x86_64": checking time.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking time.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for time.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/ioctl.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/ioctl.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/ioctl.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/socket.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/socket.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/socket.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/time.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/time.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/time.h... yes
Step #3 - "compile-afl-address-x86_64": checking errno.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking errno.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for errno.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/un.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/un.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/un.h... yes
Step #3 - "compile-afl-address-x86_64": checking ctype.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking ctype.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for ctype.h... yes
Step #3 - "compile-afl-address-x86_64": checking for socket in -lnetwork... no
Step #3 - "compile-afl-address-x86_64": checking whether byte ordering is bigendian... no
Step #3 - "compile-afl-address-x86_64": checking for __atomic... yes
Step #3 - "compile-afl-address-x86_64": checking stdatomic.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking stdatomic.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for stdatomic.h... yes
Step #3 - "compile-afl-address-x86_64": checking assert.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking assert.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for assert.h... yes
Step #3 - "compile-afl-address-x86_64": checking for gethostbyname... yes
Step #3 - "compile-afl-address-x86_64": checking for getaddrinfo... yes
Step #3 - "compile-afl-address-x86_64": checking for gettimeofday... yes
Step #3 - "compile-afl-address-x86_64": checking for gmtime_r... yes
Step #3 - "compile-afl-address-x86_64": checking for gmtime_s... no
Step #3 - "compile-afl-address-x86_64": checking for inet_ntoa... yes
Step #3 - "compile-afl-address-x86_64": checking for memset... yes
Step #3 - "compile-afl-address-x86_64": checking for socket... yes
Step #3 - "compile-afl-address-x86_64": checking for strftime... yes
Step #3 - "compile-afl-address-x86_64": checking for atexit... yes
Step #3 - "compile-afl-address-x86_64": checking for isascii... yes
Step #3 - "compile-afl-address-x86_64": checking for getpid... yes
Step #3 - "compile-afl-address-x86_64": checking for getrandom... yes
Step #3 - "compile-afl-address-x86_64": checking whether gethostbyname is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether getaddrinfo is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether gettimeofday is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether gmtime_r is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether gmtime_s is declared... no
Step #3 - "compile-afl-address-x86_64": checking whether inet_ntoa is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether memset is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether socket is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether strftime is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether atexit is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether isascii is declared... yes
Step #3 - "compile-afl-address-x86_64": checking whether getpid is declared... yes
Step #3 - "compile-afl-address-x86_64": checking for size_t... yes
Step #3 - "compile-afl-address-x86_64": checking for uint8_t... yes
Step #3 - "compile-afl-address-x86_64": checking for uintptr_t... yes
Step #3 - "compile-afl-address-x86_64": checking dependency style of /src/aflplusplus/afl-clang-fast... gcc3
Step #3 - "compile-afl-address-x86_64": checking for thread local storage (TLS) class... _Thread_local
Step #3 - "compile-afl-address-x86_64": checking for debug... no
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast is Clang... yes
Step #3 - "compile-afl-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #3 - "compile-afl-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #3 - "compile-afl-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #3 - "compile-afl-address-x86_64": checking whether more special flags are required for pthreads... no
Step #3 - "compile-afl-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #3 - "compile-afl-address-x86_64": checking for library containing clock_gettime... none required
Step #3 - "compile-afl-address-x86_64": checking for cos in -lm... yes
Step #3 - "compile-afl-address-x86_64": checking for library containing gethostbyname... none required
Step #3 - "compile-afl-address-x86_64": checking for library containing socket... none required
Step #3 - "compile-afl-address-x86_64": checking for vcs system... git
Step #3 - "compile-afl-address-x86_64": checking for vcs checkout... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -Werror... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -pie... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts --param=ssp-buffer-size=1... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #3 - "compile-afl-address-x86_64": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #3 - "compile-afl-address-x86_64": checking the number of available CPUs... 32
Step #3 - "compile-afl-address-x86_64": configure: adding automake macro support
Step #3 - "compile-afl-address-x86_64": configure: creating aminclude.am
Step #3 - "compile-afl-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #3 - "compile-afl-address-x86_64": checking that generated files are newer than configure... done
Step #3 - "compile-afl-address-x86_64": configure: creating ./config.status
Step #3 - "compile-afl-address-x86_64": config.status: creating stamp-h
Step #3 - "compile-afl-address-x86_64": config.status: creating Makefile
Step #3 - "compile-afl-address-x86_64": config.status: creating wolfssl/version.h
Step #3 - "compile-afl-address-x86_64": config.status: creating wolfssl/options.h
Step #3 - "compile-afl-address-x86_64": config.status: creating support/wolfssl.pc
Step #3 - "compile-afl-address-x86_64": config.status: creating debian/control
Step #3 - "compile-afl-address-x86_64": config.status: creating debian/changelog
Step #3 - "compile-afl-address-x86_64": config.status: creating rpm/spec
Step #3 - "compile-afl-address-x86_64": config.status: creating wolfcrypt/test/test_paths.h
Step #3 - "compile-afl-address-x86_64": config.status: creating scripts/unit.test
Step #3 - "compile-afl-address-x86_64": config.status: creating debian/rules
Step #3 - "compile-afl-address-x86_64": config.status: creating config.h
Step #3 - "compile-afl-address-x86_64": config.status: executing depfiles commands
Step #3 - "compile-afl-address-x86_64": config.status: executing libtool commands
Step #3 - "compile-afl-address-x86_64": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #3 - "compile-afl-address-x86_64": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #3 - "compile-afl-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #3 - "compile-afl-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #3 - "compile-afl-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #3 - "compile-afl-address-x86_64": configure: ---
Step #3 - "compile-afl-address-x86_64": configure: Running make clean...
Step #3 - "compile-afl-address-x86_64": configure: ---
Step #3 - "compile-afl-address-x86_64": configure: Generating user options header...
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": Configuration summary for wolfssl version 5.8.2
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64":    * Installation prefix:        /usr/local
Step #3 - "compile-afl-address-x86_64":    * System type:                pc-linux-gnu
Step #3 - "compile-afl-address-x86_64":    * Host CPU:                   x86_64
Step #3 - "compile-afl-address-x86_64":    * C Compiler:                 /src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64":    * C Flags:                    -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope    -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail --param=ssp-buffer-size=1 -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #3 - "compile-afl-address-x86_64":    * C++ Compiler:               /src/aflplusplus/afl-clang-fast++
Step #3 - "compile-afl-address-x86_64":    * C++ Flags:                  -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  -stdlib=libc++
Step #3 - "compile-afl-address-x86_64":    * CPP Flags:                  
Step #3 - "compile-afl-address-x86_64":    * CCAS Flags:                 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope   
Step #3 - "compile-afl-address-x86_64":    * LD Flags:                   
Step #3 - "compile-afl-address-x86_64":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #3 - "compile-afl-address-x86_64":    * Library Suffix:             
Step #3 - "compile-afl-address-x86_64":    * Debug enabled:              no
Step #3 - "compile-afl-address-x86_64":    * Coverage enabled:           
Step #3 - "compile-afl-address-x86_64":    * Warnings as failure:        yes
Step #3 - "compile-afl-address-x86_64":    * make -j:                    33
Step #3 - "compile-afl-address-x86_64":    * VCS checkout:               yes
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64":    Features 
Step #3 - "compile-afl-address-x86_64":    * Experimental settings:      Forbidden
Step #3 - "compile-afl-address-x86_64":    * FIPS:                       no
Step #3 - "compile-afl-address-x86_64":    * Single threaded:            no
Step #3 - "compile-afl-address-x86_64":    * Filesystem:                 yes
Step #3 - "compile-afl-address-x86_64":    * OpenSSH Build:              no
Step #3 - "compile-afl-address-x86_64":    * OpenSSL Extra API:          no
Step #3 - "compile-afl-address-x86_64":    * OpenSSL Coexist:            no
Step #3 - "compile-afl-address-x86_64":    * Old Names:                  yes
Step #3 - "compile-afl-address-x86_64":    * Max Strength Build:         no
Step #3 - "compile-afl-address-x86_64":    * Distro Build:               no
Step #3 - "compile-afl-address-x86_64":    * Reproducible Build:         no
Step #3 - "compile-afl-address-x86_64":    * Side-channel Hardening:     yes
Step #3 - "compile-afl-address-x86_64":    * Single Precision Math:      no
Step #3 - "compile-afl-address-x86_64":    * SP implementation:          all
Step #3 - "compile-afl-address-x86_64":    * Fast Math:                  no
Step #3 - "compile-afl-address-x86_64":    * Heap Math:                  no
Step #3 - "compile-afl-address-x86_64":    * Assembly Allowed:           yes
Step #3 - "compile-afl-address-x86_64":    * sniffer:                    no
Step #3 - "compile-afl-address-x86_64":    * snifftest:                  no
Step #3 - "compile-afl-address-x86_64":    * ARC4:                       no
Step #3 - "compile-afl-address-x86_64":    * AES:                        yes
Step #3 - "compile-afl-address-x86_64":    * AES-NI:                     no
Step #3 - "compile-afl-address-x86_64":    * AVX for AES:                no
Step #3 - "compile-afl-address-x86_64":    * AES-CBC:                    yes
Step #3 - "compile-afl-address-x86_64":    * AES-CBC length checks:      no
Step #3 - "compile-afl-address-x86_64":    * AES-GCM:                    yes
Step #3 - "compile-afl-address-x86_64":    * AES-GCM streaming:          no
Step #3 - "compile-afl-address-x86_64":    * AES-CCM:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-CTR:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-CFB:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-OFB:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-XTS:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-XTS streaming:          no
Step #3 - "compile-afl-address-x86_64":    * AES-SIV:                    no
Step #3 - "compile-afl-address-x86_64":    * AES-EAX:                    no
Step #3 - "compile-afl-address-x86_64":    * AES Bitspliced:             no
Step #3 - "compile-afl-address-x86_64":    * AES Key Wrap:               no
Step #3 - "compile-afl-address-x86_64":    * ARIA:                       no
Step #3 - "compile-afl-address-x86_64":    * ASCON:                      no
Step #3 - "compile-afl-address-x86_64":    * DES3:                       no
Step #3 - "compile-afl-address-x86_64":    * DES3 TLS Suites:            no
Step #3 - "compile-afl-address-x86_64":    * Camellia:                   no
Step #3 - "compile-afl-address-x86_64":    * CUDA:                       no
Step #3 - "compile-afl-address-x86_64":    * SM4-ECB:                    no
Step #3 - "compile-afl-address-x86_64":    * SM4-CBC:                    no
Step #3 - "compile-afl-address-x86_64":    * SM4-CTR:                    no
Step #3 - "compile-afl-address-x86_64":    * SM4-GCM:                    no
Step #3 - "compile-afl-address-x86_64":    * SM4-CCM:                    no
Step #3 - "compile-afl-address-x86_64":    * NULL Cipher:                no
Step #3 - "compile-afl-address-x86_64":    * MD2:                        no
Step #3 - "compile-afl-address-x86_64":    * MD4:                        no
Step #3 - "compile-afl-address-x86_64":    * MD5:                        no
Step #3 - "compile-afl-address-x86_64":    * RIPEMD:                     no
Step #3 - "compile-afl-address-x86_64":    * SHA:                        yes
Step #3 - "compile-afl-address-x86_64":    * SHA-224:                    yes
Step #3 - "compile-afl-address-x86_64":    * SHA-256:                    yes
Step #3 - "compile-afl-address-x86_64":    * SHA-384:                    yes
Step #3 - "compile-afl-address-x86_64":    * SHA-512:                    yes
Step #3 - "compile-afl-address-x86_64":    * SHA3:                       yes
Step #3 - "compile-afl-address-x86_64":    * SHAKE128:                   no
Step #3 - "compile-afl-address-x86_64":    * SHAKE256:                   no
Step #3 - "compile-afl-address-x86_64":    * SM3:                        no
Step #3 - "compile-afl-address-x86_64":    * BLAKE2:                     no
Step #3 - "compile-afl-address-x86_64":    * BLAKE2S:                    no
Step #3 - "compile-afl-address-x86_64":    * SipHash:                    no
Step #3 - "compile-afl-address-x86_64":    * CMAC:                       no
Step #3 - "compile-afl-address-x86_64":    * keygen:                     no
Step #3 - "compile-afl-address-x86_64":    * acert:                      no
Step #3 - "compile-afl-address-x86_64":    * certgen:                    no
Step #3 - "compile-afl-address-x86_64":    * certreq:                    no
Step #3 - "compile-afl-address-x86_64":    * certext:                    no
Step #3 - "compile-afl-address-x86_64":    * certgencache:               no
Step #3 - "compile-afl-address-x86_64":    * CHACHA:                     yes
Step #3 - "compile-afl-address-x86_64":    * XCHACHA:                    no
Step #3 - "compile-afl-address-x86_64":    * Hash DRBG:                  yes
Step #3 - "compile-afl-address-x86_64":    * MmemUse Entropy:
Step #3 - "compile-afl-address-x86_64":    * (AKA: wolfEntropy):         no
Step #3 - "compile-afl-address-x86_64":    * PWDBASED:                   yes
Step #3 - "compile-afl-address-x86_64":    * Encrypted keys:             no
Step #3 - "compile-afl-address-x86_64":    * scrypt:                     no
Step #3 - "compile-afl-address-x86_64":    * wolfCrypt Only:             no
Step #3 - "compile-afl-address-x86_64":    * HKDF:                       yes
Step #3 - "compile-afl-address-x86_64":    * HPKE:                       no
Step #3 - "compile-afl-address-x86_64":    * X9.63 KDF:                  no
Step #3 - "compile-afl-address-x86_64":    * SRTP-KDF:                   no
Step #3 - "compile-afl-address-x86_64":    * PSK:                        no
Step #3 - "compile-afl-address-x86_64":    * Poly1305:                   yes
Step #3 - "compile-afl-address-x86_64":    * LEANPSK:                    no
Step #3 - "compile-afl-address-x86_64":    * LEANTLS:                    no
Step #3 - "compile-afl-address-x86_64":    * RSA:                        yes
Step #3 - "compile-afl-address-x86_64":    * RSA-PSS:                    yes
Step #3 - "compile-afl-address-x86_64":    * DSA:                        no
Step #3 - "compile-afl-address-x86_64":    * DH:                         yes
Step #3 - "compile-afl-address-x86_64":    * DH Default Parameters:      yes
Step #3 - "compile-afl-address-x86_64":    * ECC:                        yes
Step #3 - "compile-afl-address-x86_64":    * ECC Custom Curves:          no
Step #3 - "compile-afl-address-x86_64":    * ECC Minimum Bits:           224
Step #3 - "compile-afl-address-x86_64":    * FPECC:                      no
Step #3 - "compile-afl-address-x86_64":    * ECC_ENCRYPT:                no
Step #3 - "compile-afl-address-x86_64":    * Brainpool:                  no
Step #3 - "compile-afl-address-x86_64":    * SM2:                        no
Step #3 - "compile-afl-address-x86_64":    * CURVE25519:                 no
Step #3 - "compile-afl-address-x86_64":    * ED25519:                    no
Step #3 - "compile-afl-address-x86_64":    * ED25519 streaming:          no
Step #3 - "compile-afl-address-x86_64":    * CURVE448:                   no
Step #3 - "compile-afl-address-x86_64":    * ED448:                      no
Step #3 - "compile-afl-address-x86_64":    * ED448 streaming:            no
Step #3 - "compile-afl-address-x86_64":    * LMS:                        no
Step #3 - "compile-afl-address-x86_64":    * LMS wolfSSL impl:           no
Step #3 - "compile-afl-address-x86_64":    * XMSS:                       no
Step #3 - "compile-afl-address-x86_64":    * XMSS wolfSSL impl:          no
Step #3 - "compile-afl-address-x86_64":    * MLKEM:                      no
Step #3 - "compile-afl-address-x86_64":    * MLKEM wolfSSL impl:         no
Step #3 - "compile-afl-address-x86_64":    * DILITHIUM:                  no
Step #3 - "compile-afl-address-x86_64":    * ECCSI                       no
Step #3 - "compile-afl-address-x86_64":    * SAKKE                       no
Step #3 - "compile-afl-address-x86_64":    * ASN:                        yes
Step #3 - "compile-afl-address-x86_64":    * Anonymous cipher:           no
Step #3 - "compile-afl-address-x86_64":    * CODING:                     yes
Step #3 - "compile-afl-address-x86_64":    * MEMORY:                     yes
Step #3 - "compile-afl-address-x86_64":    * I/O POOL:                   no
Step #3 - "compile-afl-address-x86_64":    * wolfSentry:                 no
Step #3 - "compile-afl-address-x86_64":    * LIGHTY:                     no
Step #3 - "compile-afl-address-x86_64":    * WPA Supplicant:             no
Step #3 - "compile-afl-address-x86_64":    * HAPROXY:                    no
Step #3 - "compile-afl-address-x86_64":    * STUNNEL:                    no
Step #3 - "compile-afl-address-x86_64":    * tcpdump:                    no
Step #3 - "compile-afl-address-x86_64":    * libssh2:                    no
Step #3 - "compile-afl-address-x86_64":    * ntp:                        no
Step #3 - "compile-afl-address-x86_64":    * rsyslog:                    no
Step #3 - "compile-afl-address-x86_64":    * Apache httpd:               no
Step #3 - "compile-afl-address-x86_64":    * NGINX:                      no
Step #3 - "compile-afl-address-x86_64":    * OpenResty:                  no
Step #3 - "compile-afl-address-x86_64":    * ASIO:                       no
Step #3 - "compile-afl-address-x86_64":    * LIBWEBSOCKETS:              no
Step #3 - "compile-afl-address-x86_64":    * Qt:                         no
Step #3 - "compile-afl-address-x86_64":    * Qt Unit Testing:            no
Step #3 - "compile-afl-address-x86_64":    * SIGNAL:                     no
Step #3 - "compile-afl-address-x86_64":    * chrony:                     no
Step #3 - "compile-afl-address-x86_64":    * strongSwan:                 no
Step #3 - "compile-afl-address-x86_64":    * OpenLDAP:                   no
Step #3 - "compile-afl-address-x86_64":    * hitch:                      no
Step #3 - "compile-afl-address-x86_64":    * memcached:                  no
Step #3 - "compile-afl-address-x86_64":    * Mosquitto                   no
Step #3 - "compile-afl-address-x86_64":    * ERROR_STRINGS:              yes
Step #3 - "compile-afl-address-x86_64":    * DTLS:                       no
Step #3 - "compile-afl-address-x86_64":    * DTLS v1.3:                  no
Step #3 - "compile-afl-address-x86_64":    * SCTP:                       no
Step #3 - "compile-afl-address-x86_64":    * SRTP:                       no
Step #3 - "compile-afl-address-x86_64":    * Indefinite Length:          no
Step #3 - "compile-afl-address-x86_64":    * Multicast:                  no
Step #3 - "compile-afl-address-x86_64":    * SSL v3.0 (Old):             no
Step #3 - "compile-afl-address-x86_64":    * TLS v1.0 (Old):             no
Step #3 - "compile-afl-address-x86_64":    * TLS v1.1 (Old):             no
Step #3 - "compile-afl-address-x86_64":    * TLS v1.2:                   yes
Step #3 - "compile-afl-address-x86_64":    * TLS v1.3:                   yes
Step #3 - "compile-afl-address-x86_64":    * RPK:                        no
Step #3 - "compile-afl-address-x86_64":    * Post-handshake Auth:        no
Step #3 - "compile-afl-address-x86_64":    * Early Data:                 no
Step #3 - "compile-afl-address-x86_64":    * QUIC:                       no
Step #3 - "compile-afl-address-x86_64":    * Send State in HRR Cookie:   undefined
Step #3 - "compile-afl-address-x86_64":    * OCSP:                       no
Step #3 - "compile-afl-address-x86_64":    * OCSP Stapling:              no
Step #3 - "compile-afl-address-x86_64":    * OCSP Stapling v2:           no
Step #3 - "compile-afl-address-x86_64":    * CRL:                        no
Step #3 - "compile-afl-address-x86_64":    * CRL-MONITOR:                no
Step #3 - "compile-afl-address-x86_64":    * Persistent session cache:   no
Step #3 - "compile-afl-address-x86_64":    * Persistent cert    cache:   no
Step #3 - "compile-afl-address-x86_64":    * Atomic User Record Layer:   no
Step #3 - "compile-afl-address-x86_64":    * Public Key Callbacks:       no
Step #3 - "compile-afl-address-x86_64":    * libxmss:                    no
Step #3 - "compile-afl-address-x86_64":    * liblms:                     no
Step #3 - "compile-afl-address-x86_64":    * liboqs:                     no
Step #3 - "compile-afl-address-x86_64":    * Whitewood netRandom:        no
Step #3 - "compile-afl-address-x86_64":    * Server Name Indication:     yes
Step #3 - "compile-afl-address-x86_64":    * ALPN:                       no
Step #3 - "compile-afl-address-x86_64":    * Maximum Fragment Length:    no
Step #3 - "compile-afl-address-x86_64":    * Trusted CA Indication:      no
Step #3 - "compile-afl-address-x86_64":    * Truncated HMAC:             no
Step #3 - "compile-afl-address-x86_64":    * Supported Elliptic Curves:  yes
Step #3 - "compile-afl-address-x86_64":    * FFDHE only in client:       no
Step #3 - "compile-afl-address-x86_64":    * Session Ticket:             no
Step #3 - "compile-afl-address-x86_64":    * Extended Master Secret:     yes
Step #3 - "compile-afl-address-x86_64":    * Renegotiation Indication:   no
Step #3 - "compile-afl-address-x86_64":    * Secure Renegotiation:       no
Step #3 - "compile-afl-address-x86_64":    * Fallback SCSV:              no
Step #3 - "compile-afl-address-x86_64":    * Keying Material Exporter:   no
Step #3 - "compile-afl-address-x86_64":    * All TLS Extensions:         no
Step #3 - "compile-afl-address-x86_64":    * S/MIME:                     no
Step #3 - "compile-afl-address-x86_64":    * PKCS#7:                     no
Step #3 - "compile-afl-address-x86_64":    * PKCS#8:                     yes
Step #3 - "compile-afl-address-x86_64":    * PKCS#11:                    no
Step #3 - "compile-afl-address-x86_64":    * PKCS#12:                    yes
Step #3 - "compile-afl-address-x86_64":    * wolfSSH:                    no
Step #3 - "compile-afl-address-x86_64":    * wolfEngine:                 no
Step #3 - "compile-afl-address-x86_64":    * wolfTPM:                    no
Step #3 - "compile-afl-address-x86_64":    * wolfCLU:                    no
Step #3 - "compile-afl-address-x86_64":    * wolfSCEP:                   no
Step #3 - "compile-afl-address-x86_64":    * Secure Remote Password:     no
Step #3 - "compile-afl-address-x86_64":    * Small Stack:                no
Step #3 - "compile-afl-address-x86_64":    * Linux Kernel Module:        no
Step #3 - "compile-afl-address-x86_64":    * valgrind unit tests:        no
Step #3 - "compile-afl-address-x86_64":    * LIBZ:                       no
Step #3 - "compile-afl-address-x86_64":    * Examples:                   no
Step #3 - "compile-afl-address-x86_64":    * Crypt tests:                no
Step #3 - "compile-afl-address-x86_64":    * Stack sizes in tests:       no
Step #3 - "compile-afl-address-x86_64":    * Heap stats in tests:        no
Step #3 - "compile-afl-address-x86_64":    * Asynchronous Crypto:        no
Step #3 - "compile-afl-address-x86_64":    * Asynchronous Crypto (sim):  no
Step #3 - "compile-afl-address-x86_64":    * Cavium Nitrox:              no
Step #3 - "compile-afl-address-x86_64":    * Cavium Octeon (Sync):       no
Step #3 - "compile-afl-address-x86_64":    * Intel Quick Assist:         no
Step #3 - "compile-afl-address-x86_64":    * ARM ASM:                    no
Step #3 - "compile-afl-address-x86_64":    * ARM ASM SHA512/SHA3 Crypto  no
Step #3 - "compile-afl-address-x86_64":    * ARM ASM SM3/SM4 Crypto      no
Step #3 - "compile-afl-address-x86_64":    * RISC-V ASM                  no
Step #3 - "compile-afl-address-x86_64":    * PPC32 ASM                   no
Step #3 - "compile-afl-address-x86_64":    * Write duplicate:            no
Step #3 - "compile-afl-address-x86_64":    * Xilinx Hardware Acc.:       no
Step #3 - "compile-afl-address-x86_64":    * C89:                        no
Step #3 - "compile-afl-address-x86_64":    * Inline Code:                yes
Step #3 - "compile-afl-address-x86_64":    * Linux AF_ALG:               no
Step #3 - "compile-afl-address-x86_64":    * Linux KCAPI:                no
Step #3 - "compile-afl-address-x86_64":    * Linux devcrypto:            no
Step #3 - "compile-afl-address-x86_64":    * PK callbacks:               no
Step #3 - "compile-afl-address-x86_64":    * Crypto callbacks:           no
Step #3 - "compile-afl-address-x86_64":    * i.MX CAAM:                  no
Step #3 - "compile-afl-address-x86_64":    * IoT-Safe:                   no
Step #3 - "compile-afl-address-x86_64":    * IoT-Safe HWRNG:             no
Step #3 - "compile-afl-address-x86_64":    * NXP SE050:                  no
Step #3 - "compile-afl-address-x86_64":    * TROPIC01:                   no
Step #3 - "compile-afl-address-x86_64":    * Maxim Integrated MAXQ10XX:  no
Step #3 - "compile-afl-address-x86_64":    * PSA:                        no
Step #3 - "compile-afl-address-x86_64":    * System CA certs:            yes
Step #3 - "compile-afl-address-x86_64":    * Dual alg cert support:      no
Step #3 - "compile-afl-address-x86_64":    * ERR Queues per Thread:      yes
Step #3 - "compile-afl-address-x86_64":    * rwlock:                     no
Step #3 - "compile-afl-address-x86_64":    * keylog export:              no
Step #3 - "compile-afl-address-x86_64":    * AutoSAR :                   no
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' 'CC=/src/aflplusplus/afl-clang-fast' 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope '
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #3 - "compile-afl-address-x86_64":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #3 - "compile-afl-address-x86_64": ++ nproc
Step #3 - "compile-afl-address-x86_64": + make -j32
Step #3 - "compile-afl-address-x86_64": make -j33  all-recursive
Step #3 - "compile-afl-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #3 - "compile-afl-address-x86_64": make[1]: Entering directory '/src/wolfssl'
Step #3 - "compile-afl-address-x86_64": make[2]: Entering directory '/src/wolfssl'
Step #3 - "compile-afl-address-x86_64": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #3 - "compile-afl-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-wolfio.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-keys.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-internal.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-ssl.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-tls.lo
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0mwarning: [0m
Step #3 - "compile-afl-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35mwarning: [0m[1mwarning: unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0m
Step #3 - "compile-afl-address-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0m[0;1;35mwarning: [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [1m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35mwarning: [0m[0;1;35mwarning: [0m[1m
Step #3 - "compile-afl-address-x86_64": unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0m
Step #3 - "compile-afl-address-x86_64": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35m[0;1;35m[0mwarning: 
Step #3 - "compile-afl-address-x86_64": [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0mwarning: 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0;1;35m[0mwarning: [1m[0munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][1m[0munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]
Step #3 - "compile-afl-address-x86_64": [0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0;1;35m[0m[1mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": warning: [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[0;1;35m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]warning: [0m[0m
Step #3 - "compile-afl-address-x86_64": [1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]warning: [0m[0m
Step #3 - "compile-afl-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[0;1;35m[1mwarning: unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0;1;35m[0mwarning: [1m[0munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][1m[0munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]
Step #3 - "compile-afl-address-x86_64": [0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfssl_la-tls13.lo
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64":   CCLD     src/libwolfssl.la
Step #3 - "compile-afl-address-x86_64": make[2]: Leaving directory '/src/wolfssl'
Step #3 - "compile-afl-address-x86_64": make[1]: Leaving directory '/src/wolfssl'
Step #3 - "compile-afl-address-x86_64": ++ realpath .
Step #3 - "compile-afl-address-x86_64": + export 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  -I /src/wolfssl'
Step #3 - "compile-afl-address-x86_64": + CFLAGS='-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  -I /src/wolfssl'
Step #3 - "compile-afl-address-x86_64": ++ realpath src/.libs/
Step #3 - "compile-afl-address-x86_64": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #3 - "compile-afl-address-x86_64": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #3 - "compile-afl-address-x86_64": + cd /src/wolfmqtt/
Step #3 - "compile-afl-address-x86_64": + ./autogen.sh
Step #3 - "compile-afl-address-x86_64": Making missing build-aux directory.
Step #3 - "compile-afl-address-x86_64": Touching missing build-aux/config.rpath file.
Step #3 - "compile-afl-address-x86_64": autoreconf: Entering directory `.'
Step #3 - "compile-afl-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #3 - "compile-afl-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #3 - "compile-afl-address-x86_64": autoreconf: configure.ac: tracing
Step #3 - "compile-afl-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #3 - "compile-afl-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #3 - "compile-afl-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #3 - "compile-afl-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #3 - "compile-afl-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #3 - "compile-afl-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #3 - "compile-afl-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #3 - "compile-afl-address-x86_64": configure.ac:46: installing 'build-aux/compile'
Step #3 - "compile-afl-address-x86_64": configure.ac:21: installing 'build-aux/config.guess'
Step #3 - "compile-afl-address-x86_64": configure.ac:21: installing 'build-aux/config.sub'
Step #3 - "compile-afl-address-x86_64": configure.ac:24: installing 'build-aux/install-sh'
Step #3 - "compile-afl-address-x86_64": configure.ac:24: installing 'build-aux/missing'
Step #3 - "compile-afl-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #3 - "compile-afl-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #3 - "compile-afl-address-x86_64": autoreconf: Leaving directory `.'
Step #3 - "compile-afl-address-x86_64": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #3 - "compile-afl-address-x86_64": checking for pkg-config... /usr/bin/pkg-config
Step #3 - "compile-afl-address-x86_64": checking pkg-config is at least version 0.9.0... yes
Step #3 - "compile-afl-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #3 - "compile-afl-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #3 - "compile-afl-address-x86_64": checking whether build environment is sane... yes
Step #3 - "compile-afl-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #3 - "compile-afl-address-x86_64": checking for gawk... no
Step #3 - "compile-afl-address-x86_64": checking for mawk... mawk
Step #3 - "compile-afl-address-x86_64": checking whether make sets $(MAKE)... yes
Step #3 - "compile-afl-address-x86_64": checking whether make supports nested variables... yes
Step #3 - "compile-afl-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #3 - "compile-afl-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #3 - "compile-afl-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #3 - "compile-afl-address-x86_64": checking how to print strings... printf
Step #3 - "compile-afl-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #3 - "compile-afl-address-x86_64": checking for gcc... /src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64": checking whether the C compiler works... yes
Step #3 - "compile-afl-address-x86_64": checking for C compiler default output file name... a.out
Step #3 - "compile-afl-address-x86_64": checking for suffix of executables... 
Step #3 - "compile-afl-address-x86_64": checking whether we are cross compiling... no
Step #3 - "compile-afl-address-x86_64": checking for suffix of object files... o
Step #3 - "compile-afl-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast accepts -g... yes
Step #3 - "compile-afl-address-x86_64": checking for /src/aflplusplus/afl-clang-fast option to accept ISO C89... none needed
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast understands -c and -o together... yes
Step #3 - "compile-afl-address-x86_64": checking dependency style of /src/aflplusplus/afl-clang-fast... gcc3
Step #3 - "compile-afl-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #3 - "compile-afl-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #3 - "compile-afl-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #3 - "compile-afl-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #3 - "compile-afl-address-x86_64": checking for ld used by /src/aflplusplus/afl-clang-fast... /usr/bin/ld
Step #3 - "compile-afl-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #3 - "compile-afl-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #3 - "compile-afl-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #3 - "compile-afl-address-x86_64": checking whether ln -s works... yes
Step #3 - "compile-afl-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #3 - "compile-afl-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #3 - "compile-afl-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #3 - "compile-afl-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #3 - "compile-afl-address-x86_64": checking for objdump... objdump
Step #3 - "compile-afl-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #3 - "compile-afl-address-x86_64": checking for dlltool... no
Step #3 - "compile-afl-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #3 - "compile-afl-address-x86_64": checking for ar... ar
Step #3 - "compile-afl-address-x86_64": checking for archiver @FILE support... @
Step #3 - "compile-afl-address-x86_64": checking for strip... strip
Step #3 - "compile-afl-address-x86_64": checking for ranlib... ranlib
Step #3 - "compile-afl-address-x86_64": checking command to parse /usr/bin/nm -B output from /src/aflplusplus/afl-clang-fast object... ok
Step #3 - "compile-afl-address-x86_64": checking for sysroot... no
Step #3 - "compile-afl-address-x86_64": checking for a working dd... /usr/bin/dd
Step #3 - "compile-afl-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #3 - "compile-afl-address-x86_64": checking for mt... no
Step #3 - "compile-afl-address-x86_64": checking if : is a manifest tool... no
Step #3 - "compile-afl-address-x86_64": checking how to run the C preprocessor... /src/aflplusplus/afl-clang-fast -E
Step #3 - "compile-afl-address-x86_64": checking for ANSI C header files... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/types.h... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/stat.h... yes
Step #3 - "compile-afl-address-x86_64": checking for stdlib.h... yes
Step #3 - "compile-afl-address-x86_64": checking for string.h... yes
Step #3 - "compile-afl-address-x86_64": checking for memory.h... yes
Step #3 - "compile-afl-address-x86_64": checking for strings.h... yes
Step #3 - "compile-afl-address-x86_64": checking for inttypes.h... yes
Step #3 - "compile-afl-address-x86_64": checking for stdint.h... yes
Step #3 - "compile-afl-address-x86_64": checking for unistd.h... yes
Step #3 - "compile-afl-address-x86_64": checking for dlfcn.h... yes
Step #3 - "compile-afl-address-x86_64": checking for objdir... .libs
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -fno-rtti -fno-exceptions... yes
Step #3 - "compile-afl-address-x86_64": checking for /src/aflplusplus/afl-clang-fast option to produce PIC... -fPIC -DPIC
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast PIC flag -fPIC -DPIC works... yes
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast static flag -static works... no
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -c -o file.o... yes
Step #3 - "compile-afl-address-x86_64": checking if /src/aflplusplus/afl-clang-fast supports -c -o file.o... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking whether the /src/aflplusplus/afl-clang-fast linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #3 - "compile-afl-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #3 - "compile-afl-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #3 - "compile-afl-address-x86_64": checking whether stripping libraries is possible... yes
Step #3 - "compile-afl-address-x86_64": checking if libtool supports shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether to build shared libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether to build static libraries... yes
Step #3 - "compile-afl-address-x86_64": checking whether the -Werror option is usable... yes
Step #3 - "compile-afl-address-x86_64": checking for simple visibility declarations... yes
Step #3 - "compile-afl-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking for gcc... (cached) /src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64": checking whether we are using the GNU C compiler... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast accepts -g... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking for /src/aflplusplus/afl-clang-fast option to accept ISO C89... (cached) none needed
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast understands -c and -o together... (cached) yes
Step #3 - "compile-afl-address-x86_64": checking dependency style of /src/aflplusplus/afl-clang-fast... (cached) gcc3
Step #3 - "compile-afl-address-x86_64": checking size of long long... 8
Step #3 - "compile-afl-address-x86_64": checking size of long... 8
Step #3 - "compile-afl-address-x86_64": checking arpa/inet.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking arpa/inet.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for arpa/inet.h... yes
Step #3 - "compile-afl-address-x86_64": checking fcntl.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking fcntl.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for fcntl.h... yes
Step #3 - "compile-afl-address-x86_64": checking limits.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking limits.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for limits.h... yes
Step #3 - "compile-afl-address-x86_64": checking netdb.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking netdb.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for netdb.h... yes
Step #3 - "compile-afl-address-x86_64": checking netinet/in.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking netinet/in.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for netinet/in.h... yes
Step #3 - "compile-afl-address-x86_64": checking stddef.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking stddef.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for stddef.h... yes
Step #3 - "compile-afl-address-x86_64": checking time.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking time.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for time.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/ioctl.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/ioctl.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/ioctl.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/socket.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/socket.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/socket.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/time.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/time.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/time.h... yes
Step #3 - "compile-afl-address-x86_64": checking errno.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking errno.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for errno.h... yes
Step #3 - "compile-afl-address-x86_64": checking sys/un.h usability... yes
Step #3 - "compile-afl-address-x86_64": checking sys/un.h presence... yes
Step #3 - "compile-afl-address-x86_64": checking for sys/un.h... yes
Step #3 - "compile-afl-address-x86_64": checking for gethostbyname... yes
Step #3 - "compile-afl-address-x86_64": checking for getaddrinfo... yes
Step #3 - "compile-afl-address-x86_64": checking for gettimeofday... yes
Step #3 - "compile-afl-address-x86_64": checking for inet_ntoa... yes
Step #3 - "compile-afl-address-x86_64": checking for memset... yes
Step #3 - "compile-afl-address-x86_64": checking for socket... yes
Step #3 - "compile-afl-address-x86_64": checking for signal... yes
Step #3 - "compile-afl-address-x86_64": checking for rand... yes
Step #3 - "compile-afl-address-x86_64": checking for socket in -lnetwork... no
Step #3 - "compile-afl-address-x86_64": checking for wolfSSL... configure: prefix NONE
Step #3 - "compile-afl-address-x86_64": checking for debug... no
Step #3 - "compile-afl-address-x86_64": checking whether /src/aflplusplus/afl-clang-fast is Clang... yes
Step #3 - "compile-afl-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #3 - "compile-afl-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #3 - "compile-afl-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #3 - "compile-afl-address-x86_64": checking whether more special flags are required for pthreads... no
Step #3 - "compile-afl-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #3 - "compile-afl-address-x86_64": checking for wolfCrypt_Init in -lwolfssl... yes
Step #3 - "compile-afl-address-x86_64": checking for vcs system... git
Step #3 - "compile-afl-address-x86_64": checking for vcs checkout... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -Werror... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #3 - "compile-afl-address-x86_64": checking whether the linker accepts -pie... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts --param=ssp-buffer-size=1... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wredundant-decls... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #3 - "compile-afl-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #3 - "compile-afl-address-x86_64": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #3 - "compile-afl-address-x86_64": checking the number of available CPUs... 32
Step #3 - "compile-afl-address-x86_64": configure: adding automake macro support
Step #3 - "compile-afl-address-x86_64": configure: creating aminclude.am
Step #3 - "compile-afl-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #3 - "compile-afl-address-x86_64": checking that generated files are newer than configure... done
Step #3 - "compile-afl-address-x86_64": configure: creating ./config.status
Step #3 - "compile-afl-address-x86_64": config.status: creating Makefile
Step #3 - "compile-afl-address-x86_64": config.status: creating wolfmqtt/version.h
Step #3 - "compile-afl-address-x86_64": config.status: creating wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": config.status: creating src/config.h
Step #3 - "compile-afl-address-x86_64": config.status: executing depfiles commands
Step #3 - "compile-afl-address-x86_64": config.status: executing libtool commands
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": Running make clean...
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": Generating user options header...
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -fsanitize=address, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -fsanitize-address-use-after-scope, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is --param=ssp-buffer-size=1, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": not outputting (N)DEBUG to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": ---
Step #3 - "compile-afl-address-x86_64": Configuration summary for wolfmqtt version 1.20.0
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64":    * Installation prefix:       /usr/local
Step #3 - "compile-afl-address-x86_64":    * System type:               pc-linux-gnu
Step #3 - "compile-afl-address-x86_64":    * Host CPU:                  x86_64
Step #3 - "compile-afl-address-x86_64":    * C Compiler:                /src/aflplusplus/afl-clang-fast
Step #3 - "compile-afl-address-x86_64":    * C Flags:                   -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope  -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail --param=ssp-buffer-size=1 -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #3 - "compile-afl-address-x86_64":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #3 - "compile-afl-address-x86_64":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #3 - "compile-afl-address-x86_64":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #3 - "compile-afl-address-x86_64":    * Disconnect Callback:       yes
Step #3 - "compile-afl-address-x86_64":    * Error Strings:             yes
Step #3 - "compile-afl-address-x86_64":    * Enable MQTT-SN:            no
Step #3 - "compile-afl-address-x86_64":    * Enable MQTT v5.0:          yes
Step #3 - "compile-afl-address-x86_64":    * Property Callback:         yes
Step #3 - "compile-afl-address-x86_64":    * Examples:                  no
Step #3 - "compile-afl-address-x86_64":    * Non-Blocking:              no
Step #3 - "compile-afl-address-x86_64":    * STDIN Capture:             yes
Step #3 - "compile-afl-address-x86_64":    * TLS:                       yes
Step #3 - "compile-afl-address-x86_64":    * CURL:                      no
Step #3 - "compile-afl-address-x86_64":    * Multi-thread:              no
Step #3 - "compile-afl-address-x86_64":    * Stress:                    no
Step #3 - "compile-afl-address-x86_64":    * WebSocket:                 no
Step #3 - "compile-afl-address-x86_64": ++ nproc
Step #3 - "compile-afl-address-x86_64": + make -j32
Step #3 - "compile-afl-address-x86_64": make -j33  all-am
Step #3 - "compile-afl-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #3 - "compile-afl-address-x86_64": make[1]: Entering directory '/src/wolfmqtt'
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #3 - "compile-afl-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #3 - "compile-afl-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #3 - "compile-afl-address-x86_64": 
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[0;1;35m[1mwarning: unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m[1m
Step #3 - "compile-afl-address-x86_64": unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64": 3 warnings generated.
Step #3 - "compile-afl-address-x86_64":   CCLD     src/libwolfmqtt.la
Step #3 - "compile-afl-address-x86_64": make[1]: Leaving directory '/src/wolfmqtt'
Step #3 - "compile-afl-address-x86_64": + /src/aflplusplus/afl-clang-fast++ -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a /usr/lib/libFuzzingEngine.a -o /workspace/out/afl-address-x86_64/wolfmqtt-fuzzer
Finished Step #3 - "compile-afl-address-x86_64"
Starting Step #4 - "build-check-afl-address-x86_64"
Step #4 - "build-check-afl-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #4 - "build-check-afl-address-x86_64": Unable to find image 'gcr.io/oss-fuzz-base/base-runner:latest' locally
Step #4 - "build-check-afl-address-x86_64": latest: Pulling from oss-fuzz-base/base-runner
Step #4 - "build-check-afl-address-x86_64": b549f31133a9: Already exists
Step #4 - "build-check-afl-address-x86_64": 69cdc9bbccd0: Already exists
Step #4 - "build-check-afl-address-x86_64": a32b6e48f4c7: Already exists
Step #4 - "build-check-afl-address-x86_64": b650c246384f: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 2c409b8d3365: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 09b872c4ce6c: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 0cb975f60e23: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 62cf4b901e1e: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": c6899b4f9a26: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 24c704996e99: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 475afe5d35e9: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": a0f7c15ad2bc: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 3663a2a47741: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": ff0bc20ff420: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 764d515bcf13: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 4ff27154019f: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 7c93d5d403a6: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 4df05e14ff15: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": f17a12dd5aed: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 94f5e9f63bf3: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 418d3358adb5: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 3bc67f653acd: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": cc7a9a687fc5: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 8976ed4c1861: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 7ca4ab52c367: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 1f41ddf3a05f: Pulling fs layer
Step #4 - "build-check-afl-address-x86_64": 62cf4b901e1e: Waiting
Step #4 - "build-check-afl-address-x86_64": c6899b4f9a26: Waiting
Step #4 - "build-check-afl-address-x86_64": 24c704996e99: Waiting
Step #4 - "build-check-afl-address-x86_64": 475afe5d35e9: Waiting
Step #4 - "build-check-afl-address-x86_64": a0f7c15ad2bc: Waiting
Step #4 - "build-check-afl-address-x86_64": 3663a2a47741: Waiting
Step #4 - "build-check-afl-address-x86_64": ff0bc20ff420: Waiting
Step #4 - "build-check-afl-address-x86_64": 764d515bcf13: Waiting
Step #4 - "build-check-afl-address-x86_64": 3bc67f653acd: Waiting
Step #4 - "build-check-afl-address-x86_64": 7c93d5d403a6: Waiting
Step #4 - "build-check-afl-address-x86_64": 4df05e14ff15: Waiting
Step #4 - "build-check-afl-address-x86_64": 418d3358adb5: Waiting
Step #4 - "build-check-afl-address-x86_64": f17a12dd5aed: Waiting
Step #4 - "build-check-afl-address-x86_64": 94f5e9f63bf3: Waiting
Step #4 - "build-check-afl-address-x86_64": 0cb975f60e23: Waiting
Step #4 - "build-check-afl-address-x86_64": 7ca4ab52c367: Waiting
Step #4 - "build-check-afl-address-x86_64": 8976ed4c1861: Waiting
Step #4 - "build-check-afl-address-x86_64": cc7a9a687fc5: Waiting
Step #4 - "build-check-afl-address-x86_64": 09b872c4ce6c: Download complete
Step #4 - "build-check-afl-address-x86_64": b650c246384f: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": b650c246384f: Download complete
Step #4 - "build-check-afl-address-x86_64": 2c409b8d3365: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 2c409b8d3365: Download complete
Step #4 - "build-check-afl-address-x86_64": 62cf4b901e1e: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 62cf4b901e1e: Download complete
Step #4 - "build-check-afl-address-x86_64": b650c246384f: Pull complete
Step #4 - "build-check-afl-address-x86_64": 0cb975f60e23: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 0cb975f60e23: Download complete
Step #4 - "build-check-afl-address-x86_64": 475afe5d35e9: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 475afe5d35e9: Download complete
Step #4 - "build-check-afl-address-x86_64": 24c704996e99: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 24c704996e99: Download complete
Step #4 - "build-check-afl-address-x86_64": 2c409b8d3365: Pull complete
Step #4 - "build-check-afl-address-x86_64": 09b872c4ce6c: Pull complete
Step #4 - "build-check-afl-address-x86_64": a0f7c15ad2bc: Download complete
Step #4 - "build-check-afl-address-x86_64": c6899b4f9a26: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": c6899b4f9a26: Download complete
Step #4 - "build-check-afl-address-x86_64": ff0bc20ff420: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": ff0bc20ff420: Download complete
Step #4 - "build-check-afl-address-x86_64": 0cb975f60e23: Pull complete
Step #4 - "build-check-afl-address-x86_64": 764d515bcf13: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 764d515bcf13: Download complete
Step #4 - "build-check-afl-address-x86_64": 4ff27154019f: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 4ff27154019f: Download complete
Step #4 - "build-check-afl-address-x86_64": 62cf4b901e1e: Pull complete
Step #4 - "build-check-afl-address-x86_64": 4df05e14ff15: Download complete
Step #4 - "build-check-afl-address-x86_64": 3663a2a47741: Download complete
Step #4 - "build-check-afl-address-x86_64": 94f5e9f63bf3: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 94f5e9f63bf3: Download complete
Step #4 - "build-check-afl-address-x86_64": 418d3358adb5: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 418d3358adb5: Download complete
Step #4 - "build-check-afl-address-x86_64": 7c93d5d403a6: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 7c93d5d403a6: Download complete
Step #4 - "build-check-afl-address-x86_64": 3bc67f653acd: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 3bc67f653acd: Download complete
Step #4 - "build-check-afl-address-x86_64": cc7a9a687fc5: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": cc7a9a687fc5: Download complete
Step #4 - "build-check-afl-address-x86_64": f17a12dd5aed: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": f17a12dd5aed: Download complete
Step #4 - "build-check-afl-address-x86_64": 8976ed4c1861: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 8976ed4c1861: Download complete
Step #4 - "build-check-afl-address-x86_64": 7ca4ab52c367: Download complete
Step #4 - "build-check-afl-address-x86_64": 1f41ddf3a05f: Verifying Checksum
Step #4 - "build-check-afl-address-x86_64": 1f41ddf3a05f: Download complete
Step #4 - "build-check-afl-address-x86_64": c6899b4f9a26: Pull complete
Step #4 - "build-check-afl-address-x86_64": 24c704996e99: Pull complete
Step #4 - "build-check-afl-address-x86_64": 475afe5d35e9: Pull complete
Step #4 - "build-check-afl-address-x86_64": a0f7c15ad2bc: Pull complete
Step #4 - "build-check-afl-address-x86_64": 3663a2a47741: Pull complete
Step #4 - "build-check-afl-address-x86_64": ff0bc20ff420: Pull complete
Step #4 - "build-check-afl-address-x86_64": 764d515bcf13: Pull complete
Step #4 - "build-check-afl-address-x86_64": 4ff27154019f: Pull complete
Step #4 - "build-check-afl-address-x86_64": 7c93d5d403a6: Pull complete
Step #4 - "build-check-afl-address-x86_64": 4df05e14ff15: Pull complete
Step #4 - "build-check-afl-address-x86_64": f17a12dd5aed: Pull complete
Step #4 - "build-check-afl-address-x86_64": 94f5e9f63bf3: Pull complete
Step #4 - "build-check-afl-address-x86_64": 418d3358adb5: Pull complete
Step #4 - "build-check-afl-address-x86_64": 3bc67f653acd: Pull complete
Step #4 - "build-check-afl-address-x86_64": cc7a9a687fc5: Pull complete
Step #4 - "build-check-afl-address-x86_64": 8976ed4c1861: Pull complete
Step #4 - "build-check-afl-address-x86_64": 7ca4ab52c367: Pull complete
Step #4 - "build-check-afl-address-x86_64": 1f41ddf3a05f: Pull complete
Step #4 - "build-check-afl-address-x86_64": Digest: sha256:f0b321b1f809c6d9f616020ec8e33d7d8ad17e862d5582894a623f7d4294ac33
Step #4 - "build-check-afl-address-x86_64": Status: Downloaded newer image for gcr.io/oss-fuzz-base/base-runner:latest
Step #4 - "build-check-afl-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpycnxf80s/wolfmqtt-fuzzer
Finished Step #4 - "build-check-afl-address-x86_64"
Starting Step #5
Step #5: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #5
Starting Step #6
Step #6: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #6:   adding: SanitizerCoverageLTO.so (deflated 69%)
Step #6:   adding: SanitizerCoveragePCGUARD.so (deflated 70%)
Step #6:   adding: afl-addseeds (deflated 57%)
Step #6:   adding: afl-analyze (deflated 55%)
Step #6:   adding: afl-c++ (deflated 57%)
Step #6:   adding: afl-c++.8 (deflated 55%)
Step #6:   adding: afl-cc (deflated 57%)
Step #6:   adding: afl-cc.8 (deflated 55%)
Step #6:   adding: afl-clang (deflated 57%)
Step #6:   adding: afl-clang++ (deflated 57%)
Step #6:   adding: afl-clang-fast (deflated 57%)
Step #6:   adding: afl-clang-fast++ (deflated 57%)
Step #6:   adding: afl-clang-fast++.8 (deflated 55%)
Step #6:   adding: afl-clang-fast.8 (deflated 55%)
Step #6:   adding: afl-clang-lto (deflated 57%)
Step #6:   adding: afl-clang-lto++ (deflated 57%)
Step #6:   adding: afl-clang-lto++.8 (deflated 55%)
Step #6:   adding: afl-clang-lto.8 (deflated 55%)
Step #6:   adding: afl-cmin (deflated 70%)
Step #6:   adding: afl-cmin.bash (deflated 65%)
Step #6:   adding: afl-cmin.py (deflated 71%)
Step #6:   adding: afl-compiler-rt-32.o (deflated 54%)
Step #6:   adding: afl-compiler-rt-64.o (deflated 67%)
Step #6:   adding: afl-compiler-rt.o (deflated 67%)
Step #6:   adding: afl-fuzz (deflated 55%)
Step #6:   adding: afl-g++ (deflated 57%)
Step #6:   adding: afl-gcc (deflated 57%)
Step #6:   adding: afl-gotcpu (deflated 62%)
Step #6:   adding: afl-ld-lto (deflated 62%)
Step #6:   adding: afl-llvm-dict2file.so (deflated 69%)
Step #6:   adding: afl-llvm-lto-instrumentlist.so (deflated 71%)
Step #6:   adding: afl-llvm-pass.so (deflated 69%)
Step #6:   adding: afl-llvm-rt-lto-32.o (deflated 20%)
Step #6:   adding: afl-llvm-rt-lto-64.o (deflated 20%)
Step #6:   adding: afl-llvm-rt-lto.o (deflated 20%)
Step #6:   adding: afl-lto (deflated 57%)
Step #6:   adding: afl-lto++ (deflated 57%)
Step #6:   adding: afl-lto++.8 (deflated 55%)
Step #6:   adding: afl-lto.8 (deflated 55%)
Step #6:   adding: afl-persistent-config (deflated 59%)
Step #6:   adding: afl-plot (deflated 65%)
Step #6:   adding: afl-showmap (deflated 55%)
Step #6:   adding: afl-system-config (deflated 63%)
Step #6:   adding: afl-tmin (deflated 55%)
Step #6:   adding: afl-whatsup (deflated 69%)
Step #6:   adding: afl-wine-trace (deflated 70%)
Step #6:   adding: afl_options.txt (deflated 20%)
Step #6:   adding: cmplog-instructions-pass.so (deflated 71%)
Step #6:   adding: cmplog-routines-pass.so (deflated 70%)
Step #6:   adding: cmplog-switches-pass.so (deflated 70%)
Step #6:   adding: compare-transform-pass.so (deflated 69%)
Step #6:   adding: dynamic_list.txt (deflated 76%)
Step #6:   adding: injection-pass.so (deflated 70%)
Step #6:   adding: libAFLDriver.a (deflated 64%)
Step #6:   adding: libAFLQemuDriver.a (deflated 65%)
Step #6:   adding: llvm-symbolizer (deflated 65%)
Step #6:   adding: split-compares-pass.so (deflated 69%)
Step #6:   adding: split-switches-pass.so (deflated 70%)
Step #6:   adding: wolfmqtt-fuzzer (deflated 61%)
Finished Step #6
Starting Step #7
Step #7: Pulling image: gcr.io/oss-fuzz-base/uploader
Step #7: Using default tag: latest
Step #7: latest: Pulling from oss-fuzz-base/uploader
Step #7: c62795f78da9: Pulling fs layer
Step #7: d4fceeeb758e: Pulling fs layer
Step #7: 5c9125a401ae: Pulling fs layer
Step #7: 0062f774e994: Pulling fs layer
Step #7: 6b33fd031fac: Pulling fs layer
Step #7: 7eb39101e508: Pulling fs layer
Step #7: 89257482f398: Pulling fs layer
Step #7: 0062f774e994: Waiting
Step #7: 6b33fd031fac: Waiting
Step #7: 7eb39101e508: Waiting
Step #7: 89257482f398: Waiting
Step #7: 5c9125a401ae: Verifying Checksum
Step #7: 5c9125a401ae: Download complete
Step #7: d4fceeeb758e: Verifying Checksum
Step #7: d4fceeeb758e: Download complete
Step #7: 6b33fd031fac: Verifying Checksum
Step #7: 6b33fd031fac: Download complete
Step #7: 0062f774e994: Verifying Checksum
Step #7: 0062f774e994: Download complete
Step #7: c62795f78da9: Verifying Checksum
Step #7: c62795f78da9: Download complete
Step #7: 89257482f398: Verifying Checksum
Step #7: 89257482f398: Download complete
Step #7: 7eb39101e508: Verifying Checksum
Step #7: 7eb39101e508: Download complete
Step #7: c62795f78da9: Pull complete
Step #7: d4fceeeb758e: Pull complete
Step #7: 5c9125a401ae: Pull complete
Step #7: 0062f774e994: Pull complete
Step #7: 6b33fd031fac: Pull complete
Step #7: 7eb39101e508: Pull complete
Step #7: 89257482f398: Pull complete
Step #7: Digest: sha256:5717ba63d13b5515063e2a6ccad09fb5bf32a86c8e0798a363d81c2be522e411
Step #7: Status: Downloaded newer image for gcr.io/oss-fuzz-base/uploader:latest
Step #7: gcr.io/oss-fuzz-base/uploader:latest
Step #7:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #7:                                  Dload  Upload   Total   Spent    Left  Speed
Step #7:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3009 --:--:-- --:--:-- --:--:--  3023
Finished Step #7
Starting Step #8
Step #8: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #8:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #8:                                  Dload  Upload   Total   Spent    Left  Speed
Step #8:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 11.1M    0     0  100 11.1M      0  44.1M --:--:-- --:--:-- --:--:-- 44.3M
Finished Step #8
Starting Step #9
Step #9: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #9:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #9:                                  Dload  Upload   Total   Spent    Left  Speed
Step #9:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     64 --:--:-- --:--:-- --:--:--    64
Finished Step #9
Starting Step #10
Step #10: Already have image (with digest): gcr.io/cloud-builders/curl
Step #10:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #10:                                  Dload  Upload   Total   Spent    Left  Speed
Step #10:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    33    0     0  100    33      0    161 --:--:-- --:--:-- --:--:--   162
Finished Step #10
Starting Step #11
Step #11: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #11
Starting Step #12 - "compile-honggfuzz-address-x86_64"
Step #12 - "compile-honggfuzz-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #12 - "compile-honggfuzz-address-x86_64": ---------------------------------------------------------------
Step #12 - "compile-honggfuzz-address-x86_64": vm.mmap_rnd_bits = 28
Step #12 - "compile-honggfuzz-address-x86_64": Skipping compilation; using precompiled honggfuzz
Step #12 - "compile-honggfuzz-address-x86_64":  done.
Step #12 - "compile-honggfuzz-address-x86_64": ---------------------------------------------------------------
Step #12 - "compile-honggfuzz-address-x86_64": CC=clang
Step #12 - "compile-honggfuzz-address-x86_64": CXX=clang++
Step #12 - "compile-honggfuzz-address-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp
Step #12 - "compile-honggfuzz-address-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -stdlib=libc++
Step #12 - "compile-honggfuzz-address-x86_64": RUSTFLAGS=--cfg fuzzing -Zsanitizer=address -Cdebuginfo=1 -Cforce-frame-pointers
Step #12 - "compile-honggfuzz-address-x86_64": ---------------------------------------------------------------
Step #12 - "compile-honggfuzz-address-x86_64": + cd /src/wolfssl/
Step #12 - "compile-honggfuzz-address-x86_64": + autoreconf -ivf
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: Entering directory `.'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: configure.ac: tracing
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: configure.ac: creating directory build-aux
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:25: installing 'build-aux/compile'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:27: installing 'build-aux/config.guess'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:27: installing 'build-aux/config.sub'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:31: installing 'build-aux/install-sh'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:31: installing 'build-aux/missing'
Step #12 - "compile-honggfuzz-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #12 - "compile-honggfuzz-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: Leaving directory `.'
Step #12 - "compile-honggfuzz-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp = *sanitize=memory* ]]
Step #12 - "compile-honggfuzz-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp = *-m32* ]]
Step #12 - "compile-honggfuzz-address-x86_64": + ./configure --enable-static --disable-crypttests --disable-examples
Step #12 - "compile-honggfuzz-address-x86_64": checking whether to enable maintainer-specific portions of Makefiles... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for gcc... clang
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the C compiler works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for C compiler default output file name... a.out
Step #12 - "compile-honggfuzz-address-x86_64": checking for suffix of executables... 
Step #12 - "compile-honggfuzz-address-x86_64": checking whether we are cross compiling... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for suffix of object files... o
Step #12 - "compile-honggfuzz-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang accepts -g... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for clang option to accept ISO C89... none needed
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang understands -c and -o together... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #12 - "compile-honggfuzz-address-x86_64": checking whether build environment is sane... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #12 - "compile-honggfuzz-address-x86_64": checking for gawk... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for mawk... mawk
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make sets $(MAKE)... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports nested variables... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #12 - "compile-honggfuzz-address-x86_64": checking dependency style of clang... gcc3
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking how to print strings... printf
Step #12 - "compile-honggfuzz-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #12 - "compile-honggfuzz-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #12 - "compile-honggfuzz-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #12 - "compile-honggfuzz-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #12 - "compile-honggfuzz-address-x86_64": checking for ld used by clang... /usr/bin/ld
Step #12 - "compile-honggfuzz-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #12 - "compile-honggfuzz-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #12 - "compile-honggfuzz-address-x86_64": checking whether ln -s works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #12 - "compile-honggfuzz-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #12 - "compile-honggfuzz-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #12 - "compile-honggfuzz-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #12 - "compile-honggfuzz-address-x86_64": checking for objdump... objdump
Step #12 - "compile-honggfuzz-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #12 - "compile-honggfuzz-address-x86_64": checking for dlltool... no
Step #12 - "compile-honggfuzz-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #12 - "compile-honggfuzz-address-x86_64": checking for ar... ar
Step #12 - "compile-honggfuzz-address-x86_64": checking for archiver @FILE support... @
Step #12 - "compile-honggfuzz-address-x86_64": checking for strip... strip
Step #12 - "compile-honggfuzz-address-x86_64": checking for ranlib... ranlib
Step #12 - "compile-honggfuzz-address-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #12 - "compile-honggfuzz-address-x86_64": checking for sysroot... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for a working dd... /usr/bin/dd
Step #12 - "compile-honggfuzz-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #12 - "compile-honggfuzz-address-x86_64": checking for mt... no
Step #12 - "compile-honggfuzz-address-x86_64": checking if : is a manifest tool... no
Step #12 - "compile-honggfuzz-address-x86_64": checking how to run the C preprocessor... clang -E
Step #12 - "compile-honggfuzz-address-x86_64": checking for ANSI C header files... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/types.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/stat.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stdlib.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for string.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for memory.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for strings.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for inttypes.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stdint.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for unistd.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for dlfcn.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for objdir... .libs
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang static flag -static works... no
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -c -o file.o... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #12 - "compile-honggfuzz-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #12 - "compile-honggfuzz-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #12 - "compile-honggfuzz-address-x86_64": checking whether stripping libraries is possible... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if libtool supports shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether to build shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether to build static libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the -Werror option is usable... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for simple visibility declarations... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking size of long long... 8
Step #12 - "compile-honggfuzz-address-x86_64": checking size of long... 8
Step #12 - "compile-honggfuzz-address-x86_64": checking size of time_t... 8
Step #12 - "compile-honggfuzz-address-x86_64": checking for __uint128_t... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking arpa/inet.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking arpa/inet.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for arpa/inet.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking fcntl.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking fcntl.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for fcntl.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking limits.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking limits.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for limits.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netdb.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netdb.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for netdb.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netinet/in.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netinet/in.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for netinet/in.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stddef.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stddef.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stddef.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking time.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking time.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for time.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/ioctl.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/ioctl.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/ioctl.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/socket.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/socket.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/socket.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/time.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/time.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/time.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking errno.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking errno.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for errno.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/un.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/un.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/un.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking ctype.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking ctype.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for ctype.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for socket in -lnetwork... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether byte ordering is bigendian... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for __atomic... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stdatomic.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stdatomic.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stdatomic.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking assert.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking assert.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for assert.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gethostbyname... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for getaddrinfo... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gettimeofday... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gmtime_r... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gmtime_s... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for inet_ntoa... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for memset... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for socket... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for strftime... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for atexit... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for isascii... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for getpid... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for getrandom... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether gethostbyname is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether getaddrinfo is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether gettimeofday is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether gmtime_r is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether gmtime_s is declared... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether inet_ntoa is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether memset is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether socket is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether strftime is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether atexit is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether isascii is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether getpid is declared... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for size_t... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for uint8_t... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for uintptr_t... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking dependency style of clang... gcc3
Step #12 - "compile-honggfuzz-address-x86_64": checking for thread local storage (TLS) class... _Thread_local
Step #12 - "compile-honggfuzz-address-x86_64": checking for debug... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang is Clang... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #12 - "compile-honggfuzz-address-x86_64": checking whether more special flags are required for pthreads... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for library containing clock_gettime... none required
Step #12 - "compile-honggfuzz-address-x86_64": checking for cos in -lm... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for library containing gethostbyname... none required
Step #12 - "compile-honggfuzz-address-x86_64": checking for library containing socket... none required
Step #12 - "compile-honggfuzz-address-x86_64": checking for vcs system... git
Step #12 - "compile-honggfuzz-address-x86_64": checking for vcs checkout... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -Werror... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -pie... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #12 - "compile-honggfuzz-address-x86_64": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #12 - "compile-honggfuzz-address-x86_64": checking the number of available CPUs... 32
Step #12 - "compile-honggfuzz-address-x86_64": configure: adding automake macro support
Step #12 - "compile-honggfuzz-address-x86_64": configure: creating aminclude.am
Step #12 - "compile-honggfuzz-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #12 - "compile-honggfuzz-address-x86_64": checking that generated files are newer than configure... done
Step #12 - "compile-honggfuzz-address-x86_64": configure: creating ./config.status
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating stamp-h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating Makefile
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating wolfssl/version.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating wolfssl/options.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating support/wolfssl.pc
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating debian/control
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating debian/changelog
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating rpm/spec
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating wolfcrypt/test/test_paths.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating scripts/unit.test
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating debian/rules
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating config.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing depfiles commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing libtool commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #12 - "compile-honggfuzz-address-x86_64": configure: ---
Step #12 - "compile-honggfuzz-address-x86_64": configure: Running make clean...
Step #12 - "compile-honggfuzz-address-x86_64": configure: ---
Step #12 - "compile-honggfuzz-address-x86_64": configure: Generating user options header...
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": Configuration summary for wolfssl version 5.8.2
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64":    * Installation prefix:        /usr/local
Step #12 - "compile-honggfuzz-address-x86_64":    * System type:                pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64":    * Host CPU:                   x86_64
Step #12 - "compile-honggfuzz-address-x86_64":    * C Compiler:                 clang
Step #12 - "compile-honggfuzz-address-x86_64":    * C Flags:                    -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp   -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #12 - "compile-honggfuzz-address-x86_64":    * C++ Compiler:               clang++
Step #12 - "compile-honggfuzz-address-x86_64":    * C++ Flags:                  -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -stdlib=libc++
Step #12 - "compile-honggfuzz-address-x86_64":    * CPP Flags:                  
Step #12 - "compile-honggfuzz-address-x86_64":    * CCAS Flags:                 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp  
Step #12 - "compile-honggfuzz-address-x86_64":    * LD Flags:                   
Step #12 - "compile-honggfuzz-address-x86_64":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #12 - "compile-honggfuzz-address-x86_64":    * Library Suffix:             
Step #12 - "compile-honggfuzz-address-x86_64":    * Debug enabled:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * Coverage enabled:           
Step #12 - "compile-honggfuzz-address-x86_64":    * Warnings as failure:        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * make -j:                    33
Step #12 - "compile-honggfuzz-address-x86_64":    * VCS checkout:               yes
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64":    Features 
Step #12 - "compile-honggfuzz-address-x86_64":    * Experimental settings:      Forbidden
Step #12 - "compile-honggfuzz-address-x86_64":    * FIPS:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Single threaded:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * Filesystem:                 yes
Step #12 - "compile-honggfuzz-address-x86_64":    * OpenSSH Build:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * OpenSSL Extra API:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * OpenSSL Coexist:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * Old Names:                  yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Max Strength Build:         no
Step #12 - "compile-honggfuzz-address-x86_64":    * Distro Build:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * Reproducible Build:         no
Step #12 - "compile-honggfuzz-address-x86_64":    * Side-channel Hardening:     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Single Precision Math:      no
Step #12 - "compile-honggfuzz-address-x86_64":    * SP implementation:          all
Step #12 - "compile-honggfuzz-address-x86_64":    * Fast Math:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * Heap Math:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * Assembly Allowed:           yes
Step #12 - "compile-honggfuzz-address-x86_64":    * sniffer:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * snifftest:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * ARC4:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES:                        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-NI:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * AVX for AES:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-CBC:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-CBC length checks:      no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-GCM:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-GCM streaming:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-CCM:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-CTR:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-CFB:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-OFB:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-XTS:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-XTS streaming:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-SIV:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES-EAX:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES Bitspliced:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * AES Key Wrap:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * ARIA:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * ASCON:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * DES3:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * DES3 TLS Suites:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * Camellia:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * CUDA:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM4-ECB:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM4-CBC:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM4-CTR:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM4-GCM:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM4-CCM:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * NULL Cipher:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * MD2:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * MD4:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * MD5:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * RIPEMD:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA:                        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA-224:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA-256:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA-384:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA-512:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHA3:                       yes
Step #12 - "compile-honggfuzz-address-x86_64":    * SHAKE128:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * SHAKE256:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM3:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * BLAKE2:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * BLAKE2S:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * SipHash:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * CMAC:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * keygen:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * acert:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * certgen:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * certreq:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * certext:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * certgencache:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * CHACHA:                     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * XCHACHA:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * Hash DRBG:                  yes
Step #12 - "compile-honggfuzz-address-x86_64":    * MmemUse Entropy:
Step #12 - "compile-honggfuzz-address-x86_64":    * (AKA: wolfEntropy):         no
Step #12 - "compile-honggfuzz-address-x86_64":    * PWDBASED:                   yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Encrypted keys:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * scrypt:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfCrypt Only:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * HKDF:                       yes
Step #12 - "compile-honggfuzz-address-x86_64":    * HPKE:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * X9.63 KDF:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * SRTP-KDF:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * PSK:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Poly1305:                   yes
Step #12 - "compile-honggfuzz-address-x86_64":    * LEANPSK:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * LEANTLS:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * RSA:                        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * RSA-PSS:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * DSA:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * DH:                         yes
Step #12 - "compile-honggfuzz-address-x86_64":    * DH Default Parameters:      yes
Step #12 - "compile-honggfuzz-address-x86_64":    * ECC:                        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * ECC Custom Curves:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * ECC Minimum Bits:           224
Step #12 - "compile-honggfuzz-address-x86_64":    * FPECC:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * ECC_ENCRYPT:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * Brainpool:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * SM2:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * CURVE25519:                 no
Step #12 - "compile-honggfuzz-address-x86_64":    * ED25519:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * ED25519 streaming:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * CURVE448:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * ED448:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * ED448 streaming:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * LMS:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * LMS wolfSSL impl:           no
Step #12 - "compile-honggfuzz-address-x86_64":    * XMSS:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * XMSS wolfSSL impl:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * MLKEM:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * MLKEM wolfSSL impl:         no
Step #12 - "compile-honggfuzz-address-x86_64":    * DILITHIUM:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * ECCSI                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * SAKKE                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * ASN:                        yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Anonymous cipher:           no
Step #12 - "compile-honggfuzz-address-x86_64":    * CODING:                     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * MEMORY:                     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * I/O POOL:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfSentry:                 no
Step #12 - "compile-honggfuzz-address-x86_64":    * LIGHTY:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * WPA Supplicant:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * HAPROXY:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * STUNNEL:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * tcpdump:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * libssh2:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * ntp:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * rsyslog:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * Apache httpd:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * NGINX:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * OpenResty:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * ASIO:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * LIBWEBSOCKETS:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * Qt:                         no
Step #12 - "compile-honggfuzz-address-x86_64":    * Qt Unit Testing:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * SIGNAL:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * chrony:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * strongSwan:                 no
Step #12 - "compile-honggfuzz-address-x86_64":    * OpenLDAP:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * hitch:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * memcached:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * Mosquitto                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * ERROR_STRINGS:              yes
Step #12 - "compile-honggfuzz-address-x86_64":    * DTLS:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * DTLS v1.3:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * SCTP:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * SRTP:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Indefinite Length:          no
Step #12 - "compile-honggfuzz-address-x86_64":    * Multicast:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * SSL v3.0 (Old):             no
Step #12 - "compile-honggfuzz-address-x86_64":    * TLS v1.0 (Old):             no
Step #12 - "compile-honggfuzz-address-x86_64":    * TLS v1.1 (Old):             no
Step #12 - "compile-honggfuzz-address-x86_64":    * TLS v1.2:                   yes
Step #12 - "compile-honggfuzz-address-x86_64":    * TLS v1.3:                   yes
Step #12 - "compile-honggfuzz-address-x86_64":    * RPK:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Post-handshake Auth:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Early Data:                 no
Step #12 - "compile-honggfuzz-address-x86_64":    * QUIC:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Send State in HRR Cookie:   undefined
Step #12 - "compile-honggfuzz-address-x86_64":    * OCSP:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * OCSP Stapling:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * OCSP Stapling v2:           no
Step #12 - "compile-honggfuzz-address-x86_64":    * CRL:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * CRL-MONITOR:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * Persistent session cache:   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Persistent cert    cache:   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Atomic User Record Layer:   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Public Key Callbacks:       no
Step #12 - "compile-honggfuzz-address-x86_64":    * libxmss:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * liblms:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * liboqs:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * Whitewood netRandom:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Server Name Indication:     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * ALPN:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Maximum Fragment Length:    no
Step #12 - "compile-honggfuzz-address-x86_64":    * Trusted CA Indication:      no
Step #12 - "compile-honggfuzz-address-x86_64":    * Truncated HMAC:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * Supported Elliptic Curves:  yes
Step #12 - "compile-honggfuzz-address-x86_64":    * FFDHE only in client:       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Session Ticket:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * Extended Master Secret:     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Renegotiation Indication:   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Secure Renegotiation:       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Fallback SCSV:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * Keying Material Exporter:   no
Step #12 - "compile-honggfuzz-address-x86_64":    * All TLS Extensions:         no
Step #12 - "compile-honggfuzz-address-x86_64":    * S/MIME:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * PKCS#7:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * PKCS#8:                     yes
Step #12 - "compile-honggfuzz-address-x86_64":    * PKCS#11:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * PKCS#12:                    yes
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfSSH:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfEngine:                 no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfTPM:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfCLU:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * wolfSCEP:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Secure Remote Password:     no
Step #12 - "compile-honggfuzz-address-x86_64":    * Small Stack:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * Linux Kernel Module:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * valgrind unit tests:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * LIBZ:                       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Examples:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Crypt tests:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * Stack sizes in tests:       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Heap stats in tests:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Asynchronous Crypto:        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Asynchronous Crypto (sim):  no
Step #12 - "compile-honggfuzz-address-x86_64":    * Cavium Nitrox:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * Cavium Octeon (Sync):       no
Step #12 - "compile-honggfuzz-address-x86_64":    * Intel Quick Assist:         no
Step #12 - "compile-honggfuzz-address-x86_64":    * ARM ASM:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * ARM ASM SHA512/SHA3 Crypto  no
Step #12 - "compile-honggfuzz-address-x86_64":    * ARM ASM SM3/SM4 Crypto      no
Step #12 - "compile-honggfuzz-address-x86_64":    * RISC-V ASM                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * PPC32 ASM                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Write duplicate:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * Xilinx Hardware Acc.:       no
Step #12 - "compile-honggfuzz-address-x86_64":    * C89:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * Inline Code:                yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Linux AF_ALG:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * Linux KCAPI:                no
Step #12 - "compile-honggfuzz-address-x86_64":    * Linux devcrypto:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * PK callbacks:               no
Step #12 - "compile-honggfuzz-address-x86_64":    * Crypto callbacks:           no
Step #12 - "compile-honggfuzz-address-x86_64":    * i.MX CAAM:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * IoT-Safe:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * IoT-Safe HWRNG:             no
Step #12 - "compile-honggfuzz-address-x86_64":    * NXP SE050:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * TROPIC01:                   no
Step #12 - "compile-honggfuzz-address-x86_64":    * Maxim Integrated MAXQ10XX:  no
Step #12 - "compile-honggfuzz-address-x86_64":    * PSA:                        no
Step #12 - "compile-honggfuzz-address-x86_64":    * System CA certs:            yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Dual alg cert support:      no
Step #12 - "compile-honggfuzz-address-x86_64":    * ERR Queues per Thread:      yes
Step #12 - "compile-honggfuzz-address-x86_64":    * rwlock:                     no
Step #12 - "compile-honggfuzz-address-x86_64":    * keylog export:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * AutoSAR :                   no
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' 'CC=clang' 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp'
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #12 - "compile-honggfuzz-address-x86_64":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #12 - "compile-honggfuzz-address-x86_64": ++ nproc
Step #12 - "compile-honggfuzz-address-x86_64": + make -j32
Step #12 - "compile-honggfuzz-address-x86_64": make -j33  all-recursive
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: Entering directory '/src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": make[2]: Entering directory '/src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-internal.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-wolfio.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-ssl.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-keys.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-tls.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfssl_la-tls13.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": warning: [0m[1m[0;1;35munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0m
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35m[0mwarning: 
Step #12 - "compile-honggfuzz-address-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[1m
Step #12 - "compile-honggfuzz-address-x86_64": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64":   CCLD     src/libwolfssl.la
Step #12 - "compile-honggfuzz-address-x86_64": make[2]: Leaving directory '/src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: Leaving directory '/src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": ++ realpath .
Step #12 - "compile-honggfuzz-address-x86_64": + export 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -I /src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": + CFLAGS='-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -I /src/wolfssl'
Step #12 - "compile-honggfuzz-address-x86_64": ++ realpath src/.libs/
Step #12 - "compile-honggfuzz-address-x86_64": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #12 - "compile-honggfuzz-address-x86_64": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #12 - "compile-honggfuzz-address-x86_64": + cd /src/wolfmqtt/
Step #12 - "compile-honggfuzz-address-x86_64": + ./autogen.sh
Step #12 - "compile-honggfuzz-address-x86_64": Making missing build-aux directory.
Step #12 - "compile-honggfuzz-address-x86_64": Touching missing build-aux/config.rpath file.
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: Entering directory `.'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: configure.ac: tracing
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #12 - "compile-honggfuzz-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:46: installing 'build-aux/compile'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:21: installing 'build-aux/config.guess'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:21: installing 'build-aux/config.sub'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:24: installing 'build-aux/install-sh'
Step #12 - "compile-honggfuzz-address-x86_64": configure.ac:24: installing 'build-aux/missing'
Step #12 - "compile-honggfuzz-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #12 - "compile-honggfuzz-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #12 - "compile-honggfuzz-address-x86_64": autoreconf: Leaving directory `.'
Step #12 - "compile-honggfuzz-address-x86_64": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #12 - "compile-honggfuzz-address-x86_64": checking for pkg-config... /usr/bin/pkg-config
Step #12 - "compile-honggfuzz-address-x86_64": checking pkg-config is at least version 0.9.0... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #12 - "compile-honggfuzz-address-x86_64": checking whether build environment is sane... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #12 - "compile-honggfuzz-address-x86_64": checking for gawk... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for mawk... mawk
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make sets $(MAKE)... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports nested variables... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #12 - "compile-honggfuzz-address-x86_64": checking how to print strings... printf
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #12 - "compile-honggfuzz-address-x86_64": checking for gcc... clang
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the C compiler works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for C compiler default output file name... a.out
Step #12 - "compile-honggfuzz-address-x86_64": checking for suffix of executables... 
Step #12 - "compile-honggfuzz-address-x86_64": checking whether we are cross compiling... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for suffix of object files... o
Step #12 - "compile-honggfuzz-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang accepts -g... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for clang option to accept ISO C89... none needed
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang understands -c and -o together... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking dependency style of clang... gcc3
Step #12 - "compile-honggfuzz-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #12 - "compile-honggfuzz-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #12 - "compile-honggfuzz-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #12 - "compile-honggfuzz-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #12 - "compile-honggfuzz-address-x86_64": checking for ld used by clang... /usr/bin/ld
Step #12 - "compile-honggfuzz-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #12 - "compile-honggfuzz-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #12 - "compile-honggfuzz-address-x86_64": checking whether ln -s works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #12 - "compile-honggfuzz-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #12 - "compile-honggfuzz-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #12 - "compile-honggfuzz-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #12 - "compile-honggfuzz-address-x86_64": checking for objdump... objdump
Step #12 - "compile-honggfuzz-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #12 - "compile-honggfuzz-address-x86_64": checking for dlltool... no
Step #12 - "compile-honggfuzz-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #12 - "compile-honggfuzz-address-x86_64": checking for ar... ar
Step #12 - "compile-honggfuzz-address-x86_64": checking for archiver @FILE support... @
Step #12 - "compile-honggfuzz-address-x86_64": checking for strip... strip
Step #12 - "compile-honggfuzz-address-x86_64": checking for ranlib... ranlib
Step #12 - "compile-honggfuzz-address-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #12 - "compile-honggfuzz-address-x86_64": checking for sysroot... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for a working dd... /usr/bin/dd
Step #12 - "compile-honggfuzz-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #12 - "compile-honggfuzz-address-x86_64": checking for mt... no
Step #12 - "compile-honggfuzz-address-x86_64": checking if : is a manifest tool... no
Step #12 - "compile-honggfuzz-address-x86_64": checking how to run the C preprocessor... clang -E
Step #12 - "compile-honggfuzz-address-x86_64": checking for ANSI C header files... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/types.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/stat.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stdlib.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for string.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for memory.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for strings.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for inttypes.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stdint.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for unistd.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for dlfcn.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for objdir... .libs
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang static flag -static works... no
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -c -o file.o... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #12 - "compile-honggfuzz-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #12 - "compile-honggfuzz-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #12 - "compile-honggfuzz-address-x86_64": checking whether stripping libraries is possible... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking if libtool supports shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether to build shared libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether to build static libraries... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the -Werror option is usable... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for simple visibility declarations... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gcc... (cached) clang
Step #12 - "compile-honggfuzz-address-x86_64": checking whether we are using the GNU C compiler... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang accepts -g... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for clang option to accept ISO C89... (cached) none needed
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang understands -c and -o together... (cached) yes
Step #12 - "compile-honggfuzz-address-x86_64": checking dependency style of clang... (cached) gcc3
Step #12 - "compile-honggfuzz-address-x86_64": checking size of long long... 8
Step #12 - "compile-honggfuzz-address-x86_64": checking size of long... 8
Step #12 - "compile-honggfuzz-address-x86_64": checking arpa/inet.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking arpa/inet.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for arpa/inet.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking fcntl.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking fcntl.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for fcntl.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking limits.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking limits.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for limits.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netdb.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netdb.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for netdb.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netinet/in.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking netinet/in.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for netinet/in.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stddef.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking stddef.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for stddef.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking time.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking time.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for time.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/ioctl.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/ioctl.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/ioctl.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/socket.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/socket.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/socket.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/time.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/time.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/time.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking errno.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking errno.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for errno.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/un.h usability... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking sys/un.h presence... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for sys/un.h... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gethostbyname... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for getaddrinfo... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for gettimeofday... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for inet_ntoa... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for memset... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for socket... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for signal... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for rand... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for socket in -lnetwork... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for wolfSSL... configure: prefix NONE
Step #12 - "compile-honggfuzz-address-x86_64": checking for debug... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether clang is Clang... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #12 - "compile-honggfuzz-address-x86_64": checking whether more special flags are required for pthreads... no
Step #12 - "compile-honggfuzz-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for wolfCrypt_Init in -lwolfssl... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking for vcs system... git
Step #12 - "compile-honggfuzz-address-x86_64": checking for vcs checkout... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -Werror... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether the linker accepts -pie... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wredundant-decls... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #12 - "compile-honggfuzz-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #12 - "compile-honggfuzz-address-x86_64": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #12 - "compile-honggfuzz-address-x86_64": checking the number of available CPUs... 32
Step #12 - "compile-honggfuzz-address-x86_64": configure: adding automake macro support
Step #12 - "compile-honggfuzz-address-x86_64": configure: creating aminclude.am
Step #12 - "compile-honggfuzz-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #12 - "compile-honggfuzz-address-x86_64": checking that generated files are newer than configure... done
Step #12 - "compile-honggfuzz-address-x86_64": configure: creating ./config.status
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating Makefile
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating wolfmqtt/version.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: creating src/config.h
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing depfiles commands
Step #12 - "compile-honggfuzz-address-x86_64": config.status: executing libtool commands
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": Running make clean...
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": Generating user options header...
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fsanitize=address, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fsanitize-address-use-after-scope, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": not outputting (N)DEBUG to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64": ---
Step #12 - "compile-honggfuzz-address-x86_64": Configuration summary for wolfmqtt version 1.20.0
Step #12 - "compile-honggfuzz-address-x86_64": 
Step #12 - "compile-honggfuzz-address-x86_64":    * Installation prefix:       /usr/local
Step #12 - "compile-honggfuzz-address-x86_64":    * System type:               pc-linux-gnu
Step #12 - "compile-honggfuzz-address-x86_64":    * Host CPU:                  x86_64
Step #12 - "compile-honggfuzz-address-x86_64":    * C Compiler:                clang
Step #12 - "compile-honggfuzz-address-x86_64":    * C Flags:                   -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #12 - "compile-honggfuzz-address-x86_64":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #12 - "compile-honggfuzz-address-x86_64":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #12 - "compile-honggfuzz-address-x86_64":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #12 - "compile-honggfuzz-address-x86_64":    * Disconnect Callback:       yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Error Strings:             yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Enable MQTT-SN:            no
Step #12 - "compile-honggfuzz-address-x86_64":    * Enable MQTT v5.0:          yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Property Callback:         yes
Step #12 - "compile-honggfuzz-address-x86_64":    * Examples:                  no
Step #12 - "compile-honggfuzz-address-x86_64":    * Non-Blocking:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * STDIN Capture:             yes
Step #12 - "compile-honggfuzz-address-x86_64":    * TLS:                       yes
Step #12 - "compile-honggfuzz-address-x86_64":    * CURL:                      no
Step #12 - "compile-honggfuzz-address-x86_64":    * Multi-thread:              no
Step #12 - "compile-honggfuzz-address-x86_64":    * Stress:                    no
Step #12 - "compile-honggfuzz-address-x86_64":    * WebSocket:                 no
Step #12 - "compile-honggfuzz-address-x86_64": ++ nproc
Step #12 - "compile-honggfuzz-address-x86_64": + make -j32
Step #12 - "compile-honggfuzz-address-x86_64": make -j33  all-am
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: Entering directory '/src/wolfmqtt'
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #12 - "compile-honggfuzz-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64": 3 warnings generated.
Step #12 - "compile-honggfuzz-address-x86_64":   CCLD     src/libwolfmqtt.la
Step #12 - "compile-honggfuzz-address-x86_64": make[1]: Leaving directory '/src/wolfmqtt'
Step #12 - "compile-honggfuzz-address-x86_64": + clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-coverage=trace-pc-guard,indirect-calls,trace-cmp -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a /usr/lib/libFuzzingEngine.a -o /workspace/out/honggfuzz-address-x86_64/wolfmqtt-fuzzer
Finished Step #12 - "compile-honggfuzz-address-x86_64"
Starting Step #13 - "build-check-honggfuzz-address-x86_64"
Step #13 - "build-check-honggfuzz-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #13 - "build-check-honggfuzz-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpb77ma7x9/wolfmqtt-fuzzer
Finished Step #13 - "build-check-honggfuzz-address-x86_64"
Starting Step #14
Step #14: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #14
Starting Step #15
Step #15: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #15:   adding: honggfuzz (deflated 66%)
Step #15:   adding: llvm-symbolizer (deflated 65%)
Step #15:   adding: wolfmqtt-fuzzer (deflated 62%)
Finished Step #15
Starting Step #16
Step #16: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #16:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #16:                                  Dload  Upload   Total   Spent    Left  Speed
Step #16:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3645 --:--:-- --:--:-- --:--:--  3627100   653    0     0  100   653      0   3644 --:--:-- --:--:-- --:--:--  3627
Finished Step #16
Starting Step #17
Step #17: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #17:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #17:                                  Dload  Upload   Total   Spent    Left  Speed
Step #17:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 5185k    0     0  100 5185k      0  21.1M --:--:-- --:--:-- --:--:-- 21.1M
Finished Step #17
Starting Step #18
Step #18: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #18:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #18:                                  Dload  Upload   Total   Spent    Left  Speed
Step #18:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     62 --:--:-- --:--:-- --:--:--    62
Finished Step #18
Starting Step #19
Step #19: Already have image (with digest): gcr.io/cloud-builders/curl
Step #19:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #19:                                  Dload  Upload   Total   Spent    Left  Speed
Step #19:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    33    0     0  100    33      0    182 --:--:-- --:--:-- --:--:--   182
Finished Step #19
Starting Step #20
Step #20: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #20
Starting Step #21 - "compile-libfuzzer-address-x86_64"
Step #21 - "compile-libfuzzer-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #21 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #21 - "compile-libfuzzer-address-x86_64": vm.mmap_rnd_bits = 28
Step #21 - "compile-libfuzzer-address-x86_64": Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
Step #21 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #21 - "compile-libfuzzer-address-x86_64": CC=clang
Step #21 - "compile-libfuzzer-address-x86_64": CXX=clang++
Step #21 - "compile-libfuzzer-address-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link
Step #21 - "compile-libfuzzer-address-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
Step #21 - "compile-libfuzzer-address-x86_64": RUSTFLAGS=--cfg fuzzing -Zsanitizer=address -Cdebuginfo=1 -Cforce-frame-pointers
Step #21 - "compile-libfuzzer-address-x86_64": ---------------------------------------------------------------
Step #21 - "compile-libfuzzer-address-x86_64": + cd /src/wolfssl/
Step #21 - "compile-libfuzzer-address-x86_64": + autoreconf -ivf
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: Entering directory `.'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: configure.ac: tracing
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: configure.ac: creating directory build-aux
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:25: installing 'build-aux/compile'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:27: installing 'build-aux/config.guess'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:27: installing 'build-aux/config.sub'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:31: installing 'build-aux/install-sh'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:31: installing 'build-aux/missing'
Step #21 - "compile-libfuzzer-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #21 - "compile-libfuzzer-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: Leaving directory `.'
Step #21 - "compile-libfuzzer-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link = *sanitize=memory* ]]
Step #21 - "compile-libfuzzer-address-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link = *-m32* ]]
Step #21 - "compile-libfuzzer-address-x86_64": + ./configure --enable-static --disable-crypttests --disable-examples
Step #21 - "compile-libfuzzer-address-x86_64": checking whether to enable maintainer-specific portions of Makefiles... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for gcc... clang
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the C compiler works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for C compiler default output file name... a.out
Step #21 - "compile-libfuzzer-address-x86_64": checking for suffix of executables... 
Step #21 - "compile-libfuzzer-address-x86_64": checking whether we are cross compiling... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for suffix of object files... o
Step #21 - "compile-libfuzzer-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang accepts -g... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for clang option to accept ISO C89... none needed
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang understands -c and -o together... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #21 - "compile-libfuzzer-address-x86_64": checking whether build environment is sane... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #21 - "compile-libfuzzer-address-x86_64": checking for gawk... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for mawk... mawk
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make sets $(MAKE)... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports nested variables... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #21 - "compile-libfuzzer-address-x86_64": checking dependency style of clang... gcc3
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking how to print strings... printf
Step #21 - "compile-libfuzzer-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #21 - "compile-libfuzzer-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #21 - "compile-libfuzzer-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #21 - "compile-libfuzzer-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #21 - "compile-libfuzzer-address-x86_64": checking for ld used by clang... /usr/bin/ld
Step #21 - "compile-libfuzzer-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #21 - "compile-libfuzzer-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #21 - "compile-libfuzzer-address-x86_64": checking whether ln -s works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #21 - "compile-libfuzzer-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #21 - "compile-libfuzzer-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #21 - "compile-libfuzzer-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #21 - "compile-libfuzzer-address-x86_64": checking for objdump... objdump
Step #21 - "compile-libfuzzer-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #21 - "compile-libfuzzer-address-x86_64": checking for dlltool... no
Step #21 - "compile-libfuzzer-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #21 - "compile-libfuzzer-address-x86_64": checking for ar... ar
Step #21 - "compile-libfuzzer-address-x86_64": checking for archiver @FILE support... @
Step #21 - "compile-libfuzzer-address-x86_64": checking for strip... strip
Step #21 - "compile-libfuzzer-address-x86_64": checking for ranlib... ranlib
Step #21 - "compile-libfuzzer-address-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #21 - "compile-libfuzzer-address-x86_64": checking for sysroot... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for a working dd... /usr/bin/dd
Step #21 - "compile-libfuzzer-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #21 - "compile-libfuzzer-address-x86_64": checking for mt... no
Step #21 - "compile-libfuzzer-address-x86_64": checking if : is a manifest tool... no
Step #21 - "compile-libfuzzer-address-x86_64": checking how to run the C preprocessor... clang -E
Step #21 - "compile-libfuzzer-address-x86_64": checking for ANSI C header files... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/types.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/stat.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stdlib.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for string.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for memory.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for strings.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for inttypes.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stdint.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for unistd.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for dlfcn.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for objdir... .libs
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang static flag -static works... no
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -c -o file.o... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #21 - "compile-libfuzzer-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #21 - "compile-libfuzzer-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #21 - "compile-libfuzzer-address-x86_64": checking whether stripping libraries is possible... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if libtool supports shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether to build shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether to build static libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the -Werror option is usable... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for simple visibility declarations... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking size of long long... 8
Step #21 - "compile-libfuzzer-address-x86_64": checking size of long... 8
Step #21 - "compile-libfuzzer-address-x86_64": checking size of time_t... 8
Step #21 - "compile-libfuzzer-address-x86_64": checking for __uint128_t... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking arpa/inet.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking arpa/inet.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for arpa/inet.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking fcntl.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking fcntl.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for fcntl.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking limits.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking limits.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for limits.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netdb.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netdb.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for netdb.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netinet/in.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netinet/in.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for netinet/in.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stddef.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stddef.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stddef.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking time.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking time.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for time.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/ioctl.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/ioctl.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/ioctl.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/socket.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/socket.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/socket.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/time.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/time.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/time.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking errno.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking errno.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for errno.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/un.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/un.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/un.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking ctype.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking ctype.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for ctype.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for socket in -lnetwork... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether byte ordering is bigendian... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for __atomic... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stdatomic.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stdatomic.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stdatomic.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking assert.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking assert.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for assert.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gethostbyname... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for getaddrinfo... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gettimeofday... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gmtime_r... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gmtime_s... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for inet_ntoa... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for memset... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for socket... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for strftime... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for atexit... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for isascii... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for getpid... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for getrandom... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether gethostbyname is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether getaddrinfo is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether gettimeofday is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether gmtime_r is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether gmtime_s is declared... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether inet_ntoa is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether memset is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether socket is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether strftime is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether atexit is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether isascii is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether getpid is declared... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for size_t... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for uint8_t... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for uintptr_t... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking dependency style of clang... gcc3
Step #21 - "compile-libfuzzer-address-x86_64": checking for thread local storage (TLS) class... _Thread_local
Step #21 - "compile-libfuzzer-address-x86_64": checking for debug... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang is Clang... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #21 - "compile-libfuzzer-address-x86_64": checking whether more special flags are required for pthreads... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for library containing clock_gettime... none required
Step #21 - "compile-libfuzzer-address-x86_64": checking for cos in -lm... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for library containing gethostbyname... none required
Step #21 - "compile-libfuzzer-address-x86_64": checking for library containing socket... none required
Step #21 - "compile-libfuzzer-address-x86_64": checking for vcs system... git
Step #21 - "compile-libfuzzer-address-x86_64": checking for vcs checkout... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -Werror... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -pie... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #21 - "compile-libfuzzer-address-x86_64": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #21 - "compile-libfuzzer-address-x86_64": checking the number of available CPUs... 32
Step #21 - "compile-libfuzzer-address-x86_64": configure: adding automake macro support
Step #21 - "compile-libfuzzer-address-x86_64": configure: creating aminclude.am
Step #21 - "compile-libfuzzer-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #21 - "compile-libfuzzer-address-x86_64": checking that generated files are newer than configure... done
Step #21 - "compile-libfuzzer-address-x86_64": configure: creating ./config.status
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating stamp-h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating Makefile
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating wolfssl/version.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating wolfssl/options.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating support/wolfssl.pc
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating debian/control
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating debian/changelog
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating rpm/spec
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating wolfcrypt/test/test_paths.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating scripts/unit.test
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating debian/rules
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating config.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing depfiles commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing libtool commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #21 - "compile-libfuzzer-address-x86_64": configure: ---
Step #21 - "compile-libfuzzer-address-x86_64": configure: Running make clean...
Step #21 - "compile-libfuzzer-address-x86_64": configure: ---
Step #21 - "compile-libfuzzer-address-x86_64": configure: Generating user options header...
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": Configuration summary for wolfssl version 5.8.2
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64":    * Installation prefix:        /usr/local
Step #21 - "compile-libfuzzer-address-x86_64":    * System type:                pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64":    * Host CPU:                   x86_64
Step #21 - "compile-libfuzzer-address-x86_64":    * C Compiler:                 clang
Step #21 - "compile-libfuzzer-address-x86_64":    * C Flags:                    -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link   -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #21 - "compile-libfuzzer-address-x86_64":    * C++ Compiler:               clang++
Step #21 - "compile-libfuzzer-address-x86_64":    * C++ Flags:                  -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
Step #21 - "compile-libfuzzer-address-x86_64":    * CPP Flags:                  
Step #21 - "compile-libfuzzer-address-x86_64":    * CCAS Flags:                 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link  
Step #21 - "compile-libfuzzer-address-x86_64":    * LD Flags:                   
Step #21 - "compile-libfuzzer-address-x86_64":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #21 - "compile-libfuzzer-address-x86_64":    * Library Suffix:             
Step #21 - "compile-libfuzzer-address-x86_64":    * Debug enabled:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * Coverage enabled:           
Step #21 - "compile-libfuzzer-address-x86_64":    * Warnings as failure:        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * make -j:                    33
Step #21 - "compile-libfuzzer-address-x86_64":    * VCS checkout:               yes
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64":    Features 
Step #21 - "compile-libfuzzer-address-x86_64":    * Experimental settings:      Forbidden
Step #21 - "compile-libfuzzer-address-x86_64":    * FIPS:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Single threaded:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * Filesystem:                 yes
Step #21 - "compile-libfuzzer-address-x86_64":    * OpenSSH Build:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * OpenSSL Extra API:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * OpenSSL Coexist:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * Old Names:                  yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Max Strength Build:         no
Step #21 - "compile-libfuzzer-address-x86_64":    * Distro Build:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * Reproducible Build:         no
Step #21 - "compile-libfuzzer-address-x86_64":    * Side-channel Hardening:     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Single Precision Math:      no
Step #21 - "compile-libfuzzer-address-x86_64":    * SP implementation:          all
Step #21 - "compile-libfuzzer-address-x86_64":    * Fast Math:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * Heap Math:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * Assembly Allowed:           yes
Step #21 - "compile-libfuzzer-address-x86_64":    * sniffer:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * snifftest:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * ARC4:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES:                        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-NI:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * AVX for AES:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-CBC:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-CBC length checks:      no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-GCM:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-GCM streaming:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-CCM:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-CTR:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-CFB:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-OFB:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-XTS:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-XTS streaming:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-SIV:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES-EAX:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES Bitspliced:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * AES Key Wrap:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * ARIA:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * ASCON:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * DES3:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * DES3 TLS Suites:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * Camellia:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * CUDA:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM4-ECB:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM4-CBC:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM4-CTR:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM4-GCM:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM4-CCM:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * NULL Cipher:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * MD2:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * MD4:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * MD5:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * RIPEMD:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA:                        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA-224:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA-256:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA-384:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA-512:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHA3:                       yes
Step #21 - "compile-libfuzzer-address-x86_64":    * SHAKE128:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * SHAKE256:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM3:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * BLAKE2:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * BLAKE2S:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * SipHash:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * CMAC:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * keygen:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * acert:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * certgen:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * certreq:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * certext:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * certgencache:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * CHACHA:                     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * XCHACHA:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * Hash DRBG:                  yes
Step #21 - "compile-libfuzzer-address-x86_64":    * MmemUse Entropy:
Step #21 - "compile-libfuzzer-address-x86_64":    * (AKA: wolfEntropy):         no
Step #21 - "compile-libfuzzer-address-x86_64":    * PWDBASED:                   yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Encrypted keys:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * scrypt:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfCrypt Only:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * HKDF:                       yes
Step #21 - "compile-libfuzzer-address-x86_64":    * HPKE:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * X9.63 KDF:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * SRTP-KDF:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * PSK:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Poly1305:                   yes
Step #21 - "compile-libfuzzer-address-x86_64":    * LEANPSK:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * LEANTLS:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * RSA:                        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * RSA-PSS:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * DSA:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * DH:                         yes
Step #21 - "compile-libfuzzer-address-x86_64":    * DH Default Parameters:      yes
Step #21 - "compile-libfuzzer-address-x86_64":    * ECC:                        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * ECC Custom Curves:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * ECC Minimum Bits:           224
Step #21 - "compile-libfuzzer-address-x86_64":    * FPECC:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * ECC_ENCRYPT:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * Brainpool:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * SM2:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * CURVE25519:                 no
Step #21 - "compile-libfuzzer-address-x86_64":    * ED25519:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * ED25519 streaming:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * CURVE448:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * ED448:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * ED448 streaming:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * LMS:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * LMS wolfSSL impl:           no
Step #21 - "compile-libfuzzer-address-x86_64":    * XMSS:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * XMSS wolfSSL impl:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * MLKEM:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * MLKEM wolfSSL impl:         no
Step #21 - "compile-libfuzzer-address-x86_64":    * DILITHIUM:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * ECCSI                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * SAKKE                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * ASN:                        yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Anonymous cipher:           no
Step #21 - "compile-libfuzzer-address-x86_64":    * CODING:                     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * MEMORY:                     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * I/O POOL:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfSentry:                 no
Step #21 - "compile-libfuzzer-address-x86_64":    * LIGHTY:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * WPA Supplicant:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * HAPROXY:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * STUNNEL:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * tcpdump:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * libssh2:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * ntp:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * rsyslog:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * Apache httpd:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * NGINX:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * OpenResty:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * ASIO:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * LIBWEBSOCKETS:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * Qt:                         no
Step #21 - "compile-libfuzzer-address-x86_64":    * Qt Unit Testing:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * SIGNAL:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * chrony:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * strongSwan:                 no
Step #21 - "compile-libfuzzer-address-x86_64":    * OpenLDAP:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * hitch:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * memcached:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * Mosquitto                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * ERROR_STRINGS:              yes
Step #21 - "compile-libfuzzer-address-x86_64":    * DTLS:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * DTLS v1.3:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * SCTP:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * SRTP:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Indefinite Length:          no
Step #21 - "compile-libfuzzer-address-x86_64":    * Multicast:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * SSL v3.0 (Old):             no
Step #21 - "compile-libfuzzer-address-x86_64":    * TLS v1.0 (Old):             no
Step #21 - "compile-libfuzzer-address-x86_64":    * TLS v1.1 (Old):             no
Step #21 - "compile-libfuzzer-address-x86_64":    * TLS v1.2:                   yes
Step #21 - "compile-libfuzzer-address-x86_64":    * TLS v1.3:                   yes
Step #21 - "compile-libfuzzer-address-x86_64":    * RPK:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Post-handshake Auth:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Early Data:                 no
Step #21 - "compile-libfuzzer-address-x86_64":    * QUIC:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Send State in HRR Cookie:   undefined
Step #21 - "compile-libfuzzer-address-x86_64":    * OCSP:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * OCSP Stapling:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * OCSP Stapling v2:           no
Step #21 - "compile-libfuzzer-address-x86_64":    * CRL:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * CRL-MONITOR:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * Persistent session cache:   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Persistent cert    cache:   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Atomic User Record Layer:   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Public Key Callbacks:       no
Step #21 - "compile-libfuzzer-address-x86_64":    * libxmss:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * liblms:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * liboqs:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * Whitewood netRandom:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Server Name Indication:     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * ALPN:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Maximum Fragment Length:    no
Step #21 - "compile-libfuzzer-address-x86_64":    * Trusted CA Indication:      no
Step #21 - "compile-libfuzzer-address-x86_64":    * Truncated HMAC:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * Supported Elliptic Curves:  yes
Step #21 - "compile-libfuzzer-address-x86_64":    * FFDHE only in client:       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Session Ticket:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * Extended Master Secret:     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Renegotiation Indication:   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Secure Renegotiation:       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Fallback SCSV:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * Keying Material Exporter:   no
Step #21 - "compile-libfuzzer-address-x86_64":    * All TLS Extensions:         no
Step #21 - "compile-libfuzzer-address-x86_64":    * S/MIME:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * PKCS#7:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * PKCS#8:                     yes
Step #21 - "compile-libfuzzer-address-x86_64":    * PKCS#11:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * PKCS#12:                    yes
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfSSH:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfEngine:                 no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfTPM:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfCLU:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * wolfSCEP:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Secure Remote Password:     no
Step #21 - "compile-libfuzzer-address-x86_64":    * Small Stack:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * Linux Kernel Module:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * valgrind unit tests:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * LIBZ:                       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Examples:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Crypt tests:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * Stack sizes in tests:       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Heap stats in tests:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Asynchronous Crypto:        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Asynchronous Crypto (sim):  no
Step #21 - "compile-libfuzzer-address-x86_64":    * Cavium Nitrox:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * Cavium Octeon (Sync):       no
Step #21 - "compile-libfuzzer-address-x86_64":    * Intel Quick Assist:         no
Step #21 - "compile-libfuzzer-address-x86_64":    * ARM ASM:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * ARM ASM SHA512/SHA3 Crypto  no
Step #21 - "compile-libfuzzer-address-x86_64":    * ARM ASM SM3/SM4 Crypto      no
Step #21 - "compile-libfuzzer-address-x86_64":    * RISC-V ASM                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * PPC32 ASM                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Write duplicate:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * Xilinx Hardware Acc.:       no
Step #21 - "compile-libfuzzer-address-x86_64":    * C89:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * Inline Code:                yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Linux AF_ALG:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * Linux KCAPI:                no
Step #21 - "compile-libfuzzer-address-x86_64":    * Linux devcrypto:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * PK callbacks:               no
Step #21 - "compile-libfuzzer-address-x86_64":    * Crypto callbacks:           no
Step #21 - "compile-libfuzzer-address-x86_64":    * i.MX CAAM:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * IoT-Safe:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * IoT-Safe HWRNG:             no
Step #21 - "compile-libfuzzer-address-x86_64":    * NXP SE050:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * TROPIC01:                   no
Step #21 - "compile-libfuzzer-address-x86_64":    * Maxim Integrated MAXQ10XX:  no
Step #21 - "compile-libfuzzer-address-x86_64":    * PSA:                        no
Step #21 - "compile-libfuzzer-address-x86_64":    * System CA certs:            yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Dual alg cert support:      no
Step #21 - "compile-libfuzzer-address-x86_64":    * ERR Queues per Thread:      yes
Step #21 - "compile-libfuzzer-address-x86_64":    * rwlock:                     no
Step #21 - "compile-libfuzzer-address-x86_64":    * keylog export:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * AutoSAR :                   no
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' 'CC=clang' 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link'
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #21 - "compile-libfuzzer-address-x86_64":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #21 - "compile-libfuzzer-address-x86_64": ++ nproc
Step #21 - "compile-libfuzzer-address-x86_64": + make -j32
Step #21 - "compile-libfuzzer-address-x86_64": make -j33  all-recursive
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: Entering directory '/src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": make[2]: Entering directory '/src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-internal.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-wolfio.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-keys.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-ssl.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-tls.lo
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: [0mwarning: [1m[0munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][1m[0munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]
Step #21 - "compile-libfuzzer-address-x86_64": [0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0;1;35m
Step #21 - "compile-libfuzzer-address-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35mwarning: [0mwarning: [0m
Step #21 - "compile-libfuzzer-address-x86_64": [0m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35m[0m
Step #21 - "compile-libfuzzer-address-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0;1;35m[0mwarning: [1m[0munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][1m[0munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0;1;35m[0mwarning: [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0;1;35m
Step #21 - "compile-libfuzzer-address-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35m[0m
Step #21 - "compile-libfuzzer-address-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0;1;35mwarning: [0m[1m[0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfssl_la-tls13.lo
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64":   CCLD     src/libwolfssl.la
Step #21 - "compile-libfuzzer-address-x86_64": make[2]: Leaving directory '/src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: Leaving directory '/src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": ++ realpath .
Step #21 - "compile-libfuzzer-address-x86_64": + export 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": + CFLAGS='-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #21 - "compile-libfuzzer-address-x86_64": ++ realpath src/.libs/
Step #21 - "compile-libfuzzer-address-x86_64": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #21 - "compile-libfuzzer-address-x86_64": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #21 - "compile-libfuzzer-address-x86_64": + cd /src/wolfmqtt/
Step #21 - "compile-libfuzzer-address-x86_64": + ./autogen.sh
Step #21 - "compile-libfuzzer-address-x86_64": Making missing build-aux directory.
Step #21 - "compile-libfuzzer-address-x86_64": Touching missing build-aux/config.rpath file.
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: Entering directory `.'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: configure.ac: not using Gettext
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: aclocal --force -I m4
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: configure.ac: tracing
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: libtoolize --copy --force
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #21 - "compile-libfuzzer-address-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:46: installing 'build-aux/compile'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:21: installing 'build-aux/config.guess'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:21: installing 'build-aux/config.sub'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:24: installing 'build-aux/install-sh'
Step #21 - "compile-libfuzzer-address-x86_64": configure.ac:24: installing 'build-aux/missing'
Step #21 - "compile-libfuzzer-address-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #21 - "compile-libfuzzer-address-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #21 - "compile-libfuzzer-address-x86_64": autoreconf: Leaving directory `.'
Step #21 - "compile-libfuzzer-address-x86_64": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #21 - "compile-libfuzzer-address-x86_64": checking for pkg-config... /usr/bin/pkg-config
Step #21 - "compile-libfuzzer-address-x86_64": checking pkg-config is at least version 0.9.0... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #21 - "compile-libfuzzer-address-x86_64": checking whether build environment is sane... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #21 - "compile-libfuzzer-address-x86_64": checking for gawk... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for mawk... mawk
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make sets $(MAKE)... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports nested variables... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking how to create a ustar tar archive... gnutar
Step #21 - "compile-libfuzzer-address-x86_64": checking how to print strings... printf
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #21 - "compile-libfuzzer-address-x86_64": checking for gcc... clang
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the C compiler works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for C compiler default output file name... a.out
Step #21 - "compile-libfuzzer-address-x86_64": checking for suffix of executables... 
Step #21 - "compile-libfuzzer-address-x86_64": checking whether we are cross compiling... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for suffix of object files... o
Step #21 - "compile-libfuzzer-address-x86_64": checking whether we are using the GNU C compiler... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang accepts -g... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for clang option to accept ISO C89... none needed
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang understands -c and -o together... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking dependency style of clang... gcc3
Step #21 - "compile-libfuzzer-address-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #21 - "compile-libfuzzer-address-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #21 - "compile-libfuzzer-address-x86_64": checking for egrep... /usr/bin/grep -E
Step #21 - "compile-libfuzzer-address-x86_64": checking for fgrep... /usr/bin/grep -F
Step #21 - "compile-libfuzzer-address-x86_64": checking for ld used by clang... /usr/bin/ld
Step #21 - "compile-libfuzzer-address-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #21 - "compile-libfuzzer-address-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #21 - "compile-libfuzzer-address-x86_64": checking whether ln -s works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking the maximum length of command line arguments... 1572864
Step #21 - "compile-libfuzzer-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #21 - "compile-libfuzzer-address-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #21 - "compile-libfuzzer-address-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #21 - "compile-libfuzzer-address-x86_64": checking for objdump... objdump
Step #21 - "compile-libfuzzer-address-x86_64": checking how to recognize dependent libraries... pass_all
Step #21 - "compile-libfuzzer-address-x86_64": checking for dlltool... no
Step #21 - "compile-libfuzzer-address-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #21 - "compile-libfuzzer-address-x86_64": checking for ar... ar
Step #21 - "compile-libfuzzer-address-x86_64": checking for archiver @FILE support... @
Step #21 - "compile-libfuzzer-address-x86_64": checking for strip... strip
Step #21 - "compile-libfuzzer-address-x86_64": checking for ranlib... ranlib
Step #21 - "compile-libfuzzer-address-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #21 - "compile-libfuzzer-address-x86_64": checking for sysroot... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for a working dd... /usr/bin/dd
Step #21 - "compile-libfuzzer-address-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #21 - "compile-libfuzzer-address-x86_64": checking for mt... no
Step #21 - "compile-libfuzzer-address-x86_64": checking if : is a manifest tool... no
Step #21 - "compile-libfuzzer-address-x86_64": checking how to run the C preprocessor... clang -E
Step #21 - "compile-libfuzzer-address-x86_64": checking for ANSI C header files... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/types.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/stat.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stdlib.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for string.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for memory.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for strings.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for inttypes.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stdint.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for unistd.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for dlfcn.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for objdir... .libs
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang static flag -static works... no
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -c -o file.o... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether -lc should be explicitly linked in... no
Step #21 - "compile-libfuzzer-address-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #21 - "compile-libfuzzer-address-x86_64": checking how to hardcode library paths into programs... immediate
Step #21 - "compile-libfuzzer-address-x86_64": checking whether stripping libraries is possible... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking if libtool supports shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether to build shared libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether to build static libraries... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the -Werror option is usable... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for simple visibility declarations... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether make supports nested variables... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gcc... (cached) clang
Step #21 - "compile-libfuzzer-address-x86_64": checking whether we are using the GNU C compiler... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang accepts -g... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for clang option to accept ISO C89... (cached) none needed
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang understands -c and -o together... (cached) yes
Step #21 - "compile-libfuzzer-address-x86_64": checking dependency style of clang... (cached) gcc3
Step #21 - "compile-libfuzzer-address-x86_64": checking size of long long... 8
Step #21 - "compile-libfuzzer-address-x86_64": checking size of long... 8
Step #21 - "compile-libfuzzer-address-x86_64": checking arpa/inet.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking arpa/inet.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for arpa/inet.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking fcntl.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking fcntl.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for fcntl.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking limits.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking limits.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for limits.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netdb.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netdb.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for netdb.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netinet/in.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking netinet/in.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for netinet/in.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stddef.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking stddef.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for stddef.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking time.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking time.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for time.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/ioctl.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/ioctl.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/ioctl.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/socket.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/socket.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/socket.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/time.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/time.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/time.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking errno.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking errno.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for errno.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/un.h usability... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking sys/un.h presence... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for sys/un.h... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gethostbyname... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for getaddrinfo... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for gettimeofday... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for inet_ntoa... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for memset... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for socket... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for signal... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for rand... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for socket in -lnetwork... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for wolfSSL... configure: prefix NONE
Step #21 - "compile-libfuzzer-address-x86_64": checking for debug... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether clang is Clang... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #21 - "compile-libfuzzer-address-x86_64": checking whether more special flags are required for pthreads... no
Step #21 - "compile-libfuzzer-address-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for wolfCrypt_Init in -lwolfssl... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking for vcs system... git
Step #21 - "compile-libfuzzer-address-x86_64": checking for vcs checkout... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -Werror... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether the linker accepts -pie... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Werror... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wall... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wextra... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Waddress... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wredundant-decls... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wundef... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #21 - "compile-libfuzzer-address-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #21 - "compile-libfuzzer-address-x86_64": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #21 - "compile-libfuzzer-address-x86_64": checking the number of available CPUs... 32
Step #21 - "compile-libfuzzer-address-x86_64": configure: adding automake macro support
Step #21 - "compile-libfuzzer-address-x86_64": configure: creating aminclude.am
Step #21 - "compile-libfuzzer-address-x86_64": configure: added jobserver support to make for 33 jobs
Step #21 - "compile-libfuzzer-address-x86_64": checking that generated files are newer than configure... done
Step #21 - "compile-libfuzzer-address-x86_64": configure: creating ./config.status
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating Makefile
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating wolfmqtt/version.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: creating src/config.h
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing depfiles commands
Step #21 - "compile-libfuzzer-address-x86_64": config.status: executing libtool commands
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": Running make clean...
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": Generating user options header...
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fsanitize=address, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fsanitize-address-use-after-scope, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fsanitize=fuzzer-no-link, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": not outputting (N)DEBUG to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": ---
Step #21 - "compile-libfuzzer-address-x86_64": Configuration summary for wolfmqtt version 1.20.0
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64":    * Installation prefix:       /usr/local
Step #21 - "compile-libfuzzer-address-x86_64":    * System type:               pc-linux-gnu
Step #21 - "compile-libfuzzer-address-x86_64":    * Host CPU:                  x86_64
Step #21 - "compile-libfuzzer-address-x86_64":    * C Compiler:                clang
Step #21 - "compile-libfuzzer-address-x86_64":    * C Flags:                   -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #21 - "compile-libfuzzer-address-x86_64":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #21 - "compile-libfuzzer-address-x86_64":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #21 - "compile-libfuzzer-address-x86_64":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #21 - "compile-libfuzzer-address-x86_64":    * Disconnect Callback:       yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Error Strings:             yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Enable MQTT-SN:            no
Step #21 - "compile-libfuzzer-address-x86_64":    * Enable MQTT v5.0:          yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Property Callback:         yes
Step #21 - "compile-libfuzzer-address-x86_64":    * Examples:                  no
Step #21 - "compile-libfuzzer-address-x86_64":    * Non-Blocking:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * STDIN Capture:             yes
Step #21 - "compile-libfuzzer-address-x86_64":    * TLS:                       yes
Step #21 - "compile-libfuzzer-address-x86_64":    * CURL:                      no
Step #21 - "compile-libfuzzer-address-x86_64":    * Multi-thread:              no
Step #21 - "compile-libfuzzer-address-x86_64":    * Stress:                    no
Step #21 - "compile-libfuzzer-address-x86_64":    * WebSocket:                 no
Step #21 - "compile-libfuzzer-address-x86_64": ++ nproc
Step #21 - "compile-libfuzzer-address-x86_64": + make -j32
Step #21 - "compile-libfuzzer-address-x86_64": make -j33  all-am
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: Entering directory '/src/wolfmqtt'
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #21 - "compile-libfuzzer-address-x86_64":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #21 - "compile-libfuzzer-address-x86_64": 
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64": 3 warnings generated.
Step #21 - "compile-libfuzzer-address-x86_64":   CCLD     src/libwolfmqtt.la
Step #21 - "compile-libfuzzer-address-x86_64": make[1]: Leaving directory '/src/wolfmqtt'
Step #21 - "compile-libfuzzer-address-x86_64": + clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a -fsanitize=fuzzer -o /workspace/out/libfuzzer-address-x86_64/wolfmqtt-fuzzer
Finished Step #21 - "compile-libfuzzer-address-x86_64"
Starting Step #22 - "build-check-libfuzzer-address-x86_64"
Step #22 - "build-check-libfuzzer-address-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #22 - "build-check-libfuzzer-address-x86_64": INFO: performing bad build checks for /tmp/not-out/tmplm5oi0uv/wolfmqtt-fuzzer
Finished Step #22 - "build-check-libfuzzer-address-x86_64"
Starting Step #23
Step #23: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #23
Starting Step #24
Step #24: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #24:   adding: llvm-symbolizer (deflated 65%)
Step #24:   adding: wolfmqtt-fuzzer (deflated 65%)
Finished Step #24
Starting Step #25
Step #25: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #25:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #25:                                  Dload  Upload   Total   Spent    Left  Speed
Step #25:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3059 --:--:-- --:--:-- --:--:--  3065
Finished Step #25
Starting Step #26
Step #26: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #26:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #26:                                  Dload  Upload   Total   Spent    Left  Speed
Step #26:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 5542k    0     0  100 5542k      0  20.0M --:--:-- --:--:-- --:--:-- 20.0M
Finished Step #26
Starting Step #27
Step #27: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #27:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #27:                                  Dload  Upload   Total   Spent    Left  Speed
Step #27:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     64 --:--:-- --:--:-- --:--:--    65
Finished Step #27
Starting Step #28
Step #28: Already have image (with digest): gcr.io/cloud-builders/curl
Step #28:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #28:                                  Dload  Upload   Total   Spent    Left  Speed
Step #28:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    33    0     0  100    33      0    169 --:--:-- --:--:-- --:--:--   169
Finished Step #28
Starting Step #29
Step #29: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #29
Starting Step #30 - "compile-libfuzzer-address-i386"
Step #30 - "compile-libfuzzer-address-i386": Already have image (with digest): gcr.io/cloud-builders/docker
Step #30 - "compile-libfuzzer-address-i386": ---------------------------------------------------------------
Step #30 - "compile-libfuzzer-address-i386": vm.mmap_rnd_bits = 28
Step #30 - "compile-libfuzzer-address-i386": Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
Step #30 - "compile-libfuzzer-address-i386": ---------------------------------------------------------------
Step #30 - "compile-libfuzzer-address-i386": CC=clang
Step #30 - "compile-libfuzzer-address-i386": CXX=clang++
Step #30 - "compile-libfuzzer-address-i386": CFLAGS=-m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link
Step #30 - "compile-libfuzzer-address-i386": CXXFLAGS=-m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
Step #30 - "compile-libfuzzer-address-i386": RUSTFLAGS=--cfg fuzzing -Cdebuginfo=1 -Cforce-frame-pointers
Step #30 - "compile-libfuzzer-address-i386": ---------------------------------------------------------------
Step #30 - "compile-libfuzzer-address-i386": + cd /src/wolfssl/
Step #30 - "compile-libfuzzer-address-i386": + autoreconf -ivf
Step #30 - "compile-libfuzzer-address-i386": autoreconf: Entering directory `.'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: configure.ac: not using Gettext
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: aclocal --force -I m4
Step #30 - "compile-libfuzzer-address-i386": autoreconf: configure.ac: tracing
Step #30 - "compile-libfuzzer-address-i386": autoreconf: configure.ac: creating directory build-aux
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: libtoolize --copy --force
Step #30 - "compile-libfuzzer-address-i386": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'build-aux/ltmain.sh'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/libtool.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltoptions.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltsugar.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltversion.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: /usr/bin/autoconf --force
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: /usr/bin/autoheader --force
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: automake --add-missing --copy --force-missing
Step #30 - "compile-libfuzzer-address-i386": configure.ac:25: installing 'build-aux/compile'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:27: installing 'build-aux/config.guess'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:27: installing 'build-aux/config.sub'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:31: installing 'build-aux/install-sh'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:31: installing 'build-aux/missing'
Step #30 - "compile-libfuzzer-address-i386": Makefile.am: installing 'build-aux/depcomp'
Step #30 - "compile-libfuzzer-address-i386": parallel-tests: installing 'build-aux/test-driver'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: Leaving directory `.'
Step #30 - "compile-libfuzzer-address-i386": + [[ -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link = *sanitize=memory* ]]
Step #30 - "compile-libfuzzer-address-i386": + [[ -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link = *-m32* ]]
Step #30 - "compile-libfuzzer-address-i386": + ./configure --enable-static --disable-crypttests --disable-examples --disable-fastmath
Step #30 - "compile-libfuzzer-address-i386": checking whether to enable maintainer-specific portions of Makefiles... no
Step #30 - "compile-libfuzzer-address-i386": checking for gcc... clang
Step #30 - "compile-libfuzzer-address-i386": checking whether the C compiler works... yes
Step #30 - "compile-libfuzzer-address-i386": checking for C compiler default output file name... a.out
Step #30 - "compile-libfuzzer-address-i386": checking for suffix of executables... 
Step #30 - "compile-libfuzzer-address-i386": checking whether we are cross compiling... no
Step #30 - "compile-libfuzzer-address-i386": checking for suffix of object files... o
Step #30 - "compile-libfuzzer-address-i386": checking whether we are using the GNU C compiler... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether clang accepts -g... yes
Step #30 - "compile-libfuzzer-address-i386": checking for clang option to accept ISO C89... none needed
Step #30 - "compile-libfuzzer-address-i386": checking whether clang understands -c and -o together... yes
Step #30 - "compile-libfuzzer-address-i386": checking build system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking host system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking target system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking for a BSD-compatible install... /usr/bin/install -c
Step #30 - "compile-libfuzzer-address-i386": checking whether build environment is sane... yes
Step #30 - "compile-libfuzzer-address-i386": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #30 - "compile-libfuzzer-address-i386": checking for gawk... no
Step #30 - "compile-libfuzzer-address-i386": checking for mawk... mawk
Step #30 - "compile-libfuzzer-address-i386": checking whether make sets $(MAKE)... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports the include directive... yes (GNU style)
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports nested variables... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether UID '0' is supported by ustar format... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether GID '0' is supported by ustar format... yes
Step #30 - "compile-libfuzzer-address-i386": checking how to create a ustar tar archive... gnutar
Step #30 - "compile-libfuzzer-address-i386": checking dependency style of clang... gcc3
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports nested variables... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking how to print strings... printf
Step #30 - "compile-libfuzzer-address-i386": checking for a sed that does not truncate output... /usr/bin/sed
Step #30 - "compile-libfuzzer-address-i386": checking for grep that handles long lines and -e... /usr/bin/grep
Step #30 - "compile-libfuzzer-address-i386": checking for egrep... /usr/bin/grep -E
Step #30 - "compile-libfuzzer-address-i386": checking for fgrep... /usr/bin/grep -F
Step #30 - "compile-libfuzzer-address-i386": checking for ld used by clang... /usr/bin/ld
Step #30 - "compile-libfuzzer-address-i386": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #30 - "compile-libfuzzer-address-i386": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #30 - "compile-libfuzzer-address-i386": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #30 - "compile-libfuzzer-address-i386": checking whether ln -s works... yes
Step #30 - "compile-libfuzzer-address-i386": checking the maximum length of command line arguments... 1572864
Step #30 - "compile-libfuzzer-address-i386": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #30 - "compile-libfuzzer-address-i386": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #30 - "compile-libfuzzer-address-i386": checking for /usr/bin/ld option to reload object files... -r
Step #30 - "compile-libfuzzer-address-i386": checking for objdump... objdump
Step #30 - "compile-libfuzzer-address-i386": checking how to recognize dependent libraries... pass_all
Step #30 - "compile-libfuzzer-address-i386": checking for dlltool... no
Step #30 - "compile-libfuzzer-address-i386": checking how to associate runtime and link libraries... printf %s\n
Step #30 - "compile-libfuzzer-address-i386": checking for ar... ar
Step #30 - "compile-libfuzzer-address-i386": checking for archiver @FILE support... @
Step #30 - "compile-libfuzzer-address-i386": checking for strip... strip
Step #30 - "compile-libfuzzer-address-i386": checking for ranlib... ranlib
Step #30 - "compile-libfuzzer-address-i386": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #30 - "compile-libfuzzer-address-i386": checking for sysroot... no
Step #30 - "compile-libfuzzer-address-i386": checking for a working dd... /usr/bin/dd
Step #30 - "compile-libfuzzer-address-i386": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #30 - "compile-libfuzzer-address-i386": checking for mt... no
Step #30 - "compile-libfuzzer-address-i386": checking if : is a manifest tool... no
Step #30 - "compile-libfuzzer-address-i386": checking how to run the C preprocessor... clang -E
Step #30 - "compile-libfuzzer-address-i386": checking for ANSI C header files... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/types.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/stat.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stdlib.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for string.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for memory.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for strings.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for inttypes.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stdint.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for unistd.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for dlfcn.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for objdir... .libs
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #30 - "compile-libfuzzer-address-i386": checking for clang option to produce PIC... -fPIC -DPIC
Step #30 - "compile-libfuzzer-address-i386": checking if clang PIC flag -fPIC -DPIC works... yes
Step #30 - "compile-libfuzzer-address-i386": checking if clang static flag -static works... no
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -c -o file.o... yes
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -c -o file.o... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the clang linker (/usr/bin/ld -m elf_i386) supports shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether -lc should be explicitly linked in... no
Step #30 - "compile-libfuzzer-address-i386": checking dynamic linker characteristics... GNU/Linux ld.so
Step #30 - "compile-libfuzzer-address-i386": checking how to hardcode library paths into programs... immediate
Step #30 - "compile-libfuzzer-address-i386": checking whether stripping libraries is possible... yes
Step #30 - "compile-libfuzzer-address-i386": checking if libtool supports shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether to build shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether to build static libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the -Werror option is usable... yes
Step #30 - "compile-libfuzzer-address-i386": checking for simple visibility declarations... yes
Step #30 - "compile-libfuzzer-address-i386": checking size of long long... 8
Step #30 - "compile-libfuzzer-address-i386": checking size of long... 4
Step #30 - "compile-libfuzzer-address-i386": checking size of time_t... 4
Step #30 - "compile-libfuzzer-address-i386": checking for __uint128_t... no
Step #30 - "compile-libfuzzer-address-i386": checking arpa/inet.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking arpa/inet.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for arpa/inet.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking fcntl.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking fcntl.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for fcntl.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking limits.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking limits.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for limits.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking netdb.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking netdb.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for netdb.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking netinet/in.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking netinet/in.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for netinet/in.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking stddef.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking stddef.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stddef.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking time.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking time.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for time.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/ioctl.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/ioctl.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/ioctl.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/socket.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/socket.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/socket.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/time.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/time.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/time.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking errno.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking errno.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for errno.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/un.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/un.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/un.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking ctype.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking ctype.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for ctype.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for socket in -lnetwork... no
Step #30 - "compile-libfuzzer-address-i386": checking whether byte ordering is bigendian... no
Step #30 - "compile-libfuzzer-address-i386": checking for __atomic... yes
Step #30 - "compile-libfuzzer-address-i386": checking stdatomic.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking stdatomic.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stdatomic.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking assert.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking assert.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for assert.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gethostbyname... yes
Step #30 - "compile-libfuzzer-address-i386": checking for getaddrinfo... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gettimeofday... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gmtime_r... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gmtime_s... no
Step #30 - "compile-libfuzzer-address-i386": checking for inet_ntoa... yes
Step #30 - "compile-libfuzzer-address-i386": checking for memset... yes
Step #30 - "compile-libfuzzer-address-i386": checking for socket... yes
Step #30 - "compile-libfuzzer-address-i386": checking for strftime... yes
Step #30 - "compile-libfuzzer-address-i386": checking for atexit... yes
Step #30 - "compile-libfuzzer-address-i386": checking for isascii... yes
Step #30 - "compile-libfuzzer-address-i386": checking for getpid... yes
Step #30 - "compile-libfuzzer-address-i386": checking for getrandom... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether gethostbyname is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether getaddrinfo is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether gettimeofday is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether gmtime_r is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether gmtime_s is declared... no
Step #30 - "compile-libfuzzer-address-i386": checking whether inet_ntoa is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether memset is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether socket is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether strftime is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether atexit is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether isascii is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether getpid is declared... yes
Step #30 - "compile-libfuzzer-address-i386": checking for size_t... yes
Step #30 - "compile-libfuzzer-address-i386": checking for uint8_t... yes
Step #30 - "compile-libfuzzer-address-i386": checking for uintptr_t... yes
Step #30 - "compile-libfuzzer-address-i386": checking dependency style of clang... gcc3
Step #30 - "compile-libfuzzer-address-i386": checking for thread local storage (TLS) class... _Thread_local
Step #30 - "compile-libfuzzer-address-i386": checking for debug... no
Step #30 - "compile-libfuzzer-address-i386": checking whether clang is Clang... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #30 - "compile-libfuzzer-address-i386": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #30 - "compile-libfuzzer-address-i386": checking whether more special flags are required for pthreads... no
Step #30 - "compile-libfuzzer-address-i386": checking for PTHREAD_PRIO_INHERIT... yes
Step #30 - "compile-libfuzzer-address-i386": checking for library containing clock_gettime... none required
Step #30 - "compile-libfuzzer-address-i386": checking for cos in -lm... yes
Step #30 - "compile-libfuzzer-address-i386": checking for library containing gethostbyname... none required
Step #30 - "compile-libfuzzer-address-i386": checking for library containing socket... none required
Step #30 - "compile-libfuzzer-address-i386": checking for vcs system... git
Step #30 - "compile-libfuzzer-address-i386": checking for vcs checkout... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -Werror... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -z relro -z now... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -pie... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Werror... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wno-pragmas... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wall... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wextra... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Waddress... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Warray-bounds... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wbad-function-cast... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wchar-subscripts... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wcomment... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wfloat-equal... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wformat-security... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wformat=2... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wnested-externs... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wnormalized=id... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Woverride-init... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wpointer-arith... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wpointer-sign... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wshadow... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wsign-compare... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wstrict-prototypes... no
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wswitch-enum... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wundef... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused-result... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused-variable... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wwrite-strings... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -fwrapv... yes
Step #30 - "compile-libfuzzer-address-i386": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #30 - "compile-libfuzzer-address-i386": checking the number of available CPUs... 32
Step #30 - "compile-libfuzzer-address-i386": configure: adding automake macro support
Step #30 - "compile-libfuzzer-address-i386": configure: creating aminclude.am
Step #30 - "compile-libfuzzer-address-i386": configure: added jobserver support to make for 33 jobs
Step #30 - "compile-libfuzzer-address-i386": checking that generated files are newer than configure... done
Step #30 - "compile-libfuzzer-address-i386": configure: creating ./config.status
Step #30 - "compile-libfuzzer-address-i386": config.status: creating stamp-h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating Makefile
Step #30 - "compile-libfuzzer-address-i386": config.status: creating wolfssl/version.h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating wolfssl/options.h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating support/wolfssl.pc
Step #30 - "compile-libfuzzer-address-i386": config.status: creating debian/control
Step #30 - "compile-libfuzzer-address-i386": config.status: creating debian/changelog
Step #30 - "compile-libfuzzer-address-i386": config.status: creating rpm/spec
Step #30 - "compile-libfuzzer-address-i386": config.status: creating wolfcrypt/test/test_paths.h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating scripts/unit.test
Step #30 - "compile-libfuzzer-address-i386": config.status: creating debian/rules
Step #30 - "compile-libfuzzer-address-i386": config.status: creating config.h
Step #30 - "compile-libfuzzer-address-i386": config.status: executing depfiles commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing libtool commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #30 - "compile-libfuzzer-address-i386": configure: ---
Step #30 - "compile-libfuzzer-address-i386": configure: Running make clean...
Step #30 - "compile-libfuzzer-address-i386": configure: ---
Step #30 - "compile-libfuzzer-address-i386": configure: Generating user options header...
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": Configuration summary for wolfssl version 5.8.2
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386":    * Installation prefix:        /usr/local
Step #30 - "compile-libfuzzer-address-i386":    * System type:                pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386":    * Host CPU:                   x86_64
Step #30 - "compile-libfuzzer-address-i386":    * C Compiler:                 clang
Step #30 - "compile-libfuzzer-address-i386":    * C Flags:                    -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link   -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #30 - "compile-libfuzzer-address-i386":    * C++ Compiler:               clang++
Step #30 - "compile-libfuzzer-address-i386":    * C++ Flags:                  -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++
Step #30 - "compile-libfuzzer-address-i386":    * CPP Flags:                  
Step #30 - "compile-libfuzzer-address-i386":    * CCAS Flags:                 -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link  
Step #30 - "compile-libfuzzer-address-i386":    * LD Flags:                   
Step #30 - "compile-libfuzzer-address-i386":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #30 - "compile-libfuzzer-address-i386":    * Library Suffix:             
Step #30 - "compile-libfuzzer-address-i386":    * Debug enabled:              no
Step #30 - "compile-libfuzzer-address-i386":    * Coverage enabled:           
Step #30 - "compile-libfuzzer-address-i386":    * Warnings as failure:        yes
Step #30 - "compile-libfuzzer-address-i386":    * make -j:                    33
Step #30 - "compile-libfuzzer-address-i386":    * VCS checkout:               yes
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386":    Features 
Step #30 - "compile-libfuzzer-address-i386":    * Experimental settings:      Forbidden
Step #30 - "compile-libfuzzer-address-i386":    * FIPS:                       no
Step #30 - "compile-libfuzzer-address-i386":    * Single threaded:            no
Step #30 - "compile-libfuzzer-address-i386":    * Filesystem:                 yes
Step #30 - "compile-libfuzzer-address-i386":    * OpenSSH Build:              no
Step #30 - "compile-libfuzzer-address-i386":    * OpenSSL Extra API:          no
Step #30 - "compile-libfuzzer-address-i386":    * OpenSSL Coexist:            no
Step #30 - "compile-libfuzzer-address-i386":    * Old Names:                  yes
Step #30 - "compile-libfuzzer-address-i386":    * Max Strength Build:         no
Step #30 - "compile-libfuzzer-address-i386":    * Distro Build:               no
Step #30 - "compile-libfuzzer-address-i386":    * Reproducible Build:         no
Step #30 - "compile-libfuzzer-address-i386":    * Side-channel Hardening:     yes
Step #30 - "compile-libfuzzer-address-i386":    * Single Precision Math:      no
Step #30 - "compile-libfuzzer-address-i386":    * SP implementation:          all
Step #30 - "compile-libfuzzer-address-i386":    * Fast Math:                  no
Step #30 - "compile-libfuzzer-address-i386":    * Heap Math:                  no
Step #30 - "compile-libfuzzer-address-i386":    * Assembly Allowed:           yes
Step #30 - "compile-libfuzzer-address-i386":    * sniffer:                    no
Step #30 - "compile-libfuzzer-address-i386":    * snifftest:                  no
Step #30 - "compile-libfuzzer-address-i386":    * ARC4:                       no
Step #30 - "compile-libfuzzer-address-i386":    * AES:                        yes
Step #30 - "compile-libfuzzer-address-i386":    * AES-NI:                     no
Step #30 - "compile-libfuzzer-address-i386":    * AVX for AES:                no
Step #30 - "compile-libfuzzer-address-i386":    * AES-CBC:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * AES-CBC length checks:      no
Step #30 - "compile-libfuzzer-address-i386":    * AES-GCM:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * AES-GCM streaming:          no
Step #30 - "compile-libfuzzer-address-i386":    * AES-CCM:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-CTR:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-CFB:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-OFB:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-XTS:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-XTS streaming:          no
Step #30 - "compile-libfuzzer-address-i386":    * AES-SIV:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES-EAX:                    no
Step #30 - "compile-libfuzzer-address-i386":    * AES Bitspliced:             no
Step #30 - "compile-libfuzzer-address-i386":    * AES Key Wrap:               no
Step #30 - "compile-libfuzzer-address-i386":    * ARIA:                       no
Step #30 - "compile-libfuzzer-address-i386":    * ASCON:                      no
Step #30 - "compile-libfuzzer-address-i386":    * DES3:                       no
Step #30 - "compile-libfuzzer-address-i386":    * DES3 TLS Suites:            no
Step #30 - "compile-libfuzzer-address-i386":    * Camellia:                   no
Step #30 - "compile-libfuzzer-address-i386":    * CUDA:                       no
Step #30 - "compile-libfuzzer-address-i386":    * SM4-ECB:                    no
Step #30 - "compile-libfuzzer-address-i386":    * SM4-CBC:                    no
Step #30 - "compile-libfuzzer-address-i386":    * SM4-CTR:                    no
Step #30 - "compile-libfuzzer-address-i386":    * SM4-GCM:                    no
Step #30 - "compile-libfuzzer-address-i386":    * SM4-CCM:                    no
Step #30 - "compile-libfuzzer-address-i386":    * NULL Cipher:                no
Step #30 - "compile-libfuzzer-address-i386":    * MD2:                        no
Step #30 - "compile-libfuzzer-address-i386":    * MD4:                        no
Step #30 - "compile-libfuzzer-address-i386":    * MD5:                        no
Step #30 - "compile-libfuzzer-address-i386":    * RIPEMD:                     no
Step #30 - "compile-libfuzzer-address-i386":    * SHA:                        yes
Step #30 - "compile-libfuzzer-address-i386":    * SHA-224:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * SHA-256:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * SHA-384:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * SHA-512:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * SHA3:                       yes
Step #30 - "compile-libfuzzer-address-i386":    * SHAKE128:                   no
Step #30 - "compile-libfuzzer-address-i386":    * SHAKE256:                   no
Step #30 - "compile-libfuzzer-address-i386":    * SM3:                        no
Step #30 - "compile-libfuzzer-address-i386":    * BLAKE2:                     no
Step #30 - "compile-libfuzzer-address-i386":    * BLAKE2S:                    no
Step #30 - "compile-libfuzzer-address-i386":    * SipHash:                    no
Step #30 - "compile-libfuzzer-address-i386":    * CMAC:                       no
Step #30 - "compile-libfuzzer-address-i386":    * keygen:                     no
Step #30 - "compile-libfuzzer-address-i386":    * acert:                      no
Step #30 - "compile-libfuzzer-address-i386":    * certgen:                    no
Step #30 - "compile-libfuzzer-address-i386":    * certreq:                    no
Step #30 - "compile-libfuzzer-address-i386":    * certext:                    no
Step #30 - "compile-libfuzzer-address-i386":    * certgencache:               no
Step #30 - "compile-libfuzzer-address-i386":    * CHACHA:                     yes
Step #30 - "compile-libfuzzer-address-i386":    * XCHACHA:                    no
Step #30 - "compile-libfuzzer-address-i386":    * Hash DRBG:                  yes
Step #30 - "compile-libfuzzer-address-i386":    * MmemUse Entropy:
Step #30 - "compile-libfuzzer-address-i386":    * (AKA: wolfEntropy):         no
Step #30 - "compile-libfuzzer-address-i386":    * PWDBASED:                   yes
Step #30 - "compile-libfuzzer-address-i386":    * Encrypted keys:             no
Step #30 - "compile-libfuzzer-address-i386":    * scrypt:                     no
Step #30 - "compile-libfuzzer-address-i386":    * wolfCrypt Only:             no
Step #30 - "compile-libfuzzer-address-i386":    * HKDF:                       yes
Step #30 - "compile-libfuzzer-address-i386":    * HPKE:                       no
Step #30 - "compile-libfuzzer-address-i386":    * X9.63 KDF:                  no
Step #30 - "compile-libfuzzer-address-i386":    * SRTP-KDF:                   no
Step #30 - "compile-libfuzzer-address-i386":    * PSK:                        no
Step #30 - "compile-libfuzzer-address-i386":    * Poly1305:                   yes
Step #30 - "compile-libfuzzer-address-i386":    * LEANPSK:                    no
Step #30 - "compile-libfuzzer-address-i386":    * LEANTLS:                    no
Step #30 - "compile-libfuzzer-address-i386":    * RSA:                        yes
Step #30 - "compile-libfuzzer-address-i386":    * RSA-PSS:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * DSA:                        no
Step #30 - "compile-libfuzzer-address-i386":    * DH:                         yes
Step #30 - "compile-libfuzzer-address-i386":    * DH Default Parameters:      yes
Step #30 - "compile-libfuzzer-address-i386":    * ECC:                        yes
Step #30 - "compile-libfuzzer-address-i386":    * ECC Custom Curves:          no
Step #30 - "compile-libfuzzer-address-i386":    * ECC Minimum Bits:           224
Step #30 - "compile-libfuzzer-address-i386":    * FPECC:                      no
Step #30 - "compile-libfuzzer-address-i386":    * ECC_ENCRYPT:                no
Step #30 - "compile-libfuzzer-address-i386":    * Brainpool:                  no
Step #30 - "compile-libfuzzer-address-i386":    * SM2:                        no
Step #30 - "compile-libfuzzer-address-i386":    * CURVE25519:                 no
Step #30 - "compile-libfuzzer-address-i386":    * ED25519:                    no
Step #30 - "compile-libfuzzer-address-i386":    * ED25519 streaming:          no
Step #30 - "compile-libfuzzer-address-i386":    * CURVE448:                   no
Step #30 - "compile-libfuzzer-address-i386":    * ED448:                      no
Step #30 - "compile-libfuzzer-address-i386":    * ED448 streaming:            no
Step #30 - "compile-libfuzzer-address-i386":    * LMS:                        no
Step #30 - "compile-libfuzzer-address-i386":    * LMS wolfSSL impl:           no
Step #30 - "compile-libfuzzer-address-i386":    * XMSS:                       no
Step #30 - "compile-libfuzzer-address-i386":    * XMSS wolfSSL impl:          no
Step #30 - "compile-libfuzzer-address-i386":    * MLKEM:                      no
Step #30 - "compile-libfuzzer-address-i386":    * MLKEM wolfSSL impl:         no
Step #30 - "compile-libfuzzer-address-i386":    * DILITHIUM:                  no
Step #30 - "compile-libfuzzer-address-i386":    * ECCSI                       no
Step #30 - "compile-libfuzzer-address-i386":    * SAKKE                       no
Step #30 - "compile-libfuzzer-address-i386":    * ASN:                        yes
Step #30 - "compile-libfuzzer-address-i386":    * Anonymous cipher:           no
Step #30 - "compile-libfuzzer-address-i386":    * CODING:                     yes
Step #30 - "compile-libfuzzer-address-i386":    * MEMORY:                     yes
Step #30 - "compile-libfuzzer-address-i386":    * I/O POOL:                   no
Step #30 - "compile-libfuzzer-address-i386":    * wolfSentry:                 no
Step #30 - "compile-libfuzzer-address-i386":    * LIGHTY:                     no
Step #30 - "compile-libfuzzer-address-i386":    * WPA Supplicant:             no
Step #30 - "compile-libfuzzer-address-i386":    * HAPROXY:                    no
Step #30 - "compile-libfuzzer-address-i386":    * STUNNEL:                    no
Step #30 - "compile-libfuzzer-address-i386":    * tcpdump:                    no
Step #30 - "compile-libfuzzer-address-i386":    * libssh2:                    no
Step #30 - "compile-libfuzzer-address-i386":    * ntp:                        no
Step #30 - "compile-libfuzzer-address-i386":    * rsyslog:                    no
Step #30 - "compile-libfuzzer-address-i386":    * Apache httpd:               no
Step #30 - "compile-libfuzzer-address-i386":    * NGINX:                      no
Step #30 - "compile-libfuzzer-address-i386":    * OpenResty:                  no
Step #30 - "compile-libfuzzer-address-i386":    * ASIO:                       no
Step #30 - "compile-libfuzzer-address-i386":    * LIBWEBSOCKETS:              no
Step #30 - "compile-libfuzzer-address-i386":    * Qt:                         no
Step #30 - "compile-libfuzzer-address-i386":    * Qt Unit Testing:            no
Step #30 - "compile-libfuzzer-address-i386":    * SIGNAL:                     no
Step #30 - "compile-libfuzzer-address-i386":    * chrony:                     no
Step #30 - "compile-libfuzzer-address-i386":    * strongSwan:                 no
Step #30 - "compile-libfuzzer-address-i386":    * OpenLDAP:                   no
Step #30 - "compile-libfuzzer-address-i386":    * hitch:                      no
Step #30 - "compile-libfuzzer-address-i386":    * memcached:                  no
Step #30 - "compile-libfuzzer-address-i386":    * Mosquitto                   no
Step #30 - "compile-libfuzzer-address-i386":    * ERROR_STRINGS:              yes
Step #30 - "compile-libfuzzer-address-i386":    * DTLS:                       no
Step #30 - "compile-libfuzzer-address-i386":    * DTLS v1.3:                  no
Step #30 - "compile-libfuzzer-address-i386":    * SCTP:                       no
Step #30 - "compile-libfuzzer-address-i386":    * SRTP:                       no
Step #30 - "compile-libfuzzer-address-i386":    * Indefinite Length:          no
Step #30 - "compile-libfuzzer-address-i386":    * Multicast:                  no
Step #30 - "compile-libfuzzer-address-i386":    * SSL v3.0 (Old):             no
Step #30 - "compile-libfuzzer-address-i386":    * TLS v1.0 (Old):             no
Step #30 - "compile-libfuzzer-address-i386":    * TLS v1.1 (Old):             no
Step #30 - "compile-libfuzzer-address-i386":    * TLS v1.2:                   yes
Step #30 - "compile-libfuzzer-address-i386":    * TLS v1.3:                   yes
Step #30 - "compile-libfuzzer-address-i386":    * RPK:                        no
Step #30 - "compile-libfuzzer-address-i386":    * Post-handshake Auth:        no
Step #30 - "compile-libfuzzer-address-i386":    * Early Data:                 no
Step #30 - "compile-libfuzzer-address-i386":    * QUIC:                       no
Step #30 - "compile-libfuzzer-address-i386":    * Send State in HRR Cookie:   undefined
Step #30 - "compile-libfuzzer-address-i386":    * OCSP:                       no
Step #30 - "compile-libfuzzer-address-i386":    * OCSP Stapling:              no
Step #30 - "compile-libfuzzer-address-i386":    * OCSP Stapling v2:           no
Step #30 - "compile-libfuzzer-address-i386":    * CRL:                        no
Step #30 - "compile-libfuzzer-address-i386":    * CRL-MONITOR:                no
Step #30 - "compile-libfuzzer-address-i386":    * Persistent session cache:   no
Step #30 - "compile-libfuzzer-address-i386":    * Persistent cert    cache:   no
Step #30 - "compile-libfuzzer-address-i386":    * Atomic User Record Layer:   no
Step #30 - "compile-libfuzzer-address-i386":    * Public Key Callbacks:       no
Step #30 - "compile-libfuzzer-address-i386":    * libxmss:                    no
Step #30 - "compile-libfuzzer-address-i386":    * liblms:                     no
Step #30 - "compile-libfuzzer-address-i386":    * liboqs:                     no
Step #30 - "compile-libfuzzer-address-i386":    * Whitewood netRandom:        no
Step #30 - "compile-libfuzzer-address-i386":    * Server Name Indication:     yes
Step #30 - "compile-libfuzzer-address-i386":    * ALPN:                       no
Step #30 - "compile-libfuzzer-address-i386":    * Maximum Fragment Length:    no
Step #30 - "compile-libfuzzer-address-i386":    * Trusted CA Indication:      no
Step #30 - "compile-libfuzzer-address-i386":    * Truncated HMAC:             no
Step #30 - "compile-libfuzzer-address-i386":    * Supported Elliptic Curves:  yes
Step #30 - "compile-libfuzzer-address-i386":    * FFDHE only in client:       no
Step #30 - "compile-libfuzzer-address-i386":    * Session Ticket:             no
Step #30 - "compile-libfuzzer-address-i386":    * Extended Master Secret:     yes
Step #30 - "compile-libfuzzer-address-i386":    * Renegotiation Indication:   no
Step #30 - "compile-libfuzzer-address-i386":    * Secure Renegotiation:       no
Step #30 - "compile-libfuzzer-address-i386":    * Fallback SCSV:              no
Step #30 - "compile-libfuzzer-address-i386":    * Keying Material Exporter:   no
Step #30 - "compile-libfuzzer-address-i386":    * All TLS Extensions:         no
Step #30 - "compile-libfuzzer-address-i386":    * S/MIME:                     no
Step #30 - "compile-libfuzzer-address-i386":    * PKCS#7:                     no
Step #30 - "compile-libfuzzer-address-i386":    * PKCS#8:                     yes
Step #30 - "compile-libfuzzer-address-i386":    * PKCS#11:                    no
Step #30 - "compile-libfuzzer-address-i386":    * PKCS#12:                    yes
Step #30 - "compile-libfuzzer-address-i386":    * wolfSSH:                    no
Step #30 - "compile-libfuzzer-address-i386":    * wolfEngine:                 no
Step #30 - "compile-libfuzzer-address-i386":    * wolfTPM:                    no
Step #30 - "compile-libfuzzer-address-i386":    * wolfCLU:                    no
Step #30 - "compile-libfuzzer-address-i386":    * wolfSCEP:                   no
Step #30 - "compile-libfuzzer-address-i386":    * Secure Remote Password:     no
Step #30 - "compile-libfuzzer-address-i386":    * Small Stack:                no
Step #30 - "compile-libfuzzer-address-i386":    * Linux Kernel Module:        no
Step #30 - "compile-libfuzzer-address-i386":    * valgrind unit tests:        no
Step #30 - "compile-libfuzzer-address-i386":    * LIBZ:                       no
Step #30 - "compile-libfuzzer-address-i386":    * Examples:                   no
Step #30 - "compile-libfuzzer-address-i386":    * Crypt tests:                no
Step #30 - "compile-libfuzzer-address-i386":    * Stack sizes in tests:       no
Step #30 - "compile-libfuzzer-address-i386":    * Heap stats in tests:        no
Step #30 - "compile-libfuzzer-address-i386":    * Asynchronous Crypto:        no
Step #30 - "compile-libfuzzer-address-i386":    * Asynchronous Crypto (sim):  no
Step #30 - "compile-libfuzzer-address-i386":    * Cavium Nitrox:              no
Step #30 - "compile-libfuzzer-address-i386":    * Cavium Octeon (Sync):       no
Step #30 - "compile-libfuzzer-address-i386":    * Intel Quick Assist:         no
Step #30 - "compile-libfuzzer-address-i386":    * ARM ASM:                    no
Step #30 - "compile-libfuzzer-address-i386":    * ARM ASM SHA512/SHA3 Crypto  no
Step #30 - "compile-libfuzzer-address-i386":    * ARM ASM SM3/SM4 Crypto      no
Step #30 - "compile-libfuzzer-address-i386":    * RISC-V ASM                  no
Step #30 - "compile-libfuzzer-address-i386":    * PPC32 ASM                   no
Step #30 - "compile-libfuzzer-address-i386":    * Write duplicate:            no
Step #30 - "compile-libfuzzer-address-i386":    * Xilinx Hardware Acc.:       no
Step #30 - "compile-libfuzzer-address-i386":    * C89:                        no
Step #30 - "compile-libfuzzer-address-i386":    * Inline Code:                yes
Step #30 - "compile-libfuzzer-address-i386":    * Linux AF_ALG:               no
Step #30 - "compile-libfuzzer-address-i386":    * Linux KCAPI:                no
Step #30 - "compile-libfuzzer-address-i386":    * Linux devcrypto:            no
Step #30 - "compile-libfuzzer-address-i386":    * PK callbacks:               no
Step #30 - "compile-libfuzzer-address-i386":    * Crypto callbacks:           no
Step #30 - "compile-libfuzzer-address-i386":    * i.MX CAAM:                  no
Step #30 - "compile-libfuzzer-address-i386":    * IoT-Safe:                   no
Step #30 - "compile-libfuzzer-address-i386":    * IoT-Safe HWRNG:             no
Step #30 - "compile-libfuzzer-address-i386":    * NXP SE050:                  no
Step #30 - "compile-libfuzzer-address-i386":    * TROPIC01:                   no
Step #30 - "compile-libfuzzer-address-i386":    * Maxim Integrated MAXQ10XX:  no
Step #30 - "compile-libfuzzer-address-i386":    * PSA:                        no
Step #30 - "compile-libfuzzer-address-i386":    * System CA certs:            yes
Step #30 - "compile-libfuzzer-address-i386":    * Dual alg cert support:      no
Step #30 - "compile-libfuzzer-address-i386":    * ERR Queues per Thread:      yes
Step #30 - "compile-libfuzzer-address-i386":    * rwlock:                     no
Step #30 - "compile-libfuzzer-address-i386":    * keylog export:              no
Step #30 - "compile-libfuzzer-address-i386":    * AutoSAR :                   no
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' '--disable-fastmath' 'CC=clang' 'CFLAGS=-m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link'
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #30 - "compile-libfuzzer-address-i386":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #30 - "compile-libfuzzer-address-i386": ++ nproc
Step #30 - "compile-libfuzzer-address-i386": + make -j32
Step #30 - "compile-libfuzzer-address-i386": make -j33  all-recursive
Step #30 - "compile-libfuzzer-address-i386": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #30 - "compile-libfuzzer-address-i386": make[1]: Entering directory '/src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": make[2]: Entering directory '/src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-internal.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-wolfio.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-keys.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-ssl.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-tls.lo
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m[0;1;35m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[0;1;35m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": warning: [0;1;35m[0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]warning: [0m[0m[1m
Step #30 - "compile-libfuzzer-address-i386": unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35mwarning: [0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0;1;35mwarning: 
Step #30 - "compile-libfuzzer-address-i386": [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35m[0m
Step #30 - "compile-libfuzzer-address-i386": [0m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]warning: [0m[0m
Step #30 - "compile-libfuzzer-address-i386": [1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0;1;35mwarning: 
Step #30 - "compile-libfuzzer-address-i386": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfssl_la-tls13.lo
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386":   CCLD     src/libwolfssl.la
Step #30 - "compile-libfuzzer-address-i386": make[2]: Leaving directory '/src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": make[1]: Leaving directory '/src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": ++ realpath .
Step #30 - "compile-libfuzzer-address-i386": + export 'CFLAGS=-m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": + CFLAGS='-m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #30 - "compile-libfuzzer-address-i386": ++ realpath src/.libs/
Step #30 - "compile-libfuzzer-address-i386": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #30 - "compile-libfuzzer-address-i386": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #30 - "compile-libfuzzer-address-i386": + cd /src/wolfmqtt/
Step #30 - "compile-libfuzzer-address-i386": + ./autogen.sh
Step #30 - "compile-libfuzzer-address-i386": Making missing build-aux directory.
Step #30 - "compile-libfuzzer-address-i386": Touching missing build-aux/config.rpath file.
Step #30 - "compile-libfuzzer-address-i386": autoreconf: Entering directory `.'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: configure.ac: not using Gettext
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: aclocal --force -I m4
Step #30 - "compile-libfuzzer-address-i386": autoreconf: configure.ac: tracing
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: libtoolize --copy --force
Step #30 - "compile-libfuzzer-address-i386": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'build-aux/ltmain.sh'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/libtool.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltoptions.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltsugar.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/ltversion.m4'
Step #30 - "compile-libfuzzer-address-i386": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: /usr/bin/autoconf --force
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: /usr/bin/autoheader --force
Step #30 - "compile-libfuzzer-address-i386": autoreconf: running: automake --add-missing --copy --force-missing
Step #30 - "compile-libfuzzer-address-i386": configure.ac:46: installing 'build-aux/compile'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:21: installing 'build-aux/config.guess'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:21: installing 'build-aux/config.sub'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:24: installing 'build-aux/install-sh'
Step #30 - "compile-libfuzzer-address-i386": configure.ac:24: installing 'build-aux/missing'
Step #30 - "compile-libfuzzer-address-i386": Makefile.am: installing 'build-aux/depcomp'
Step #30 - "compile-libfuzzer-address-i386": parallel-tests: installing 'build-aux/test-driver'
Step #30 - "compile-libfuzzer-address-i386": autoreconf: Leaving directory `.'
Step #30 - "compile-libfuzzer-address-i386": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #30 - "compile-libfuzzer-address-i386": checking for pkg-config... /usr/bin/pkg-config
Step #30 - "compile-libfuzzer-address-i386": checking pkg-config is at least version 0.9.0... yes
Step #30 - "compile-libfuzzer-address-i386": checking build system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking host system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking target system type... x86_64-pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386": checking for a BSD-compatible install... /usr/bin/install -c
Step #30 - "compile-libfuzzer-address-i386": checking whether build environment is sane... yes
Step #30 - "compile-libfuzzer-address-i386": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #30 - "compile-libfuzzer-address-i386": checking for gawk... no
Step #30 - "compile-libfuzzer-address-i386": checking for mawk... mawk
Step #30 - "compile-libfuzzer-address-i386": checking whether make sets $(MAKE)... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports nested variables... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether UID '0' is supported by ustar format... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether GID '0' is supported by ustar format... yes
Step #30 - "compile-libfuzzer-address-i386": checking how to create a ustar tar archive... gnutar
Step #30 - "compile-libfuzzer-address-i386": checking how to print strings... printf
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports the include directive... yes (GNU style)
Step #30 - "compile-libfuzzer-address-i386": checking for gcc... clang
Step #30 - "compile-libfuzzer-address-i386": checking whether the C compiler works... yes
Step #30 - "compile-libfuzzer-address-i386": checking for C compiler default output file name... a.out
Step #30 - "compile-libfuzzer-address-i386": checking for suffix of executables... 
Step #30 - "compile-libfuzzer-address-i386": checking whether we are cross compiling... no
Step #30 - "compile-libfuzzer-address-i386": checking for suffix of object files... o
Step #30 - "compile-libfuzzer-address-i386": checking whether we are using the GNU C compiler... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether clang accepts -g... yes
Step #30 - "compile-libfuzzer-address-i386": checking for clang option to accept ISO C89... none needed
Step #30 - "compile-libfuzzer-address-i386": checking whether clang understands -c and -o together... yes
Step #30 - "compile-libfuzzer-address-i386": checking dependency style of clang... gcc3
Step #30 - "compile-libfuzzer-address-i386": checking for a sed that does not truncate output... /usr/bin/sed
Step #30 - "compile-libfuzzer-address-i386": checking for grep that handles long lines and -e... /usr/bin/grep
Step #30 - "compile-libfuzzer-address-i386": checking for egrep... /usr/bin/grep -E
Step #30 - "compile-libfuzzer-address-i386": checking for fgrep... /usr/bin/grep -F
Step #30 - "compile-libfuzzer-address-i386": checking for ld used by clang... /usr/bin/ld
Step #30 - "compile-libfuzzer-address-i386": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #30 - "compile-libfuzzer-address-i386": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #30 - "compile-libfuzzer-address-i386": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #30 - "compile-libfuzzer-address-i386": checking whether ln -s works... yes
Step #30 - "compile-libfuzzer-address-i386": checking the maximum length of command line arguments... 1572864
Step #30 - "compile-libfuzzer-address-i386": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #30 - "compile-libfuzzer-address-i386": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #30 - "compile-libfuzzer-address-i386": checking for /usr/bin/ld option to reload object files... -r
Step #30 - "compile-libfuzzer-address-i386": checking for objdump... objdump
Step #30 - "compile-libfuzzer-address-i386": checking how to recognize dependent libraries... pass_all
Step #30 - "compile-libfuzzer-address-i386": checking for dlltool... no
Step #30 - "compile-libfuzzer-address-i386": checking how to associate runtime and link libraries... printf %s\n
Step #30 - "compile-libfuzzer-address-i386": checking for ar... ar
Step #30 - "compile-libfuzzer-address-i386": checking for archiver @FILE support... @
Step #30 - "compile-libfuzzer-address-i386": checking for strip... strip
Step #30 - "compile-libfuzzer-address-i386": checking for ranlib... ranlib
Step #30 - "compile-libfuzzer-address-i386": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #30 - "compile-libfuzzer-address-i386": checking for sysroot... no
Step #30 - "compile-libfuzzer-address-i386": checking for a working dd... /usr/bin/dd
Step #30 - "compile-libfuzzer-address-i386": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #30 - "compile-libfuzzer-address-i386": checking for mt... no
Step #30 - "compile-libfuzzer-address-i386": checking if : is a manifest tool... no
Step #30 - "compile-libfuzzer-address-i386": checking how to run the C preprocessor... clang -E
Step #30 - "compile-libfuzzer-address-i386": checking for ANSI C header files... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/types.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/stat.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stdlib.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for string.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for memory.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for strings.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for inttypes.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stdint.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for unistd.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for dlfcn.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for objdir... .libs
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #30 - "compile-libfuzzer-address-i386": checking for clang option to produce PIC... -fPIC -DPIC
Step #30 - "compile-libfuzzer-address-i386": checking if clang PIC flag -fPIC -DPIC works... yes
Step #30 - "compile-libfuzzer-address-i386": checking if clang static flag -static works... no
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -c -o file.o... yes
Step #30 - "compile-libfuzzer-address-i386": checking if clang supports -c -o file.o... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the clang linker (/usr/bin/ld -m elf_i386) supports shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether -lc should be explicitly linked in... no
Step #30 - "compile-libfuzzer-address-i386": checking dynamic linker characteristics... GNU/Linux ld.so
Step #30 - "compile-libfuzzer-address-i386": checking how to hardcode library paths into programs... immediate
Step #30 - "compile-libfuzzer-address-i386": checking whether stripping libraries is possible... yes
Step #30 - "compile-libfuzzer-address-i386": checking if libtool supports shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether to build shared libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether to build static libraries... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the -Werror option is usable... yes
Step #30 - "compile-libfuzzer-address-i386": checking for simple visibility declarations... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether make supports nested variables... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking for gcc... (cached) clang
Step #30 - "compile-libfuzzer-address-i386": checking whether we are using the GNU C compiler... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking whether clang accepts -g... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking for clang option to accept ISO C89... (cached) none needed
Step #30 - "compile-libfuzzer-address-i386": checking whether clang understands -c and -o together... (cached) yes
Step #30 - "compile-libfuzzer-address-i386": checking dependency style of clang... (cached) gcc3
Step #30 - "compile-libfuzzer-address-i386": checking size of long long... 8
Step #30 - "compile-libfuzzer-address-i386": checking size of long... 4
Step #30 - "compile-libfuzzer-address-i386": checking arpa/inet.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking arpa/inet.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for arpa/inet.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking fcntl.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking fcntl.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for fcntl.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking limits.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking limits.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for limits.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking netdb.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking netdb.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for netdb.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking netinet/in.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking netinet/in.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for netinet/in.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking stddef.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking stddef.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for stddef.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking time.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking time.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for time.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/ioctl.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/ioctl.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/ioctl.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/socket.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/socket.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/socket.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/time.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/time.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/time.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking errno.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking errno.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for errno.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/un.h usability... yes
Step #30 - "compile-libfuzzer-address-i386": checking sys/un.h presence... yes
Step #30 - "compile-libfuzzer-address-i386": checking for sys/un.h... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gethostbyname... yes
Step #30 - "compile-libfuzzer-address-i386": checking for getaddrinfo... yes
Step #30 - "compile-libfuzzer-address-i386": checking for gettimeofday... yes
Step #30 - "compile-libfuzzer-address-i386": checking for inet_ntoa... yes
Step #30 - "compile-libfuzzer-address-i386": checking for memset... yes
Step #30 - "compile-libfuzzer-address-i386": checking for socket... yes
Step #30 - "compile-libfuzzer-address-i386": checking for signal... yes
Step #30 - "compile-libfuzzer-address-i386": checking for rand... yes
Step #30 - "compile-libfuzzer-address-i386": checking for socket in -lnetwork... no
Step #30 - "compile-libfuzzer-address-i386": checking for wolfSSL... configure: prefix NONE
Step #30 - "compile-libfuzzer-address-i386": checking for debug... no
Step #30 - "compile-libfuzzer-address-i386": checking whether clang is Clang... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #30 - "compile-libfuzzer-address-i386": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #30 - "compile-libfuzzer-address-i386": checking whether more special flags are required for pthreads... no
Step #30 - "compile-libfuzzer-address-i386": checking for PTHREAD_PRIO_INHERIT... yes
Step #30 - "compile-libfuzzer-address-i386": checking for wolfCrypt_Init in -lwolfssl... yes
Step #30 - "compile-libfuzzer-address-i386": checking for vcs system... git
Step #30 - "compile-libfuzzer-address-i386": checking for vcs checkout... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -Werror... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -z relro -z now... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether the linker accepts -pie... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Werror... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wno-pragmas... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wall... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wextra... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Waddress... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Warray-bounds... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wbad-function-cast... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wchar-subscripts... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wcomment... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wfloat-equal... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wformat-security... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wformat=2... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wnested-externs... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wnormalized=id... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Woverride-init... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wpointer-arith... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wpointer-sign... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wredundant-decls... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wshadow... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wsign-compare... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wstrict-prototypes... no
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wswitch-enum... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wundef... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused-result... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wunused-variable... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -Wwrite-strings... yes
Step #30 - "compile-libfuzzer-address-i386": checking whether C compiler accepts -fwrapv... yes
Step #30 - "compile-libfuzzer-address-i386": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #30 - "compile-libfuzzer-address-i386": checking the number of available CPUs... 32
Step #30 - "compile-libfuzzer-address-i386": configure: adding automake macro support
Step #30 - "compile-libfuzzer-address-i386": configure: creating aminclude.am
Step #30 - "compile-libfuzzer-address-i386": configure: added jobserver support to make for 33 jobs
Step #30 - "compile-libfuzzer-address-i386": checking that generated files are newer than configure... done
Step #30 - "compile-libfuzzer-address-i386": configure: creating ./config.status
Step #30 - "compile-libfuzzer-address-i386": config.status: creating Makefile
Step #30 - "compile-libfuzzer-address-i386": config.status: creating wolfmqtt/version.h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": config.status: creating src/config.h
Step #30 - "compile-libfuzzer-address-i386": config.status: executing depfiles commands
Step #30 - "compile-libfuzzer-address-i386": config.status: executing libtool commands
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": Running make clean...
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": Generating user options header...
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -m32, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fsanitize=address, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fsanitize-address-use-after-scope, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fsanitize=fuzzer-no-link, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": not outputting (N)DEBUG to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386": ---
Step #30 - "compile-libfuzzer-address-i386": Configuration summary for wolfmqtt version 1.20.0
Step #30 - "compile-libfuzzer-address-i386": 
Step #30 - "compile-libfuzzer-address-i386":    * Installation prefix:       /usr/local
Step #30 - "compile-libfuzzer-address-i386":    * System type:               pc-linux-gnu
Step #30 - "compile-libfuzzer-address-i386":    * Host CPU:                  x86_64
Step #30 - "compile-libfuzzer-address-i386":    * C Compiler:                clang
Step #30 - "compile-libfuzzer-address-i386":    * C Flags:                   -m32 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #30 - "compile-libfuzzer-address-i386":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #30 - "compile-libfuzzer-address-i386":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #30 - "compile-libfuzzer-address-i386":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #30 - "compile-libfuzzer-address-i386":    * Disconnect Callback:       yes
Step #30 - "compile-libfuzzer-address-i386":    * Error Strings:             yes
Step #30 - "compile-libfuzzer-address-i386":    * Enable MQTT-SN:            no
Step #30 - "compile-libfuzzer-address-i386":    * Enable MQTT v5.0:          yes
Step #30 - "compile-libfuzzer-address-i386":    * Property Callback:         yes
Step #30 - "compile-libfuzzer-address-i386":    * Examples:                  no
Step #30 - "compile-libfuzzer-address-i386":    * Non-Blocking:              no
Step #30 - "compile-libfuzzer-address-i386":    * STDIN Capture:             yes
Step #30 - "compile-libfuzzer-address-i386":    * TLS:                       yes
Step #30 - "compile-libfuzzer-address-i386":    * CURL:                      no
Step #30 - "compile-libfuzzer-address-i386":    * Multi-thread:              no
Step #30 - "compile-libfuzzer-address-i386":    * Stress:                    no
Step #30 - "compile-libfuzzer-address-i386":    * WebSocket:                 no
Step #30 - "compile-libfuzzer-address-i386": ++ nproc
Step #30 - "compile-libfuzzer-address-i386": + make -j32
Step #30 - "compile-libfuzzer-address-i386": make -j33  all-am
Step #30 - "compile-libfuzzer-address-i386": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #30 - "compile-libfuzzer-address-i386": make[1]: Entering directory '/src/wolfmqtt'
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #30 - "compile-libfuzzer-address-i386":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386": 3 warnings generated.
Step #30 - "compile-libfuzzer-address-i386":   CCLD     src/libwolfmqtt.la
Step #30 - "compile-libfuzzer-address-i386": make[1]: Leaving directory '/src/wolfmqtt'
Step #30 - "compile-libfuzzer-address-i386": + clang++ -m32 -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=address -fsanitize-address-use-after-scope -fsanitize=fuzzer-no-link -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a -fsanitize=fuzzer -o /workspace/out/libfuzzer-address-i386/wolfmqtt-fuzzer
Finished Step #30 - "compile-libfuzzer-address-i386"
Starting Step #31 - "build-check-libfuzzer-address-i386"
Step #31 - "build-check-libfuzzer-address-i386": Already have image (with digest): gcr.io/cloud-builders/docker
Step #31 - "build-check-libfuzzer-address-i386": INFO: performing bad build checks for /tmp/not-out/tmpzicm0a3n/wolfmqtt-fuzzer
Finished Step #31 - "build-check-libfuzzer-address-i386"
Starting Step #32
Step #32: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #32
Starting Step #33
Step #33: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #33:   adding: llvm-symbolizer (deflated 65%)
Step #33:   adding: wolfmqtt-fuzzer (deflated 62%)
Finished Step #33
Starting Step #34
Step #34: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #34:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #34:                                  Dload  Upload   Total   Spent    Left  Speed
Step #34:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3111 --:--:-- --:--:-- --:--:--  3109
Finished Step #34
Starting Step #35
Step #35: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #35:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #35:                                  Dload  Upload   Total   Spent    Left  Speed
Step #35:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 5493k    0     0  100 5493k      0  20.6M --:--:-- --:--:-- --:--:-- 20.6M100 5493k    0     0  100 5493k      0  20.6M --:--:-- --:--:-- --:--:-- 20.6M
Finished Step #35
Starting Step #36
Step #36: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #36:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #36:                                  Dload  Upload   Total   Spent    Left  Speed
Step #36:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     58 --:--:-- --:--:-- --:--:--    58
Finished Step #36
Starting Step #37
Step #37: Already have image (with digest): gcr.io/cloud-builders/curl
Step #37:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #37:                                  Dload  Upload   Total   Spent    Left  Speed
Step #37:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    33    0     0  100    33      0    152 --:--:-- --:--:-- --:--:--   152
Finished Step #37
Starting Step #38
Step #38: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #38
Starting Step #39 - "compile-libfuzzer-memory-x86_64"
Step #39 - "compile-libfuzzer-memory-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #39 - "compile-libfuzzer-memory-x86_64": ---------------------------------------------------------------
Step #39 - "compile-libfuzzer-memory-x86_64": vm.mmap_rnd_bits = 28
Step #39 - "compile-libfuzzer-memory-x86_64": Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
Step #39 - "compile-libfuzzer-memory-x86_64": Building without MSan instrumented libraries.
Step #39 - "compile-libfuzzer-memory-x86_64": ---------------------------------------------------------------
Step #39 - "compile-libfuzzer-memory-x86_64": CC=clang
Step #39 - "compile-libfuzzer-memory-x86_64": CXX=clang++
Step #39 - "compile-libfuzzer-memory-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link
Step #39 - "compile-libfuzzer-memory-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -stdlib=libc++
Step #39 - "compile-libfuzzer-memory-x86_64": RUSTFLAGS=--cfg fuzzing -Zsanitizer=memory -Cdebuginfo=1 -Cforce-frame-pointers
Step #39 - "compile-libfuzzer-memory-x86_64": ---------------------------------------------------------------
Step #39 - "compile-libfuzzer-memory-x86_64": + cd /src/wolfssl/
Step #39 - "compile-libfuzzer-memory-x86_64": + autoreconf -ivf
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: Entering directory `.'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: configure.ac: not using Gettext
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: aclocal --force -I m4
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: configure.ac: tracing
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: configure.ac: creating directory build-aux
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: libtoolize --copy --force
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:25: installing 'build-aux/compile'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:27: installing 'build-aux/config.guess'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:27: installing 'build-aux/config.sub'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:31: installing 'build-aux/install-sh'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:31: installing 'build-aux/missing'
Step #39 - "compile-libfuzzer-memory-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #39 - "compile-libfuzzer-memory-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: Leaving directory `.'
Step #39 - "compile-libfuzzer-memory-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link = *sanitize=memory* ]]
Step #39 - "compile-libfuzzer-memory-x86_64": + ./configure --enable-static --disable-crypttests --disable-examples --disable-asm
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether to enable maintainer-specific portions of Makefiles... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gcc... clang
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the C compiler works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for C compiler default output file name... a.out
Step #39 - "compile-libfuzzer-memory-x86_64": checking for suffix of executables... 
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether we are cross compiling... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for suffix of object files... o
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether we are using the GNU C compiler... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang accepts -g... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for clang option to accept ISO C89... none needed
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang understands -c and -o together... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether build environment is sane... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gawk... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for mawk... mawk
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make sets $(MAKE)... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports nested variables... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to create a ustar tar archive... gnutar
Step #39 - "compile-libfuzzer-memory-x86_64": checking dependency style of clang... gcc3
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports nested variables... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to print strings... printf
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #39 - "compile-libfuzzer-memory-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #39 - "compile-libfuzzer-memory-x86_64": checking for egrep... /usr/bin/grep -E
Step #39 - "compile-libfuzzer-memory-x86_64": checking for fgrep... /usr/bin/grep -F
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ld used by clang... /usr/bin/ld
Step #39 - "compile-libfuzzer-memory-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #39 - "compile-libfuzzer-memory-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether ln -s works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking the maximum length of command line arguments... 1572864
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #39 - "compile-libfuzzer-memory-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #39 - "compile-libfuzzer-memory-x86_64": checking for objdump... objdump
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to recognize dependent libraries... pass_all
Step #39 - "compile-libfuzzer-memory-x86_64": checking for dlltool... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ar... ar
Step #39 - "compile-libfuzzer-memory-x86_64": checking for archiver @FILE support... @
Step #39 - "compile-libfuzzer-memory-x86_64": checking for strip... strip
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ranlib... ranlib
Step #39 - "compile-libfuzzer-memory-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sysroot... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a working dd... /usr/bin/dd
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #39 - "compile-libfuzzer-memory-x86_64": checking for mt... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking if : is a manifest tool... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to run the C preprocessor... clang -E
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ANSI C header files... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/types.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/stat.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stdlib.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for string.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for memory.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for strings.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for inttypes.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stdint.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for unistd.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for dlfcn.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for objdir... .libs
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang static flag -static works... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -c -o file.o... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether -lc should be explicitly linked in... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to hardcode library paths into programs... immediate
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether stripping libraries is possible... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if libtool supports shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether to build shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether to build static libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the -Werror option is usable... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for simple visibility declarations... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking size of long long... 8
Step #39 - "compile-libfuzzer-memory-x86_64": checking size of long... 8
Step #39 - "compile-libfuzzer-memory-x86_64": checking size of time_t... 8
Step #39 - "compile-libfuzzer-memory-x86_64": checking for __uint128_t... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking arpa/inet.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking arpa/inet.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for arpa/inet.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking fcntl.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking fcntl.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for fcntl.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking limits.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking limits.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for limits.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netdb.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netdb.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for netdb.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netinet/in.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netinet/in.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for netinet/in.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stddef.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stddef.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stddef.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking time.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking time.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for time.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/ioctl.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/ioctl.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/ioctl.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/socket.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/socket.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/socket.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/time.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/time.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/time.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking errno.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking errno.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for errno.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/un.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/un.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/un.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking ctype.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking ctype.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ctype.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for socket in -lnetwork... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether byte ordering is bigendian... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for __atomic... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stdatomic.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stdatomic.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stdatomic.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking assert.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking assert.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for assert.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gethostbyname... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for getaddrinfo... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gettimeofday... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gmtime_r... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gmtime_s... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for inet_ntoa... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for memset... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for socket... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for strftime... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for atexit... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for isascii... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for getpid... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for getrandom... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether gethostbyname is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether getaddrinfo is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether gettimeofday is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether gmtime_r is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether gmtime_s is declared... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether inet_ntoa is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether memset is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether socket is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether strftime is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether atexit is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether isascii is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether getpid is declared... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for size_t... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for uint8_t... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for uintptr_t... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking dependency style of clang... gcc3
Step #39 - "compile-libfuzzer-memory-x86_64": checking for thread local storage (TLS) class... _Thread_local
Step #39 - "compile-libfuzzer-memory-x86_64": checking for debug... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang is Clang... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether more special flags are required for pthreads... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for library containing clock_gettime... none required
Step #39 - "compile-libfuzzer-memory-x86_64": checking for cos in -lm... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for library containing gethostbyname... none required
Step #39 - "compile-libfuzzer-memory-x86_64": checking for library containing socket... none required
Step #39 - "compile-libfuzzer-memory-x86_64": checking for vcs system... git
Step #39 - "compile-libfuzzer-memory-x86_64": checking for vcs checkout... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -Werror... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -pie... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Werror... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wall... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wextra... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Waddress... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wundef... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #39 - "compile-libfuzzer-memory-x86_64": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #39 - "compile-libfuzzer-memory-x86_64": checking the number of available CPUs... 32
Step #39 - "compile-libfuzzer-memory-x86_64": configure: adding automake macro support
Step #39 - "compile-libfuzzer-memory-x86_64": configure: creating aminclude.am
Step #39 - "compile-libfuzzer-memory-x86_64": configure: added jobserver support to make for 33 jobs
Step #39 - "compile-libfuzzer-memory-x86_64": checking that generated files are newer than configure... done
Step #39 - "compile-libfuzzer-memory-x86_64": configure: creating ./config.status
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating stamp-h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating Makefile
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating wolfssl/version.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating wolfssl/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating support/wolfssl.pc
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating debian/control
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating debian/changelog
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating rpm/spec
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating wolfcrypt/test/test_paths.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating scripts/unit.test
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating debian/rules
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating config.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing depfiles commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing libtool commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #39 - "compile-libfuzzer-memory-x86_64": configure: ---
Step #39 - "compile-libfuzzer-memory-x86_64": configure: Running make clean...
Step #39 - "compile-libfuzzer-memory-x86_64": configure: ---
Step #39 - "compile-libfuzzer-memory-x86_64": configure: Generating user options header...
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": Configuration summary for wolfssl version 5.8.2
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64":    * Installation prefix:        /usr/local
Step #39 - "compile-libfuzzer-memory-x86_64":    * System type:                pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64":    * Host CPU:                   x86_64
Step #39 - "compile-libfuzzer-memory-x86_64":    * C Compiler:                 clang
Step #39 - "compile-libfuzzer-memory-x86_64":    * C Flags:                    -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link   -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #39 - "compile-libfuzzer-memory-x86_64":    * C++ Compiler:               clang++
Step #39 - "compile-libfuzzer-memory-x86_64":    * C++ Flags:                  -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -stdlib=libc++
Step #39 - "compile-libfuzzer-memory-x86_64":    * CPP Flags:                  
Step #39 - "compile-libfuzzer-memory-x86_64":    * CCAS Flags:                 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link  
Step #39 - "compile-libfuzzer-memory-x86_64":    * LD Flags:                   
Step #39 - "compile-libfuzzer-memory-x86_64":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #39 - "compile-libfuzzer-memory-x86_64":    * Library Suffix:             
Step #39 - "compile-libfuzzer-memory-x86_64":    * Debug enabled:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Coverage enabled:           
Step #39 - "compile-libfuzzer-memory-x86_64":    * Warnings as failure:        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * make -j:                    33
Step #39 - "compile-libfuzzer-memory-x86_64":    * VCS checkout:               yes
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64":    Features 
Step #39 - "compile-libfuzzer-memory-x86_64":    * Experimental settings:      Forbidden
Step #39 - "compile-libfuzzer-memory-x86_64":    * FIPS:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Single threaded:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Filesystem:                 yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * OpenSSH Build:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OpenSSL Extra API:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OpenSSL Coexist:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Old Names:                  yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Max Strength Build:         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Distro Build:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Reproducible Build:         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Side-channel Hardening:     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Single Precision Math:      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SP implementation:          all
Step #39 - "compile-libfuzzer-memory-x86_64":    * Fast Math:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Heap Math:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Assembly Allowed:           no
Step #39 - "compile-libfuzzer-memory-x86_64":    * sniffer:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * snifftest:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ARC4:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES:                        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-NI:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AVX for AES:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-CBC:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-CBC length checks:      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-GCM:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-GCM streaming:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-CCM:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-CTR:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-CFB:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-OFB:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-XTS:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-XTS streaming:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-SIV:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES-EAX:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES Bitspliced:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AES Key Wrap:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ARIA:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ASCON:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * DES3:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * DES3 TLS Suites:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Camellia:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CUDA:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM4-ECB:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM4-CBC:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM4-CTR:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM4-GCM:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM4-CCM:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * NULL Cipher:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * MD2:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * MD4:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * MD5:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * RIPEMD:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA:                        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA-224:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA-256:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA-384:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA-512:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHA3:                       yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHAKE128:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SHAKE256:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM3:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * BLAKE2:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * BLAKE2S:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SipHash:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CMAC:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * keygen:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * acert:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * certgen:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * certreq:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * certext:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * certgencache:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CHACHA:                     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * XCHACHA:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Hash DRBG:                  yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * MmemUse Entropy:
Step #39 - "compile-libfuzzer-memory-x86_64":    * (AKA: wolfEntropy):         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PWDBASED:                   yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Encrypted keys:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * scrypt:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfCrypt Only:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * HKDF:                       yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * HPKE:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * X9.63 KDF:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SRTP-KDF:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PSK:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Poly1305:                   yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * LEANPSK:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LEANTLS:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * RSA:                        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * RSA-PSS:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * DSA:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * DH:                         yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * DH Default Parameters:      yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * ECC:                        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * ECC Custom Curves:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ECC Minimum Bits:           224
Step #39 - "compile-libfuzzer-memory-x86_64":    * FPECC:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ECC_ENCRYPT:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Brainpool:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SM2:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CURVE25519:                 no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ED25519:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ED25519 streaming:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CURVE448:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ED448:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ED448 streaming:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LMS:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LMS wolfSSL impl:           no
Step #39 - "compile-libfuzzer-memory-x86_64":    * XMSS:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * XMSS wolfSSL impl:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * MLKEM:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * MLKEM wolfSSL impl:         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * DILITHIUM:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ECCSI                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SAKKE                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ASN:                        yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Anonymous cipher:           no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CODING:                     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * MEMORY:                     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * I/O POOL:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfSentry:                 no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LIGHTY:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * WPA Supplicant:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * HAPROXY:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * STUNNEL:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * tcpdump:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * libssh2:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ntp:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * rsyslog:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Apache httpd:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * NGINX:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OpenResty:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ASIO:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LIBWEBSOCKETS:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Qt:                         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Qt Unit Testing:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SIGNAL:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * chrony:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * strongSwan:                 no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OpenLDAP:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * hitch:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * memcached:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Mosquitto                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ERROR_STRINGS:              yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * DTLS:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * DTLS v1.3:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SCTP:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SRTP:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Indefinite Length:          no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Multicast:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * SSL v3.0 (Old):             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * TLS v1.0 (Old):             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * TLS v1.1 (Old):             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * TLS v1.2:                   yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * TLS v1.3:                   yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * RPK:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Post-handshake Auth:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Early Data:                 no
Step #39 - "compile-libfuzzer-memory-x86_64":    * QUIC:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Send State in HRR Cookie:   undefined
Step #39 - "compile-libfuzzer-memory-x86_64":    * OCSP:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OCSP Stapling:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * OCSP Stapling v2:           no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CRL:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * CRL-MONITOR:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Persistent session cache:   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Persistent cert    cache:   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Atomic User Record Layer:   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Public Key Callbacks:       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * libxmss:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * liblms:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * liboqs:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Whitewood netRandom:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Server Name Indication:     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * ALPN:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Maximum Fragment Length:    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Trusted CA Indication:      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Truncated HMAC:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Supported Elliptic Curves:  yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * FFDHE only in client:       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Session Ticket:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Extended Master Secret:     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Renegotiation Indication:   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Secure Renegotiation:       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Fallback SCSV:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Keying Material Exporter:   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * All TLS Extensions:         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * S/MIME:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PKCS#7:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PKCS#8:                     yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * PKCS#11:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PKCS#12:                    yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfSSH:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfEngine:                 no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfTPM:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfCLU:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * wolfSCEP:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Secure Remote Password:     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Small Stack:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Linux Kernel Module:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * valgrind unit tests:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * LIBZ:                       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Examples:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Crypt tests:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Stack sizes in tests:       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Heap stats in tests:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Asynchronous Crypto:        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Asynchronous Crypto (sim):  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Cavium Nitrox:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Cavium Octeon (Sync):       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Intel Quick Assist:         no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ARM ASM:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ARM ASM SHA512/SHA3 Crypto  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ARM ASM SM3/SM4 Crypto      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * RISC-V ASM                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PPC32 ASM                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Write duplicate:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Xilinx Hardware Acc.:       no
Step #39 - "compile-libfuzzer-memory-x86_64":    * C89:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Inline Code:                yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Linux AF_ALG:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Linux KCAPI:                no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Linux devcrypto:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PK callbacks:               no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Crypto callbacks:           no
Step #39 - "compile-libfuzzer-memory-x86_64":    * i.MX CAAM:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * IoT-Safe:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * IoT-Safe HWRNG:             no
Step #39 - "compile-libfuzzer-memory-x86_64":    * NXP SE050:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * TROPIC01:                   no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Maxim Integrated MAXQ10XX:  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * PSA:                        no
Step #39 - "compile-libfuzzer-memory-x86_64":    * System CA certs:            yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Dual alg cert support:      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * ERR Queues per Thread:      yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * rwlock:                     no
Step #39 - "compile-libfuzzer-memory-x86_64":    * keylog export:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * AutoSAR :                   no
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' '--disable-asm' 'CC=clang' 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link'
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #39 - "compile-libfuzzer-memory-x86_64":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #39 - "compile-libfuzzer-memory-x86_64": ++ nproc
Step #39 - "compile-libfuzzer-memory-x86_64": + make -j32
Step #39 - "compile-libfuzzer-memory-x86_64": make -j33  all-recursive
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: Entering directory '/src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": make[2]: Entering directory '/src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-internal.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-wolfio.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-keys.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-ssl.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-tls.lo
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [1m[0;1;35mwarning: [0;1;35mwarning: unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0;1;35m[0mwarning: 
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #39 - "compile-libfuzzer-memory-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option]warning: [0m[0;1;35m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m[0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[0;1;35m[1mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[0;1;35m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: warning: [0m[1m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0;1;35mwarning: 
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[0;1;35m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0;1;35m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35mwarning: [0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": warning: 3[0m warnings[1m generated.
Step #39 - "compile-libfuzzer-memory-x86_64": unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfssl_la-tls13.lo
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64":   CCLD     src/libwolfssl.la
Step #39 - "compile-libfuzzer-memory-x86_64": make[2]: Leaving directory '/src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: Leaving directory '/src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": ++ realpath .
Step #39 - "compile-libfuzzer-memory-x86_64": + export 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": + CFLAGS='-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -I /src/wolfssl'
Step #39 - "compile-libfuzzer-memory-x86_64": ++ realpath src/.libs/
Step #39 - "compile-libfuzzer-memory-x86_64": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #39 - "compile-libfuzzer-memory-x86_64": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #39 - "compile-libfuzzer-memory-x86_64": + cd /src/wolfmqtt/
Step #39 - "compile-libfuzzer-memory-x86_64": + ./autogen.sh
Step #39 - "compile-libfuzzer-memory-x86_64": Making missing build-aux directory.
Step #39 - "compile-libfuzzer-memory-x86_64": Touching missing build-aux/config.rpath file.
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: Entering directory `.'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: configure.ac: not using Gettext
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: aclocal --force -I m4
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: configure.ac: tracing
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: libtoolize --copy --force
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:46: installing 'build-aux/compile'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:21: installing 'build-aux/config.guess'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:21: installing 'build-aux/config.sub'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:24: installing 'build-aux/install-sh'
Step #39 - "compile-libfuzzer-memory-x86_64": configure.ac:24: installing 'build-aux/missing'
Step #39 - "compile-libfuzzer-memory-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #39 - "compile-libfuzzer-memory-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #39 - "compile-libfuzzer-memory-x86_64": autoreconf: Leaving directory `.'
Step #39 - "compile-libfuzzer-memory-x86_64": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #39 - "compile-libfuzzer-memory-x86_64": checking for pkg-config... /usr/bin/pkg-config
Step #39 - "compile-libfuzzer-memory-x86_64": checking pkg-config is at least version 0.9.0... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether build environment is sane... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gawk... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for mawk... mawk
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make sets $(MAKE)... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports nested variables... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to create a ustar tar archive... gnutar
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to print strings... printf
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gcc... clang
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the C compiler works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for C compiler default output file name... a.out
Step #39 - "compile-libfuzzer-memory-x86_64": checking for suffix of executables... 
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether we are cross compiling... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for suffix of object files... o
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether we are using the GNU C compiler... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang accepts -g... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for clang option to accept ISO C89... none needed
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang understands -c and -o together... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking dependency style of clang... gcc3
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #39 - "compile-libfuzzer-memory-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #39 - "compile-libfuzzer-memory-x86_64": checking for egrep... /usr/bin/grep -E
Step #39 - "compile-libfuzzer-memory-x86_64": checking for fgrep... /usr/bin/grep -F
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ld used by clang... /usr/bin/ld
Step #39 - "compile-libfuzzer-memory-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #39 - "compile-libfuzzer-memory-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether ln -s works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking the maximum length of command line arguments... 1572864
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #39 - "compile-libfuzzer-memory-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #39 - "compile-libfuzzer-memory-x86_64": checking for objdump... objdump
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to recognize dependent libraries... pass_all
Step #39 - "compile-libfuzzer-memory-x86_64": checking for dlltool... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ar... ar
Step #39 - "compile-libfuzzer-memory-x86_64": checking for archiver @FILE support... @
Step #39 - "compile-libfuzzer-memory-x86_64": checking for strip... strip
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ranlib... ranlib
Step #39 - "compile-libfuzzer-memory-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sysroot... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for a working dd... /usr/bin/dd
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #39 - "compile-libfuzzer-memory-x86_64": checking for mt... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking if : is a manifest tool... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to run the C preprocessor... clang -E
Step #39 - "compile-libfuzzer-memory-x86_64": checking for ANSI C header files... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/types.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/stat.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stdlib.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for string.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for memory.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for strings.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for inttypes.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stdint.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for unistd.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for dlfcn.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for objdir... .libs
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -fno-rtti -fno-exceptions... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang static flag -static works... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -c -o file.o... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether -lc should be explicitly linked in... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #39 - "compile-libfuzzer-memory-x86_64": checking how to hardcode library paths into programs... immediate
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether stripping libraries is possible... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking if libtool supports shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether to build shared libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether to build static libraries... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the -Werror option is usable... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for simple visibility declarations... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether make supports nested variables... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gcc... (cached) clang
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether we are using the GNU C compiler... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang accepts -g... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for clang option to accept ISO C89... (cached) none needed
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang understands -c and -o together... (cached) yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking dependency style of clang... (cached) gcc3
Step #39 - "compile-libfuzzer-memory-x86_64": checking size of long long... 8
Step #39 - "compile-libfuzzer-memory-x86_64": checking size of long... 8
Step #39 - "compile-libfuzzer-memory-x86_64": checking arpa/inet.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking arpa/inet.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for arpa/inet.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking fcntl.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking fcntl.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for fcntl.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking limits.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking limits.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for limits.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netdb.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netdb.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for netdb.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netinet/in.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking netinet/in.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for netinet/in.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stddef.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking stddef.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for stddef.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking time.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking time.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for time.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/ioctl.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/ioctl.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/ioctl.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/socket.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/socket.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/socket.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/time.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/time.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/time.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking errno.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking errno.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for errno.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/un.h usability... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking sys/un.h presence... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for sys/un.h... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gethostbyname... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for getaddrinfo... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for gettimeofday... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for inet_ntoa... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for memset... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for socket... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for signal... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for rand... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for socket in -lnetwork... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for wolfSSL... configure: prefix NONE
Step #39 - "compile-libfuzzer-memory-x86_64": checking for debug... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether clang is Clang... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether more special flags are required for pthreads... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for wolfCrypt_Init in -lwolfssl... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking for vcs system... git
Step #39 - "compile-libfuzzer-memory-x86_64": checking for vcs checkout... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -Werror... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether the linker accepts -pie... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Werror... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wall... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wextra... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Waddress... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wredundant-decls... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wundef... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #39 - "compile-libfuzzer-memory-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #39 - "compile-libfuzzer-memory-x86_64": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #39 - "compile-libfuzzer-memory-x86_64": checking the number of available CPUs... 32
Step #39 - "compile-libfuzzer-memory-x86_64": configure: adding automake macro support
Step #39 - "compile-libfuzzer-memory-x86_64": configure: creating aminclude.am
Step #39 - "compile-libfuzzer-memory-x86_64": configure: added jobserver support to make for 33 jobs
Step #39 - "compile-libfuzzer-memory-x86_64": checking that generated files are newer than configure... done
Step #39 - "compile-libfuzzer-memory-x86_64": configure: creating ./config.status
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating Makefile
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating wolfmqtt/version.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: creating src/config.h
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing depfiles commands
Step #39 - "compile-libfuzzer-memory-x86_64": config.status: executing libtool commands
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": Running make clean...
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": Generating user options header...
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fsanitize=memory, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fsanitize-memory-track-origins, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fsanitize=fuzzer-no-link, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": not outputting (N)DEBUG to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": ---
Step #39 - "compile-libfuzzer-memory-x86_64": Configuration summary for wolfmqtt version 1.20.0
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64":    * Installation prefix:       /usr/local
Step #39 - "compile-libfuzzer-memory-x86_64":    * System type:               pc-linux-gnu
Step #39 - "compile-libfuzzer-memory-x86_64":    * Host CPU:                  x86_64
Step #39 - "compile-libfuzzer-memory-x86_64":    * C Compiler:                clang
Step #39 - "compile-libfuzzer-memory-x86_64":    * C Flags:                   -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #39 - "compile-libfuzzer-memory-x86_64":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #39 - "compile-libfuzzer-memory-x86_64":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #39 - "compile-libfuzzer-memory-x86_64":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #39 - "compile-libfuzzer-memory-x86_64":    * Disconnect Callback:       yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Error Strings:             yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Enable MQTT-SN:            no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Enable MQTT v5.0:          yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Property Callback:         yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * Examples:                  no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Non-Blocking:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * STDIN Capture:             yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * TLS:                       yes
Step #39 - "compile-libfuzzer-memory-x86_64":    * CURL:                      no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Multi-thread:              no
Step #39 - "compile-libfuzzer-memory-x86_64":    * Stress:                    no
Step #39 - "compile-libfuzzer-memory-x86_64":    * WebSocket:                 no
Step #39 - "compile-libfuzzer-memory-x86_64": ++ nproc
Step #39 - "compile-libfuzzer-memory-x86_64": + make -j32
Step #39 - "compile-libfuzzer-memory-x86_64": make -j33  all-am
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: Entering directory '/src/wolfmqtt'
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #39 - "compile-libfuzzer-memory-x86_64":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #39 - "compile-libfuzzer-memory-x86_64": 
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64": 3 warnings generated.
Step #39 - "compile-libfuzzer-memory-x86_64":   CCLD     src/libwolfmqtt.la
Step #39 - "compile-libfuzzer-memory-x86_64": make[1]: Leaving directory '/src/wolfmqtt'
Step #39 - "compile-libfuzzer-memory-x86_64": + clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=memory -fsanitize-memory-track-origins -fsanitize=fuzzer-no-link -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a -fsanitize=fuzzer -o /workspace/out/libfuzzer-memory-x86_64/wolfmqtt-fuzzer
Finished Step #39 - "compile-libfuzzer-memory-x86_64"
Starting Step #40 - "build-check-libfuzzer-memory-x86_64"
Step #40 - "build-check-libfuzzer-memory-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #40 - "build-check-libfuzzer-memory-x86_64": INFO: performing bad build checks for /tmp/not-out/tmpsgzcptif/wolfmqtt-fuzzer
Finished Step #40 - "build-check-libfuzzer-memory-x86_64"
Starting Step #41
Step #41: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #41
Starting Step #42
Step #42: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #42:   adding: llvm-symbolizer (deflated 65%)
Step #42:   adding: wolfmqtt-fuzzer (deflated 63%)
Finished Step #42
Starting Step #43
Step #43: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #43:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #43:                                  Dload  Upload   Total   Spent    Left  Speed
Step #43:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3250 --:--:-- --:--:-- --:--:--  3265
Finished Step #43
Starting Step #44
Step #44: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #44:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #44:                                  Dload  Upload   Total   Spent    Left  Speed
Step #44:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 5987k    0     0  100 5987k      0  28.5M --:--:-- --:--:-- --:--:-- 28.5M100 5987k    0     0  100 5987k      0  20.7M --:--:-- --:--:-- --:--:-- 20.6M
Finished Step #44
Starting Step #45
Step #45: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #45:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #45:                                  Dload  Upload   Total   Spent    Left  Speed
Step #45:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     66 --:--:-- --:--:-- --:--:--    67
Finished Step #45
Starting Step #46
Step #46: Already have image (with digest): gcr.io/cloud-builders/curl
Step #46:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #46:                                  Dload  Upload   Total   Spent    Left  Speed
Step #46:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    32    0     0  100    32      0    172 --:--:-- --:--:-- --:--:--   172
Finished Step #46
Starting Step #47
Step #47: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #47
Starting Step #48 - "compile-libfuzzer-undefined-x86_64"
Step #48 - "compile-libfuzzer-undefined-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #48 - "compile-libfuzzer-undefined-x86_64": ---------------------------------------------------------------
Step #48 - "compile-libfuzzer-undefined-x86_64": vm.mmap_rnd_bits = 28
Step #48 - "compile-libfuzzer-undefined-x86_64": Compiling libFuzzer to /usr/lib/libFuzzingEngine.a...  done.
Step #48 - "compile-libfuzzer-undefined-x86_64": ---------------------------------------------------------------
Step #48 - "compile-libfuzzer-undefined-x86_64": CC=clang
Step #48 - "compile-libfuzzer-undefined-x86_64": CXX=clang++
Step #48 - "compile-libfuzzer-undefined-x86_64": CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function
Step #48 - "compile-libfuzzer-undefined-x86_64": CXXFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -stdlib=libc++
Step #48 - "compile-libfuzzer-undefined-x86_64": RUSTFLAGS=--cfg fuzzing -Cdebuginfo=1 -Cforce-frame-pointers
Step #48 - "compile-libfuzzer-undefined-x86_64": ---------------------------------------------------------------
Step #48 - "compile-libfuzzer-undefined-x86_64": + cd /src/wolfssl/
Step #48 - "compile-libfuzzer-undefined-x86_64": + autoreconf -ivf
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: Entering directory `.'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: configure.ac: not using Gettext
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: aclocal --force -I m4
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: configure.ac: tracing
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: configure.ac: creating directory build-aux
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: libtoolize --copy --force
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:25: installing 'build-aux/compile'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:27: installing 'build-aux/config.guess'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:27: installing 'build-aux/config.sub'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:31: installing 'build-aux/install-sh'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:31: installing 'build-aux/missing'
Step #48 - "compile-libfuzzer-undefined-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #48 - "compile-libfuzzer-undefined-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: Leaving directory `.'
Step #48 - "compile-libfuzzer-undefined-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function = *sanitize=memory* ]]
Step #48 - "compile-libfuzzer-undefined-x86_64": + [[ -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function = *-m32* ]]
Step #48 - "compile-libfuzzer-undefined-x86_64": + ./configure --enable-static --disable-crypttests --disable-examples
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether to enable maintainer-specific portions of Makefiles... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gcc... clang
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the C compiler works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for C compiler default output file name... a.out
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for suffix of executables... 
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether we are cross compiling... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for suffix of object files... o
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether we are using the GNU C compiler... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang accepts -g... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for clang option to accept ISO C89... none needed
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang understands -c and -o together... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether build environment is sane... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gawk... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for mawk... mawk
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make sets $(MAKE)... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports nested variables... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to create a ustar tar archive... gnutar
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dependency style of clang... gcc3
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports nested variables... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to print strings... printf
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for egrep... /usr/bin/grep -E
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for fgrep... /usr/bin/grep -F
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ld used by clang... /usr/bin/ld
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether ln -s works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the maximum length of command line arguments... 1572864
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for objdump... objdump
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to recognize dependent libraries... pass_all
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for dlltool... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ar... ar
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for archiver @FILE support... @
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for strip... strip
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ranlib... ranlib
Step #48 - "compile-libfuzzer-undefined-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sysroot... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a working dd... /usr/bin/dd
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for mt... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if : is a manifest tool... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to run the C preprocessor... clang -E
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ANSI C header files... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/types.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/stat.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stdlib.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for string.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for memory.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for strings.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for inttypes.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stdint.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for unistd.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for dlfcn.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for objdir... .libs
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -fno-rtti -fno-exceptions... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang static flag -static works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -c -o file.o... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether -lc should be explicitly linked in... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to hardcode library paths into programs... immediate
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether stripping libraries is possible... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if libtool supports shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether to build shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether to build static libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the -Werror option is usable... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for simple visibility declarations... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking size of long long... 8
Step #48 - "compile-libfuzzer-undefined-x86_64": checking size of long... 8
Step #48 - "compile-libfuzzer-undefined-x86_64": checking size of time_t... 8
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for __uint128_t... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking arpa/inet.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking arpa/inet.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for arpa/inet.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking fcntl.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking fcntl.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for fcntl.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking limits.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking limits.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for limits.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netdb.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netdb.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for netdb.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netinet/in.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netinet/in.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for netinet/in.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stddef.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stddef.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stddef.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking time.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking time.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for time.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/ioctl.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/ioctl.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/ioctl.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/socket.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/socket.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/socket.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/time.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/time.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/time.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking errno.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking errno.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for errno.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/un.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/un.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/un.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking ctype.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking ctype.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ctype.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for socket in -lnetwork... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether byte ordering is bigendian... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for __atomic... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stdatomic.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stdatomic.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stdatomic.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking assert.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking assert.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for assert.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gethostbyname... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for getaddrinfo... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gettimeofday... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gmtime_r... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gmtime_s... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for inet_ntoa... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for memset... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for socket... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for strftime... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for atexit... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for isascii... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for getpid... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for getrandom... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether gethostbyname is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether getaddrinfo is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether gettimeofday is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether gmtime_r is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether gmtime_s is declared... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether inet_ntoa is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether memset is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether socket is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether strftime is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether atexit is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether isascii is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether getpid is declared... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for size_t... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for uint8_t... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for uintptr_t... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dependency style of clang... gcc3
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for thread local storage (TLS) class... _Thread_local
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for debug... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang is Clang... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether more special flags are required for pthreads... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for library containing clock_gettime... none required
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for cos in -lm... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for library containing gethostbyname... none required
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for library containing socket... none required
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for vcs system... git
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for vcs checkout... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -Werror... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -pie... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Werror... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wall... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wextra... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Waddress... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wundef... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": creating wolfssl-config - generic 5.8.2 for -lwolfssl -lpthread
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the number of available CPUs... 32
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: adding automake macro support
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: creating aminclude.am
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: added jobserver support to make for 33 jobs
Step #48 - "compile-libfuzzer-undefined-x86_64": checking that generated files are newer than configure... done
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: creating ./config.status
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating stamp-h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating Makefile
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating wolfssl/version.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating wolfssl/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating support/wolfssl.pc
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating debian/control
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating debian/changelog
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating rpm/spec
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating wolfcrypt/test/test_paths.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating scripts/unit.test
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating debian/rules
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating config.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing depfiles commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing libtool commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing wolfssl/wolfcrypt/async.h commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing wolfssl/wolfcrypt/fips.h commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing wolfssl/wolfcrypt/port/cavium/cavium_nitrox.h commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist.h commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing wolfssl/wolfcrypt/port/intel/quickassist_mem.h commands
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: ---
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: Running make clean...
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: ---
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: Generating user options header...
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": Configuration summary for wolfssl version 5.8.2
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Installation prefix:        /usr/local
Step #48 - "compile-libfuzzer-undefined-x86_64":    * System type:                pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Host CPU:                   x86_64
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C Compiler:                 clang
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C Flags:                    -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function   -Werror -Wno-pragmas -Wall -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C++ Compiler:               clang++
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C++ Flags:                  -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -stdlib=libc++
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CPP Flags:                  
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CCAS Flags:                 -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function  
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LD Flags:                   
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LIB Flags:                   -pie -z relro -z now -Werror 
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Library Suffix:             
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Debug enabled:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Coverage enabled:           
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Warnings as failure:        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * make -j:                    33
Step #48 - "compile-libfuzzer-undefined-x86_64":    * VCS checkout:               yes
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64":    Features 
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Experimental settings:      Forbidden
Step #48 - "compile-libfuzzer-undefined-x86_64":    * FIPS:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Single threaded:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Filesystem:                 yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OpenSSH Build:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OpenSSL Extra API:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OpenSSL Coexist:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Old Names:                  yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Max Strength Build:         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Distro Build:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Reproducible Build:         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Side-channel Hardening:     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Single Precision Math:      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SP implementation:          all
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Fast Math:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Heap Math:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Assembly Allowed:           yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * sniffer:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * snifftest:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ARC4:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES:                        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-NI:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AVX for AES:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-CBC:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-CBC length checks:      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-GCM:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-GCM streaming:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-CCM:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-CTR:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-CFB:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-OFB:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-XTS:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-XTS streaming:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-SIV:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES-EAX:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES Bitspliced:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AES Key Wrap:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ARIA:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ASCON:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DES3:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DES3 TLS Suites:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Camellia:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CUDA:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM4-ECB:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM4-CBC:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM4-CTR:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM4-GCM:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM4-CCM:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * NULL Cipher:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MD2:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MD4:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MD5:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * RIPEMD:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA:                        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA-224:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA-256:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA-384:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA-512:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHA3:                       yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHAKE128:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SHAKE256:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM3:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * BLAKE2:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * BLAKE2S:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SipHash:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CMAC:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * keygen:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * acert:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * certgen:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * certreq:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * certext:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * certgencache:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CHACHA:                     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * XCHACHA:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Hash DRBG:                  yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MmemUse Entropy:
Step #48 - "compile-libfuzzer-undefined-x86_64":    * (AKA: wolfEntropy):         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PWDBASED:                   yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Encrypted keys:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * scrypt:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfCrypt Only:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * HKDF:                       yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * HPKE:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * X9.63 KDF:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SRTP-KDF:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PSK:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Poly1305:                   yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LEANPSK:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LEANTLS:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * RSA:                        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * RSA-PSS:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DSA:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DH:                         yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DH Default Parameters:      yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ECC:                        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ECC Custom Curves:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ECC Minimum Bits:           224
Step #48 - "compile-libfuzzer-undefined-x86_64":    * FPECC:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ECC_ENCRYPT:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Brainpool:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SM2:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CURVE25519:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ED25519:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ED25519 streaming:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CURVE448:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ED448:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ED448 streaming:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LMS:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LMS wolfSSL impl:           no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * XMSS:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * XMSS wolfSSL impl:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MLKEM:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MLKEM wolfSSL impl:         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DILITHIUM:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ECCSI                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SAKKE                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ASN:                        yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Anonymous cipher:           no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CODING:                     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * MEMORY:                     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * I/O POOL:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfSentry:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LIGHTY:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * WPA Supplicant:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * HAPROXY:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * STUNNEL:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * tcpdump:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * libssh2:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ntp:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * rsyslog:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Apache httpd:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * NGINX:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OpenResty:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ASIO:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LIBWEBSOCKETS:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Qt:                         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Qt Unit Testing:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SIGNAL:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * chrony:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * strongSwan:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OpenLDAP:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * hitch:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * memcached:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Mosquitto                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ERROR_STRINGS:              yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DTLS:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * DTLS v1.3:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SCTP:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SRTP:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Indefinite Length:          no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Multicast:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * SSL v3.0 (Old):             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TLS v1.0 (Old):             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TLS v1.1 (Old):             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TLS v1.2:                   yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TLS v1.3:                   yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * RPK:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Post-handshake Auth:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Early Data:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * QUIC:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Send State in HRR Cookie:   undefined
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OCSP:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OCSP Stapling:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * OCSP Stapling v2:           no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CRL:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CRL-MONITOR:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Persistent session cache:   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Persistent cert    cache:   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Atomic User Record Layer:   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Public Key Callbacks:       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * libxmss:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * liblms:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * liboqs:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Whitewood netRandom:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Server Name Indication:     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ALPN:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Maximum Fragment Length:    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Trusted CA Indication:      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Truncated HMAC:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Supported Elliptic Curves:  yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * FFDHE only in client:       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Session Ticket:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Extended Master Secret:     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Renegotiation Indication:   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Secure Renegotiation:       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Fallback SCSV:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Keying Material Exporter:   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * All TLS Extensions:         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * S/MIME:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PKCS#7:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PKCS#8:                     yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PKCS#11:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PKCS#12:                    yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfSSH:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfEngine:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfTPM:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfCLU:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * wolfSCEP:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Secure Remote Password:     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Small Stack:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Linux Kernel Module:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * valgrind unit tests:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LIBZ:                       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Examples:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Crypt tests:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Stack sizes in tests:       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Heap stats in tests:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Asynchronous Crypto:        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Asynchronous Crypto (sim):  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Cavium Nitrox:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Cavium Octeon (Sync):       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Intel Quick Assist:         no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ARM ASM:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ARM ASM SHA512/SHA3 Crypto  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ARM ASM SM3/SM4 Crypto      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * RISC-V ASM                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PPC32 ASM                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Write duplicate:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Xilinx Hardware Acc.:       no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C89:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Inline Code:                yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Linux AF_ALG:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Linux KCAPI:                no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Linux devcrypto:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PK callbacks:               no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Crypto callbacks:           no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * i.MX CAAM:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * IoT-Safe:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * IoT-Safe HWRNG:             no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * NXP SE050:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TROPIC01:                   no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Maxim Integrated MAXQ10XX:  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * PSA:                        no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * System CA certs:            yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Dual alg cert support:      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * ERR Queues per Thread:      yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * rwlock:                     no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * keylog export:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * AutoSAR :                   no
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": ./configure flags: '--enable-static' '--disable-crypttests' '--disable-examples' 'CC=clang' 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function'
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": Note: Make sure your application includes "wolfssl/options.h" before any other wolfSSL headers.
Step #48 - "compile-libfuzzer-undefined-x86_64":       You can define "WOLFSSL_USE_OPTIONS_H" in your application to include this automatically.
Step #48 - "compile-libfuzzer-undefined-x86_64": ++ nproc
Step #48 - "compile-libfuzzer-undefined-x86_64": + make -j32
Step #48 - "compile-libfuzzer-undefined-x86_64": make -j33  all-recursive
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: Entering directory '/src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": make[2]: Entering directory '/src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": make[2]: warning: -j33 forced in submake: resetting jobserver mode.
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hmac.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-hash.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-cpuid.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-random.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-kdf.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha256.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-rsa.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sp_int.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-aes.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha512.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-sha3.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-logging.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_port.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-error.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wc_encrypt.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-signature.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-wolfmath.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-memory.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-dh.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-asn.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-coding.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-poly1305.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pwdbased.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-pkcs12.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-chacha20_poly1305.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       wolfcrypt/src/src_libwolfssl_la-ecc.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-wolfio.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-internal.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-keys.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-ssl.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-tls.lo
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[0;1;35m[0;1;35mwarning: [0m[0;1;35m[1mwarning: unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m[1m
Step #48 - "compile-libfuzzer-undefined-x86_64": unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m[0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0;1;35m[0mwarning: [1m[0munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1m[0;1;35m[0;1;35mwarning: warning: [0m[0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option]unknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m[0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0;1;35mwarning: [0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1m[0;1;35munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option]warning: [0m[0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": warning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfssl_la-tls13.lo
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64":   CCLD     src/libwolfssl.la
Step #48 - "compile-libfuzzer-undefined-x86_64": make[2]: Leaving directory '/src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: Leaving directory '/src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": ++ realpath .
Step #48 - "compile-libfuzzer-undefined-x86_64": + export 'CFLAGS=-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function -I /src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": + CFLAGS='-O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function -I /src/wolfssl'
Step #48 - "compile-libfuzzer-undefined-x86_64": ++ realpath src/.libs/
Step #48 - "compile-libfuzzer-undefined-x86_64": + export LDFLAGS=-L/src/wolfssl/src/.libs
Step #48 - "compile-libfuzzer-undefined-x86_64": + LDFLAGS=-L/src/wolfssl/src/.libs
Step #48 - "compile-libfuzzer-undefined-x86_64": + cd /src/wolfmqtt/
Step #48 - "compile-libfuzzer-undefined-x86_64": + ./autogen.sh
Step #48 - "compile-libfuzzer-undefined-x86_64": Making missing build-aux directory.
Step #48 - "compile-libfuzzer-undefined-x86_64": Touching missing build-aux/config.rpath file.
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: Entering directory `.'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: configure.ac: not using Gettext
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: aclocal --force -I m4
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: configure.ac: tracing
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: libtoolize --copy --force
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'build-aux/ltmain.sh'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/libtool.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltoptions.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltsugar.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/ltversion.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": libtoolize: copying file 'm4/lt~obsolete.m4'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: /usr/bin/autoconf --force
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: /usr/bin/autoheader --force
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: running: automake --add-missing --copy --force-missing
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:46: installing 'build-aux/compile'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:21: installing 'build-aux/config.guess'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:21: installing 'build-aux/config.sub'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:24: installing 'build-aux/install-sh'
Step #48 - "compile-libfuzzer-undefined-x86_64": configure.ac:24: installing 'build-aux/missing'
Step #48 - "compile-libfuzzer-undefined-x86_64": Makefile.am: installing 'build-aux/depcomp'
Step #48 - "compile-libfuzzer-undefined-x86_64": parallel-tests: installing 'build-aux/test-driver'
Step #48 - "compile-libfuzzer-undefined-x86_64": autoreconf: Leaving directory `.'
Step #48 - "compile-libfuzzer-undefined-x86_64": + ./configure --enable-static --disable-examples --enable-mqtt5
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for pkg-config... /usr/bin/pkg-config
Step #48 - "compile-libfuzzer-undefined-x86_64": checking pkg-config is at least version 0.9.0... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking build system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking host system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking target system type... x86_64-pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a BSD-compatible install... /usr/bin/install -c
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether build environment is sane... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gawk... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for mawk... mawk
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make sets $(MAKE)... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports nested variables... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether UID '0' is supported by ustar format... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether GID '0' is supported by ustar format... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to create a ustar tar archive... gnutar
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to print strings... printf
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports the include directive... yes (GNU style)
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gcc... clang
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the C compiler works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for C compiler default output file name... a.out
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for suffix of executables... 
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether we are cross compiling... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for suffix of object files... o
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether we are using the GNU C compiler... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang accepts -g... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for clang option to accept ISO C89... none needed
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang understands -c and -o together... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dependency style of clang... gcc3
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a sed that does not truncate output... /usr/bin/sed
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for grep that handles long lines and -e... /usr/bin/grep
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for egrep... /usr/bin/grep -E
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for fgrep... /usr/bin/grep -F
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ld used by clang... /usr/bin/ld
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if the linker (/usr/bin/ld) is GNU ld... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the name lister (/usr/bin/nm -B) interface... BSD nm
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether ln -s works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the maximum length of command line arguments... 1572864
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for /usr/bin/ld option to reload object files... -r
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for objdump... objdump
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to recognize dependent libraries... pass_all
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for dlltool... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to associate runtime and link libraries... printf %s\n
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ar... ar
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for archiver @FILE support... @
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for strip... strip
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ranlib... ranlib
Step #48 - "compile-libfuzzer-undefined-x86_64": checking command to parse /usr/bin/nm -B output from clang object... ok
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sysroot... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for a working dd... /usr/bin/dd
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for mt... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if : is a manifest tool... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to run the C preprocessor... clang -E
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for ANSI C header files... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/types.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/stat.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stdlib.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for string.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for memory.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for strings.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for inttypes.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stdint.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for unistd.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for dlfcn.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for objdir... .libs
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -fno-rtti -fno-exceptions... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for clang option to produce PIC... -fPIC -DPIC
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang PIC flag -fPIC -DPIC works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang static flag -static works... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -c -o file.o... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if clang supports -c -o file.o... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the clang linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether -lc should be explicitly linked in... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dynamic linker characteristics... GNU/Linux ld.so
Step #48 - "compile-libfuzzer-undefined-x86_64": checking how to hardcode library paths into programs... immediate
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether stripping libraries is possible... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking if libtool supports shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether to build shared libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether to build static libraries... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the -Werror option is usable... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for simple visibility declarations... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether make supports nested variables... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gcc... (cached) clang
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether we are using the GNU C compiler... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang accepts -g... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for clang option to accept ISO C89... (cached) none needed
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang understands -c and -o together... (cached) yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking dependency style of clang... (cached) gcc3
Step #48 - "compile-libfuzzer-undefined-x86_64": checking size of long long... 8
Step #48 - "compile-libfuzzer-undefined-x86_64": checking size of long... 8
Step #48 - "compile-libfuzzer-undefined-x86_64": checking arpa/inet.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking arpa/inet.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for arpa/inet.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking fcntl.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking fcntl.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for fcntl.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking limits.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking limits.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for limits.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netdb.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netdb.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for netdb.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netinet/in.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking netinet/in.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for netinet/in.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stddef.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking stddef.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for stddef.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking time.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking time.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for time.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/ioctl.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/ioctl.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/ioctl.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/socket.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/socket.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/socket.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/time.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/time.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/time.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking errno.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking errno.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for errno.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/un.h usability... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking sys/un.h presence... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for sys/un.h... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gethostbyname... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for getaddrinfo... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for gettimeofday... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for inet_ntoa... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for memset... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for socket... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for signal... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for rand... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for socket in -lnetwork... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for wolfSSL... configure: prefix NONE
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for debug... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether clang is Clang... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether pthreads work with "-pthread" and "-lpthread"... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether Clang needs flag to prevent "argument unused" warning when linking with -pthread... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether more special flags are required for pthreads... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for PTHREAD_PRIO_INHERIT... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for wolfCrypt_Init in -lwolfssl... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for vcs system... git
Step #48 - "compile-libfuzzer-undefined-x86_64": checking for vcs checkout... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -Werror... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -z relro -z now... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether the linker accepts -pie... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Werror... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wno-pragmas... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wall... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wno-strict-aliasing... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wextra... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunknown-pragmas... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wthis-test-should-fail... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Waddress... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Warray-bounds... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wbad-function-cast... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wchar-subscripts... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wcomment... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wfloat-equal... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wformat-security... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wformat=2... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmaybe-uninitialized... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-field-initializers... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-noreturn... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wmissing-prototypes... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wnested-externs... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wnormalized=id... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Woverride-init... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wpointer-arith... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wpointer-sign... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wredundant-decls... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wshadow... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wshorten-64-to-32... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wsign-compare... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wstrict-overflow=1... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wstrict-prototypes... no
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wswitch-enum... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wundef... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused-result... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wunused-variable... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -Wwrite-strings... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": checking whether C compiler accepts -fwrapv... yes
Step #48 - "compile-libfuzzer-undefined-x86_64": creating wolfmqtt-config - generic 1.20.0 for -lwolfmqtt -lwolfssl
Step #48 - "compile-libfuzzer-undefined-x86_64": checking the number of available CPUs... 32
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: adding automake macro support
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: creating aminclude.am
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: added jobserver support to make for 33 jobs
Step #48 - "compile-libfuzzer-undefined-x86_64": checking that generated files are newer than configure... done
Step #48 - "compile-libfuzzer-undefined-x86_64": configure: creating ./config.status
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating Makefile
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating wolfmqtt/version.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: creating src/config.h
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing depfiles commands
Step #48 - "compile-libfuzzer-undefined-x86_64": config.status: executing libtool commands
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": Running make clean...
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": Generating user options header...
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -O1, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fno-omit-frame-pointer, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -gline-tables-only, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=incompatible-function-pointer-types, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=int-conversion, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=deprecated-declarations, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=implicit-function-declaration, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=implicit-int, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=unknown-warning-option, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-error=vla-cxx-extension, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fsanitize=fuzzer-no-link, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fno-sanitize=function, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -I, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is /src/wolfssl, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Werror, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-pragmas, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wall, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wno-strict-aliasing, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wextra, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wunknown-pragmas, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wthis-test-should-fail, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Waddress, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Warray-bounds, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wbad-function-cast, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wchar-subscripts, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wcomment, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wfloat-equal, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wformat-security, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wformat=2, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wmaybe-uninitialized, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wmissing-field-initializers, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wmissing-noreturn, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wmissing-prototypes, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wnested-externs, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wnormalized=id, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Woverride-init, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wpointer-arith, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wpointer-sign, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wredundant-decls, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wshadow, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wshorten-64-to-32, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wsign-compare, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wstrict-overflow=1, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wswitch-enum, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wundef, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wunused, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wunused-result, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wunused-variable, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -Wwrite-strings, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fwrapv, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -fvisibility=hidden, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -I/usr/local/include, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -O2, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": not outputting (N)DEBUG to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": option w/o begin -D is -pthread, not saving to wolfmqtt/options.h
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": ---
Step #48 - "compile-libfuzzer-undefined-x86_64": Configuration summary for wolfmqtt version 1.20.0
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Installation prefix:       /usr/local
Step #48 - "compile-libfuzzer-undefined-x86_64":    * System type:               pc-linux-gnu
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Host CPU:                  x86_64
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C Compiler:                clang
Step #48 - "compile-libfuzzer-undefined-x86_64":    * C Flags:                   -O1   -fno-omit-frame-pointer   -gline-tables-only   -Wno-error=incompatible-function-pointer-types   -Wno-error=int-conversion   -Wno-error=deprecated-declarations   -Wno-error=implicit-function-declaration   -Wno-error=implicit-int   -Wno-error=unknown-warning-option   -Wno-error=vla-cxx-extension   -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -fno-sanitize=function -I /src/wolfssl -Werror -Wno-pragmas -Wall -Wno-strict-aliasing -Wextra -Wunknown-pragmas -Wthis-test-should-fail -Waddress -Warray-bounds -Wbad-function-cast -Wchar-subscripts -Wcomment -Wfloat-equal -Wformat-security -Wformat=2 -Wmaybe-uninitialized -Wmissing-field-initializers -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs -Wnormalized=id -Woverride-init -Wpointer-arith -Wpointer-sign -Wredundant-decls -Wshadow -Wshorten-64-to-32 -Wsign-compare -Wstrict-overflow=1 -Wswitch-enum -Wundef -Wunused -Wunused-result -Wunused-variable -Wwrite-strings -fwrapv
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CPP Flags:                  -fvisibility=hidden -I/usr/local/include
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Linker Flags:              -L/src/wolfssl/src/.libs -L/usr/local/lib
Step #48 - "compile-libfuzzer-undefined-x86_64":    * LIB Flags:                  -pie -z relro -z now -Werror 
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Disconnect Callback:       yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Error Strings:             yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Enable MQTT-SN:            no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Enable MQTT v5.0:          yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Property Callback:         yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Examples:                  no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Non-Blocking:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * STDIN Capture:             yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * TLS:                       yes
Step #48 - "compile-libfuzzer-undefined-x86_64":    * CURL:                      no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Multi-thread:              no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * Stress:                    no
Step #48 - "compile-libfuzzer-undefined-x86_64":    * WebSocket:                 no
Step #48 - "compile-libfuzzer-undefined-x86_64": ++ nproc
Step #48 - "compile-libfuzzer-undefined-x86_64": + make -j32
Step #48 - "compile-libfuzzer-undefined-x86_64": make -j33  all-am
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: warning: -j33 forced in submake: resetting jobserver mode.
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: Entering directory '/src/wolfmqtt'
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfmqtt_la-mqtt_client.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfmqtt_la-mqtt_packet.lo
Step #48 - "compile-libfuzzer-undefined-x86_64":   CC       src/libwolfmqtt_la-mqtt_socket.lo
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35m[0;1;35mwarning: warning: [0m[0m[1m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option]unknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m[0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wthis-test-should-fail' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0;1;35m[0mwarning: 
Step #48 - "compile-libfuzzer-undefined-x86_64": [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wmaybe-uninitialized'; did you mean '-Wuninitialized'? [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": [0;1;35mwarning: [0m[1munknown warning option '-Wnormalized=id' [-Wunknown-warning-option][0m
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64": 3 warnings generated.
Step #48 - "compile-libfuzzer-undefined-x86_64":   CCLD     src/libwolfmqtt.la
Step #48 - "compile-libfuzzer-undefined-x86_64": make[1]: Leaving directory '/src/wolfmqtt'
Step #48 - "compile-libfuzzer-undefined-x86_64": + clang++ -O1 -fno-omit-frame-pointer -gline-tables-only -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion -Wno-error=deprecated-declarations -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=unknown-warning-option -Wno-error=vla-cxx-extension -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unsigned-integer-overflow,unreachable,vla-bound,vptr -fno-sanitize-recover=array-bounds,bool,builtin,enum,function,integer-divide-by-zero,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,unreachable,vla-bound,vptr -fsanitize=fuzzer-no-link -stdlib=libc++ -std=c++17 -I /src/fuzzing-headers/include/ -I /src/wolfssl/ -I /src/wolfmqtt/ /src/wolfmqtt-fuzzers/fuzzer.cpp /src/wolfmqtt/src/.libs/libwolfmqtt.a /src/wolfssl/src/.libs/libwolfssl.a -fsanitize=fuzzer -o /workspace/out/libfuzzer-undefined-x86_64/wolfmqtt-fuzzer
Finished Step #48 - "compile-libfuzzer-undefined-x86_64"
Starting Step #49 - "build-check-libfuzzer-undefined-x86_64"
Step #49 - "build-check-libfuzzer-undefined-x86_64": Already have image (with digest): gcr.io/cloud-builders/docker
Step #49 - "build-check-libfuzzer-undefined-x86_64": INFO: performing bad build checks for /tmp/not-out/tmph9t8qkkz/wolfmqtt-fuzzer
Finished Step #49 - "build-check-libfuzzer-undefined-x86_64"
Starting Step #50
Step #50: Already have image (with digest): gcr.io/oss-fuzz-base/base-runner
Finished Step #50
Starting Step #51
Step #51: Already have image: gcr.io/oss-fuzz/wolfmqtt
Step #51:   adding: llvm-symbolizer (deflated 65%)
Step #51:   adding: wolfmqtt-fuzzer (deflated 66%)
Finished Step #51
Starting Step #52
Step #52: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #52:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #52:                                  Dload  Upload   Total   Spent    Left  Speed
Step #52:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   653    0     0  100   653      0   3541 --:--:-- --:--:-- --:--:--  3529100   653    0     0  100   653      0   3540 --:--:-- --:--:-- --:--:--  3529
Finished Step #52
Starting Step #53
Step #53: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #53:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #53:                                  Dload  Upload   Total   Spent    Left  Speed
Step #53:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100 4591k    0     0  100 4591k      0  18.1M --:--:-- --:--:-- --:--:-- 18.1M
Finished Step #53
Starting Step #54
Step #54: Already have image (with digest): gcr.io/oss-fuzz-base/uploader
Step #54:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #54:                                  Dload  Upload   Total   Spent    Left  Speed
Step #54:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    16    0     0  100    16      0     63 --:--:-- --:--:-- --:--:--    64
Finished Step #54
Starting Step #55
Step #55: Already have image (with digest): gcr.io/cloud-builders/curl
Step #55:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Step #55:                                  Dload  Upload   Total   Spent    Left  Speed
Step #55:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    35    0     0  100    35      0    189 --:--:-- --:--:-- --:--:--   189
Finished Step #55
Starting Step #56
Step #56: Already have image: gcr.io/oss-fuzz/wolfmqtt
Finished Step #56
PUSH
DONE
